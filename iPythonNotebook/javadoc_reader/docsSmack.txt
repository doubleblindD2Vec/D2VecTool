org.igniterealtime.smack.smackrepl.SmackReplTest.emptyTest	(	): Just here to ensure jacoco is not complaining.
org.jivesoftware.smack.AbstractConnectionListener: The AbstractConnectionListener class provides an empty implementation for all methods defined by the ConnectionListener interface. This is a convenience class which should be used in case you do not need to implement all methods.
org.jivesoftware.smack.AbstractXMPPConnection.AbstractXMPPConnection	(	ConnectionConfiguration	): Create a new XMPPConnection to an XMPP server.
org.jivesoftware.smack.AbstractXMPPConnection.InterceptorWrapper: A wrapper class to associate a stanza(/packet) filter with an interceptor.
org.jivesoftware.smack.AbstractXMPPConnection.InterceptorWrapper.InterceptorWrapper	(	StanzaListener	StanzaFilter	): Create a class which associates a stanza(/packet) filter with an interceptor.
org.jivesoftware.smack.AbstractXMPPConnection.ListenerWrapper: A wrapper class to associate a stanza(/packet) filter with a listener.
org.jivesoftware.smack.AbstractXMPPConnection.ListenerWrapper.ListenerWrapper	(	StanzaListener	StanzaFilter	): Create a class which associates a stanza(/packet) filter with a listener.
org.jivesoftware.smack.AbstractXMPPConnection.connect	(	): Establishes a connection to the XMPP server. It basically creates and maintains a connection to the server.  Listeners will be preserved from a previous connection. 
org.jivesoftware.smack.AbstractXMPPConnection.connectInternal	(	): Abstract method that concrete subclasses of XMPPConnection need to implement to perform their way of XMPP connection establishment. Implementations are required to perform an automatic login if the previous connection state was logged (authenticated).
org.jivesoftware.smack.AbstractXMPPConnection.disconnect	(	): Closes the connection by setting presence to unavailable then closing the connection to the XMPP server. The XMPPConnection can still be used for connecting to the server again.
org.jivesoftware.smack.AbstractXMPPConnection.disconnect	(	Presence	): Closes the connection. A custom unavailable presence is sent to the server, followed by closing the stream. The XMPPConnection can still be used for connecting to the server again. A custom unavailable presence is useful for communicating offline presence information such as "On vacation". Typically, just the status text of the presence stanza(/packet) is set with online information, but most XMPP servers will deliver the full presence stanza(/packet) with whatever data is set.
org.jivesoftware.smack.AbstractXMPPConnection.firePacketInterceptors	(	Stanza	): Process interceptors. Interceptors may modify the stanza(/packet) that is about to be sent. Since the thread that requested to send the stanza(/packet) will invoke all interceptors, it is important that interceptors perform their work as soon as possible so that the thread does not remain blocked for a long period.
org.jivesoftware.smack.AbstractXMPPConnection.firePacketSendingListeners	(	Stanza	): Process all stanza(/packet) listeners for sending packets.  Compared to firePacketInterceptors(), the listeners will be invoked in a new thread. 
org.jivesoftware.smack.AbstractXMPPConnection.getConfiguration	(	): Get the connection configuration used by this connection.
org.jivesoftware.smack.AbstractXMPPConnection.getParsingExceptionCallback	(	): Get the current active parsing exception callback.
org.jivesoftware.smack.AbstractXMPPConnection.getSASLAuthentication	(	): Returns the SASLAuthentication manager that is responsible for authenticating with the server.
org.jivesoftware.smack.AbstractXMPPConnection.getUsedSaslMechansism	(	): Get the name of the SASL mechanism that was used to authenticate this connection. This returns the name of mechanism which was used the last time this conneciton was authenticated, and will return null if this connection was not authenticated before.
org.jivesoftware.smack.AbstractXMPPConnection.initDebugger	(	): Initialize the debugger. You can specify a customized SmackDebugger by setup the system property smack.debuggerClass to the implementation.
org.jivesoftware.smack.AbstractXMPPConnection.invokeStanzaCollectorsAndNotifyRecvListeners	(	Stanza	): Invoke processStanza() for every StanzaCollector with the given packet. Also notify the receive listeners with a matching stanza(/packet) filter about the packet.
org.jivesoftware.smack.AbstractXMPPConnection.login	(	): Logs in to the server using the strongest SASL mechanism supported by the server. If more than the connection's default stanza(/packet) timeout elapses in each step of the authentication process without a response from the server, a SmackException.NoResponseException will be thrown.  Before logging in (i.e. authenticate) to the server the connection must be connected by calling connect.   It is possible to log in without sending an initial available presence by using setSendPresence(). Finally, if you want to not pass a password and instead use a more advanced mechanism while using SASL then you may be interested in using setCallbackHandler(). For more advanced login settings see ConnectionConfiguration. 
org.jivesoftware.smack.AbstractXMPPConnection.login	(	CharSequence	String	): Same as login(), but takes the resource from the connection configuration.
org.jivesoftware.smack.AbstractXMPPConnection.login	(	CharSequence	String	Resourcepart	): Login with the given username (authorization identity). You may omit the password if a callback handler is used. If resource is null, then the server will generate one.
org.jivesoftware.smack.AbstractXMPPConnection.notifyReconnection	(	): Sends a notification indicating that the connection was reconnected successfully.
org.jivesoftware.smack.AbstractXMPPConnection.populateHostAddresses	(	): Populates hostAddresses with the resolved addresses or with the configured host address. If no host address was configured and all lookups failed, for example with NX_DOMAIN, then hostAddresses will be populated with the empty list.
org.jivesoftware.smack.AbstractXMPPConnection.processStanza	(	Stanza	): Processes a stanza(/packet) after it's been fully parsed by looping through the installed stanza(/packet) collectors and listeners and letting them examine the stanza(/packet) to see if they are a match with the filter.
org.jivesoftware.smack.AbstractXMPPConnection.setParsingExceptionCallback	(	ParsingExceptionCallback	): Install a parsing exception callback, which will be invoked once an exception is encountered while parsing a stanza.
org.jivesoftware.smack.AbstractXMPPConnection.setReplyToUnknownIq	(	boolean	): Set if Smack will automatically send feature_not_implemented when a request IQ without a registered IQRequestHandler is received.
org.jivesoftware.smack.AbstractXMPPConnection.setReplyToUnknownIqDefault	(	boolean	): Set the default value used to determine if new connection will reply to unknown IQ requests. The pre-configured default is 'true'.
org.jivesoftware.smack.AbstractXMPPConnection.setWasAuthenticated	(	): Sets whether the connection has already logged in the server. This method assures that the wasAuthenticated flag is never reset once it has ever been set.
org.jivesoftware.smack.AbstractXMPPConnection.shutdown	(	): Shuts the current connection down.
org.jivesoftware.smack.ChatTest: Tests for Chat Manager and for Chat Manager Listener.
org.jivesoftware.smack.ConnectionConfiguration: Configuration to use while establishing the connection to the server.
org.jivesoftware.smack.ConnectionConfiguration.Builder: A builder for XMPP connection configurations.  This is an abstract class that uses the builder design pattern and the "getThis() trick" to recover the type of the builder in a class hierarchies with a self-referential generic supertype. Otherwise chaining of build instructions from the superclasses followed by build instructions of a sublcass would not be possible, because the superclass build instructions would return the builder of the superclass and not the one of the subclass. You can read more about it a Angelika Langer's Generics FAQ, especially the entry What is the "getThis()" trick?. 
org.jivesoftware.smack.ConnectionConfiguration.Builder.addEnabledSaslMechanism	(	Collection	): Enable the given SASL mechanisms. If you never add a mechanism to the set of enabled ones, all mechanisms known to Smack will be enabled. Only explicitly enable particular SASL mechanisms if you want to limit the used mechanisms to the enabled ones.
org.jivesoftware.smack.ConnectionConfiguration.Builder.addEnabledSaslMechanism	(	String	): Add the given mechanism to the enabled ones. See addEnabledSaslMechanism() for a discussion about enabled SASL mechanisms.
org.jivesoftware.smack.ConnectionConfiguration.Builder.allowEmptyOrNullUsernames	(	): Allow null or the empty String as username. Some SASL mechanisms (e.g. SASL External) may also signal the username (as "authorization identity"), in which case Smack should not throw an IllegalArgumentException when the username is not set.
org.jivesoftware.smack.ConnectionConfiguration.Builder.performSaslAnonymousAuthentication	(	): Perform anonymous authentication using SASL ANONYMOUS. Your XMPP service must support this authentication mechanism. This method also calls addEnabledSaslMechanism() with "ANONYMOUS" as argument.
org.jivesoftware.smack.ConnectionConfiguration.Builder.performSaslExternalAuthentication	(	SSLContext	): Perform authentication using SASL EXTERNAL. Your XMPP service must support this authentication mechanism. This method also calls addEnabledSaslMechanism() with "EXTERNAL" as argument. It also calls allowEmptyOrNullUsernames() and setSecurityMode() to required.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setAuthzid	(	EntityBareJid	): Set the XMPP address to be used as authorization identity.  In XMPP, authorization identities are bare jids. In general, callers should allow the server to select the authorization identifier automatically, and not call this. Note that setting the authzid does not set the XMPP service domain, which should typically match. Calling this will also SASL CRAM, since this mechanism does not support authzid. 
org.jivesoftware.smack.ConnectionConfiguration.Builder.setCallbackHandler	(	CallbackHandler	): Sets a CallbackHandler to obtain information, such as the password or principal information during the SASL authentication. A CallbackHandler will be used ONLY if no password was specified during the login while using SASL authentication.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setCustomSSLContext	(	SSLContext	): Sets a custom SSLContext for creating SSL sockets.  For more information on how to create a SSLContext see Java Secure Socket Extension (JSEE) Reference Guide: Creating Your Own X509TrustManager
org.jivesoftware.smack.ConnectionConfiguration.Builder.setDebuggerEnabled	(	boolean	): Sets if the new connection about to be establish is going to be debugged. By default the value of DEBUG is used.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setEnabledSSLCiphers	(	String[]	): Set the enabled SSL/TLS ciphers.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setEnabledSSLProtocols	(	String[]	): Set the enabled SSL/TLS protocols.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setHost	(	String	): Set the name of the host providing the XMPP service. Note that this method does only allow DNS names and not IP addresses. Use setHostAddress() if you want to explicitly set the Internet address of the host providing the XMPP service.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setHostAddress	(	InetAddress	): Set the Internet address of the host providing the XMPP service. If set, then this will overwrite anything set via setHost().
org.jivesoftware.smack.ConnectionConfiguration.Builder.setHostnameVerifier	(	HostnameVerifier	): Set the HostnameVerifier used to verify the hostname of SSLSockets used by XMPP connections created with this ConnectionConfiguration.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setKeystorePath	(	String	): Sets the path to the keystore file. The key store file contains the certificates that may be used to authenticate the client to the server, in the event the server requests or requires it.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setKeystoreType	(	String	): Sets the keystore type.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setLegacySessionDisabled	(	boolean	): Sets if a Session will be requested on login if the server supports it. Although this was mandatory on RFC 3921, RFC 6120/6121 don't even mention this part of the protocol.  Deprecation notice: This setting is no longer required in most cases because Smack processes the 'optional' element eventually found in the session stream feature. See also Here Lies Extensible Messaging and Presence Protocol (XMPP) Session Establishment 
org.jivesoftware.smack.ConnectionConfiguration.Builder.setPKCS11Library	(	String	): Sets the PKCS11 library file location, needed when the Keystore type is PKCS11.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setProxyInfo	(	ProxyInfo	): Set the information about the Proxy used for the connection.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setResource	(	CharSequence	): Set the resource we are requesting from the server.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setResource	(	Resourcepart	): Set the resource we are requesting from the server.  If resource is null, the default, then the server will automatically create a resource for the client. Note that XMPP clients only suggest this resource to the server. XMPP servers are allowed to ignore the client suggested resource and instead assign a completely different resource (see RFC 6120 § 7.7.1). 
org.jivesoftware.smack.ConnectionConfiguration.Builder.setSecurityMode	(	SecurityMode	): Sets the TLS security mode used when making the connection. By default, the mode is ifpossible.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setSendPresence	(	boolean	): Sets if an initial available presence will be sent to the server. By default an available presence will be sent to the server indicating that this presence is not online and available to receive messages. If you want to log in without being 'noticed' then pass a false value.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setServiceName	(	DomainBareJid	): Set the XMPP domain. The XMPP domain is what follows after the '@' sign in XMPP addresses (JIDs).
org.jivesoftware.smack.ConnectionConfiguration.Builder.setSocketFactory	(	SocketFactory	): Sets the socket factory used to create new xmppConnection sockets. This is useful when connecting through SOCKS5 proxies.
org.jivesoftware.smack.ConnectionConfiguration.Builder.setUsernameAndPassword	(	CharSequence	String	): Set the XMPP entities username and password.  The username is usually the localpart of the clients JID. But some SASL mechanisms or services may require a different format (e.g. the full JID) as used authorization identity. 
org.jivesoftware.smack.ConnectionConfiguration.Builder.setXmppDomain	(	DomainBareJid	): Set the XMPP domain. The XMPP domain is what follows after the '@' sign in XMPP addresses (JIDs).
org.jivesoftware.smack.ConnectionConfiguration.Builder.setXmppDomain	(	String	): Set the XMPP domain. The XMPP domain is what follows after the '@' sign in XMPP addresses (JIDs).
org.jivesoftware.smack.ConnectionConfiguration.getAuthzid	(	): Returns the optional XMPP address to be requested as the SASL authorization identity.
org.jivesoftware.smack.ConnectionConfiguration.getCallbackHandler	(	): Returns a CallbackHandler to obtain information, such as the password or principal information during the SASL authentication. A CallbackHandler will be used ONLY if no password was specified during the login while using SASL authentication.
org.jivesoftware.smack.ConnectionConfiguration.getCustomSSLContext	(	): Gets the custom SSLContext previously set with setCustomSSLContext() for SSL sockets. This is null by default.
org.jivesoftware.smack.ConnectionConfiguration.getEnabledSSLCiphers	(	): Return the enabled SSL/TLS ciphers.
org.jivesoftware.smack.ConnectionConfiguration.getEnabledSSLProtocols	(	): Return the enabled SSL/TLS protocols.
org.jivesoftware.smack.ConnectionConfiguration.getEnabledSaslMechanisms	(	): Return the explicitly enabled SASL mechanisms. May return null if no SASL mechanisms where explicitly enabled, i.e. all SALS mechanisms supported and announced by the service will be considered.
org.jivesoftware.smack.ConnectionConfiguration.getHostnameVerifier	(	): Returns the configured HostnameVerifier of this ConnectionConfiguration or the Smack default HostnameVerifier configured with setDefaultHostnameVerifier().
org.jivesoftware.smack.ConnectionConfiguration.getKeystorePath	(	): Retuns the path to the keystore file. The key store file contains the certificates that may be used to authenticate the client to the server, in the event the server requests or requires it.
org.jivesoftware.smack.ConnectionConfiguration.getKeystoreType	(	): Returns the keystore type, or null if it's not set.
org.jivesoftware.smack.ConnectionConfiguration.getPKCS11Library	(	): Returns the PKCS11 library file location, needed when the Keystore type is PKCS11.
org.jivesoftware.smack.ConnectionConfiguration.getPassword	(	): Returns the password to use when trying to reconnect to the server.
org.jivesoftware.smack.ConnectionConfiguration.getProxyInfo	(	): Get the configured proxy information (if any).
org.jivesoftware.smack.ConnectionConfiguration.getResource	(	): Returns the resource to use when trying to reconnect to the server.
org.jivesoftware.smack.ConnectionConfiguration.getSecurityMode	(	): Returns the TLS security mode used when making the connection. By default, the mode is ifpossible.
org.jivesoftware.smack.ConnectionConfiguration.getServiceName	(	): Returns the server name of the target server.
org.jivesoftware.smack.ConnectionConfiguration.getSocketFactory	(	): Returns the socket factory used to create new xmppConnection sockets. This is useful when connecting through SOCKS5 proxies.
org.jivesoftware.smack.ConnectionConfiguration.getUsername	(	): Returns the username to use when trying to reconnect to the server.
org.jivesoftware.smack.ConnectionConfiguration.getXMPPServiceDomain	(	): Returns the XMPP domain used by this configuration.
org.jivesoftware.smack.ConnectionConfiguration.isCompressionEnabled	(	): Returns true if the connection is going to use stream compression. Stream compression will be requested after TLS was established (if TLS was enabled) and only if the server offered stream compression. With stream compression network traffic can be reduced up to 90%. By default compression is disabled.
org.jivesoftware.smack.ConnectionConfiguration.isDebuggerEnabled	(	): Returns true if the new connection about to be establish is going to be debugged. By default the value of DEBUG is used.
org.jivesoftware.smack.ConnectionConfiguration.isEnabledSaslMechanism	(	String	): Check if the given SASL mechansism is enabled in this connection configuration.
org.jivesoftware.smack.ConnectionConfiguration.isLegacySessionDisabled	(	): Returns true if a Session will be requested on login if the server supports it. Although this was mandatory on RFC 3921, RFC 6120/6121 don't even mention this part of the protocol.
org.jivesoftware.smack.ConnectionConfiguration.isSendPresence	(	): Returns true if an available presence should be sent when logging in while reconnecting.
org.jivesoftware.smack.ConnectionCreationListener: Implementors of this interface will be notified when a new XMPPConnection has been created. The newly created connection will not be actually connected to the server. Use addConnectionCreationListener() to add new listeners.
org.jivesoftware.smack.ConnectionCreationListener.connectionCreated	(	XMPPConnection	): Notification that a new connection has been created. The new connection will not yet be connected to the server.
org.jivesoftware.smack.ConnectionListener: Interface that allows for implementing classes to listen for connection closing and reconnection events. Listeners are registered with XMPPConnection objects.
org.jivesoftware.smack.ConnectionListener.authenticated	(	XMPPConnection	boolean	): Notification that the connection has been authenticated.
org.jivesoftware.smack.ConnectionListener.connected	(	XMPPConnection	): Notification that the connection has been successfully connected to the remote endpoint (e.g. the XMPP server).  Note that the connection is likely not yet authenticated and therefore only limited operations like registering an account may be possible. 
org.jivesoftware.smack.ConnectionListener.connectionClosed	(	): Notification that the connection was closed normally.
org.jivesoftware.smack.ConnectionListener.connectionClosedOnError	(	Exception	): Notification that the connection was closed due to an exception. When abruptly disconnected it is possible for the connection to try reconnecting to the server.
org.jivesoftware.smack.ConnectionListener.reconnectingIn	(	int	): The connection will retry to reconnect in the specified number of seconds.  Note: This method is only called if isAutomaticReconnectEnabled() returns true, i.e. only when the reconnection manager is enabled for the connection. 
org.jivesoftware.smack.ConnectionListener.reconnectionFailed	(	Exception	): An attempt to connect to the server has failed. The connection will keep trying reconnecting to the server in a moment.  Note: This method is only called if isAutomaticReconnectEnabled() returns true, i.e. only when the reconnection manager is enabled for the connection. 
org.jivesoftware.smack.ConnectionListener.reconnectionSuccessful	(	): The connection has reconnected successfully to the server. Connections will reconnect to the server when the previous socket connection was abruptly closed.
org.jivesoftware.smack.DummyConnection: A dummy implementation of XMPPConnection, intended to be used during unit tests. Instances store any packets that are delivered to be send using the sendStanza() method in a blocking queue. The content of this queue can be inspected using getSentPacket(). Typically these queues are used to retrieve a message that was generated by the client. Packets that should be processed by the client to simulate a received stanza can be delivered using the processStanza() method. It invokes the registered stanza(/packet) interceptors and listeners.
org.jivesoftware.smack.DummyConnection.enableStreamFeature	(	ExtensionElement	): Enable stream feature.
org.jivesoftware.smack.DummyConnection.getNumberOfSentPackets	(	): Returns the number of packets that's sent through sendStanza() and that has not been returned by getSentPacket().
org.jivesoftware.smack.DummyConnection.getSentPacket	(	): Returns the first stanza(/packet) that's sent through sendStanza() and that has not been returned by earlier calls to this method.
org.jivesoftware.smack.DummyConnection.getSentPacket	(	int	): Returns the first stanza(/packet) that's sent through sendStanza() and that has not been returned by earlier calls to this method. This method will block for up to the specified number of seconds if no packets have been sent yet.
org.jivesoftware.smack.DummyConnection.processStanza	(	Stanza	): Processes a stanza(/packet) through the installed stanza(/packet) collectors and listeners and letting them examine the stanza(/packet) to see if they are a match with the filter.
org.jivesoftware.smack.FloodTest: Simple test to measure server performance.
org.jivesoftware.smack.IQTest: Ensure that the server is handling IQ packets correctly.
org.jivesoftware.smack.IQTest.testFullJIDToOfflineUser	(	): Check that sending an IQ to a full JID that is offline returns an IQ ERROR instead of being route to some other resource of the same user. 
org.jivesoftware.smack.IQTest.testInvalidNamespace	(	): Check that the server responds a 503 error code when the client sends an IQ stanza(/packet) with an invalid namespace.
org.jivesoftware.smack.LoginIntegrationTest.testInvalidLogin	(	): Check that the server is returning the correct error when trying to login using an invalid (i.e. non-existent) user.
org.jivesoftware.smack.LoginTest: Includes set of login tests. 
org.jivesoftware.smack.LoginTest.testLoginWithNoResource	(	): Check that the server does not allow to log in without specifying a resource.
org.jivesoftware.smack.LoginTest.testNonSASLAnonymousLogin	(	): Check that the server handles anonymous users correctly.
org.jivesoftware.smack.LoginTest.testSASLAnonymousLogin	(	): Check that the server handles anonymous users correctly.
org.jivesoftware.smack.Manager.getAuthenticatedConnectionOrThrow	(	): Get the XMPPConnection of this Manager if it's authenticated, i.e. logged in. Otherwise throw a NotLoggedInException.
org.jivesoftware.smack.MessageTest: Tests sending messages to other clients.
org.jivesoftware.smack.MessageTest.testDirectPresence	(	): Will a user recieve a message from another after only sending the user a directed presence, or will Wildfire intercept for offline storage? User1 becomes lines. User0 never sent an available presence to the server but instead sent one to User1. User1 sends a message to User0. Should User0 get the message?
org.jivesoftware.smack.MessageTest.testHighestPriority	(	): User0 is connected from 2 resources. User0 is available in both resources but with different priority presence values. User1 sends a message to the bare JID of User0. Check that the resource with highest priority will get the messages.
org.jivesoftware.smack.MessageTest.testHighestShow	(	): User0 is connected from 2 resources. User0 is available in both resources but with different show values. User1 sends a message to the bare JID of User0. Check that the resource with highest show value will get the messages.
org.jivesoftware.smack.MessageTest.testHugeMessage	(	): Check that two clients are able to send messages with a body of 4K characters and their connections are not being closed.
org.jivesoftware.smack.MessageTest.testMostRecentActive	(	): User0 is connected from 2 resources. User0 is available in both resources with same priority presence values and same show values. User1 sends a message to the bare JID of User0. Check that the resource with most recent activity will get the messages.
org.jivesoftware.smack.MessageTest.testOfflineMessage	(	): Check that when a client becomes unavailable all messages sent to the client are stored offline. So that when the client becomes available again the offline messages are received.
org.jivesoftware.smack.MessageTest.testOfflineStorageWithNegativePriority	(	): User0 is connected from 1 resource with a negative priority presence. User1 sends a message to the bare JID of User0. Messages should be stored offline. User0 then changes the priority presence to a positive value. Check that offline messages were delivered to the user.
org.jivesoftware.smack.PacketListener: This interface is deprecated.
org.jivesoftware.smack.PacketReaderTest.PacketReaderTest	(	String	): Constructor for PacketReaderTest.
org.jivesoftware.smack.PacketReaderTest.testErrorWithNoText	(	): Checks that parser still works when receiving an error text with no description.
org.jivesoftware.smack.PacketReaderTest.testFiltersRemotion	(	): Tests that PacketReader adds new listeners and also removes them correctly.
org.jivesoftware.smack.PacketReaderTest.testIQNotImplemented	(	): Verify that when Smack receives a "not implemented IQ" answers with an IQ packet with error code 501.
org.jivesoftware.smack.PacketReaderTest.testRemoveListener	(	): Tests that PacketReader adds new listeners and also removes them correctly.
org.jivesoftware.smack.PresenceTest: Ensure that the server is delivering messages to the correct client based on the client's presence priority.
org.jivesoftware.smack.PresenceTest.testMessageToHighestPriority	(	): XMPPConnection(0) will send messages to the bareJID of XMPPConnection(1) where the user of XMPPConnection(1) has logged from two different places with different presence priorities.
org.jivesoftware.smack.PresenceTest.testMultipleResources	(	): User1 is connected from 2 resources. User1 adds User0 to his roster. Ensure that presences are correctly retrieved for User1. User1 logs off from one resource and ensure that presences are still correct for User1.
org.jivesoftware.smack.PresenceTest.testNotAvailablePresence	(	): User1 logs from 2 resources but only one is available. User0 sends a message to the full JID of the unavailable resource. User1 in the not available resource should receive the message. TODO Fix this in Wildfire but before check if XMPP spec requests this feature
org.jivesoftware.smack.PresenceTest.testOfflineStatusPresence	(	): User1 logs in, then sets offline presence information (presence with status text). User2 logs in and checks to see if offline presence is returned.
org.jivesoftware.smack.PrivacyClient: This class supports automated tests about privacy communication from the server to the client.
org.jivesoftware.smack.ReconnectionManager: Handles the automatic reconnection process. Every time a connection is dropped without the application explicitly closing it, the manager automatically tries to reconnect to the server. There are two possible reconnection policies: RANDOM_INCREASING_DELAY - The reconnection mechanism will try to reconnect periodically:  For the first minute it will attempt to connect once every ten seconds. For the next five minutes it will attempt to connect once a minute. If that fails it will indefinitely try to connect once every five minutes.  FIXED_DELAY - The reconnection mechanism will try to reconnect after a fixed delay independently from the number of reconnection attempts already performed
org.jivesoftware.smack.ReconnectionManager.disableAutomaticReconnection	(	): Disable the automatic reconnection mechanism. Does nothing if already disabled.
org.jivesoftware.smack.ReconnectionManager.enableAutomaticReconnection	(	): Enable the automatic reconnection mechanism. Does nothing if already enabled.
org.jivesoftware.smack.ReconnectionManager.getEnabledPerDefault	(	): Get the current default reconnection mechanism setting for new XMPP connections.
org.jivesoftware.smack.ReconnectionManager.getInstanceFor	(	AbstractXMPPConnection	): Get a instance of ReconnectionManager for the given connection.
org.jivesoftware.smack.ReconnectionManager.isAutomaticReconnectEnabled	(	): Returns if the automatic reconnection mechanism is enabled. You can disable the reconnection mechanism with disableAutomaticReconnection and enable the mechanism with enableAutomaticReconnection().
org.jivesoftware.smack.ReconnectionManager.isReconnectionPossible	(	XMPPConnection	): Returns true if the reconnection mechanism is enabled.
org.jivesoftware.smack.ReconnectionManager.reconnect	(	): Starts a reconnection mechanism if it was configured to do that. The algorithm is been executed when the first connection error is detected.
org.jivesoftware.smack.ReconnectionManager.setDefaultFixedDelay	(	int	): Set the default fixed delay in seconds between the reconnection attempts. Also set the default connection policy to FIXED_DELAY
org.jivesoftware.smack.ReconnectionManager.setDefaultReconnectionPolicy	(	ReconnectionPolicy	): Set the default Reconnection Policy to use.
org.jivesoftware.smack.ReconnectionManager.setEnabledPerDefault	(	boolean	): Set if the automatic reconnection mechanism will be enabled per default for new XMPP connections. The default is 'false'.
org.jivesoftware.smack.ReconnectionManager.setFixedDelay	(	int	): Set the fixed delay in seconds between the reconnection attempts Also set the connection policy to FIXED_DELAY.
org.jivesoftware.smack.ReconnectionManager.setReconnectionPolicy	(	ReconnectionPolicy	): Set the Reconnection Policy to use.
org.jivesoftware.smack.ReconnectionTest: Tests the connection and reconnection mechanism
org.jivesoftware.smack.ReconnectionTest.XMPPTCPConnectionTestListener.connectionClosed	(	): Methods to test the listener.
org.jivesoftware.smack.ReconnectionTest.executeSomeServerInteraction	(	TCPConnection	): Execute some server interaction in order to test that the regenerated connection works fine.
org.jivesoftware.smack.ReconnectionTest.testAnonymousReconnection	(	): Tests a reconnection in a anonymously logged connection. Closes the connection and then reconnects.
org.jivesoftware.smack.ReconnectionTest.testAutomaticReconnection	(	): Tests an automatic reconnection. Simulates a connection error and then waits until gets reconnected.
org.jivesoftware.smack.ReconnectionTest.testCloseAndManualReconnection	(	): Tests a manual reconnection after a login. Closes the connection and then reconnects.
org.jivesoftware.smack.ReconnectionTest.testManualReconnectionWithCancelation	(	): Tests a manual reconnection. Simulates a connection error, disables the reconnection mechanism and then reconnects.
org.jivesoftware.smack.RosterInitializedBeforeConnectTest: Run all tests defined in RosterTest but initialize the roster before connection is logged in and authenticated.
org.jivesoftware.smack.RosterListenerTest: Test cases for adding the RosterListener in different connection states.
org.jivesoftware.smack.RosterListenerTest.cleanUpRoster	(	): Clean up all the entries in the roster
org.jivesoftware.smack.RosterSmackTest: Tests the Roster functionality by creating and removing roster entries.
org.jivesoftware.smack.RosterSmackTest.RosterSmackTest	(	String	): Constructor for RosterSmackTest.
org.jivesoftware.smack.RosterSmackTest.cleanUpRoster	(	): Clean up all the entries in the roster
org.jivesoftware.smack.RosterSmackTest.testAddEntryToNewGroup	(	): Tests that adding an existing roster entry that belongs to a group to another group works fine.
org.jivesoftware.smack.RosterSmackTest.testChangeGroupAndNameToUnfiledEntry	(	): 1. Create an unfiled entry with no name 2. Check that the the entry does not belong to any group 3. Change its name and add it to a group 4. Check that the name has been modified and that the entry belongs to a group
org.jivesoftware.smack.RosterSmackTest.testChangeNameToUnfiledEntry	(	): 1. Create an unfiled entry 2. Change its name 3. Check that the name has been modified 4. Reload the whole roster 5. Check that the name has been modified
org.jivesoftware.smack.RosterSmackTest.testDeleteAllRosterEntries	(	): 1. Create entries in roster groups 2. Iterate on all the entries and remove them from the roster 3. Check that the number of entries and groups is zero
org.jivesoftware.smack.RosterSmackTest.testDeleteAllRosterGroupEntries	(	): 1. Create entries in roster groups 2. Iterate on the groups and remove the entry from each group 3. Check that the entries are kept as unfiled entries
org.jivesoftware.smack.RosterSmackTest.testDeleteAllUnfiledRosterEntries	(	): 1. Create unfiled entries 2. Iterate on all the entries and remove them from the roster 3. Check that the number of entries and groups is zero
org.jivesoftware.smack.RosterSmackTest.testMultipleResources	(	): User1 is connected from 2 resources. User1 adds User0 to his roster. Ensure that both resources of user1 get the available presence of User0. Remove User0 from User1's roster and check presences again.
org.jivesoftware.smack.RosterSmackTest.testNotCommonNickname	(	): Tests that the server and Smack are able to handle nicknames that include < > characters.
org.jivesoftware.smack.RosterSmackTest.testOfflinePresencesAfterDisconnection	(	): Tests the creation of a roster and then simulates abrupt termination. Cached presences must go offline. At reconnection, presences must go back to online.   Create some entries  Breack the connection  Check offline presences  Whait for automatic reconnection  Check online presences 
org.jivesoftware.smack.RosterSmackTest.testRenameRosterGroup	(	): Test if renaming a roster group works fine.
org.jivesoftware.smack.RosterSmackTest.testRosterPresences	(	): Test presence management. 1. Log in user0 from a client and user1 from 2 clients 2. Create presence subscription of type BOTH between 2 users 3. Check that presence is correctly delivered to both users 4. User1 logs out from a client 5. Check that presence for each connected resource is correct
org.jivesoftware.smack.SASLAuthentication: This class is responsible authenticating the user using SASL, binding the resource to the connection and establishing a session with the server. Once TLS has been negotiated (i.e. the connection has been secured) it is possible to register with the server or authenticate using SASL. If the server supports SASL then Smack will try to authenticate using SASL.. The server may support many SASL mechanisms to use for authenticating. Out of the box Smack provides several SASL mechanisms, but it is possible to register new SASL Mechanisms. Use registerSASLMechanism() to register a new mechanisms.
org.jivesoftware.smack.SASLAuthentication.authenticate	(	String	String	EntityBareJid	SSLSession	): Performs SASL authentication of the specified user. If SASL authentication was successful then resource binding and session establishment will be performed. This method will return the full JID provided by the server while binding a resource to the connection. The server may assign a full JID with a username or resource different than the requested by this method.
org.jivesoftware.smack.SASLAuthentication.authenticated	(	Success	): Notification message saying that SASL authentication was successful. The next step would be to bind the resource.
org.jivesoftware.smack.SASLAuthentication.authenticationFailed	(	SASLFailure	): Notification message saying that SASL authentication has failed. The server may have closed the connection depending on the number of possible retries.
org.jivesoftware.smack.SASLAuthentication.challengeReceived	(	String	): Wrapper for challengeReceived(), with finalChallenge set to false.
org.jivesoftware.smack.SASLAuthentication.challengeReceived	(	String	boolean	): The server is challenging the SASL authentication we just sent. Forward the challenge to the current SASLMechanism we are using. The SASLMechanism will eventually send a response to the server. The length of the challenge-response sequence varies according to the SASLMechanism in use.
org.jivesoftware.smack.SASLAuthentication.getRegisterdSASLMechanisms	(	): Returns the registered SASLMechanism sorted by the level of preference.
org.jivesoftware.smack.SASLAuthentication.init	(	): Initializes the internal state in order to be able to be reused. The authentication is used by the connection at the first login and then reused after the connection is disconnected and then reconnected.
org.jivesoftware.smack.SASLAuthentication.registerSASLMechanism	(	SASLMechanism	): Registers a new SASL mechanism.
org.jivesoftware.smack.SASLAuthentication.unregisterSASLMechanism	(	String	): Unregister a SASLMechanism by it's full class name. For example "org.jivesoftware.smack.sasl.javax.SASLCramMD5Mechanism".
org.jivesoftware.smack.SmackConfiguration: Represents the configuration of Smack. The configuration is used for:   Initializing classes by loading them at start-up.  Getting the current Smack version.  Getting and setting global library behavior, such as the period of time to wait for replies to packets from the server. Note: setting these values via the API will override settings in the configuration file.  Configuration settings are stored in org.jivesoftware.smack/smack-config.xml.
org.jivesoftware.smack.SmackConfiguration.addDisabledSmackClass	(	Class	): Convenience method for addDisabledSmackClass().
org.jivesoftware.smack.SmackConfiguration.addDisabledSmackClass	(	String	): Add a class to the disabled smack classes.  className can also be a package name, in this case, the entire package is disabled (but can be manually enabled). 
org.jivesoftware.smack.SmackConfiguration.addDisabledSmackClasses	(	String	): Add the given class names to the list of disabled Smack classes.
org.jivesoftware.smack.SmackConfiguration.addSaslMech	(	String	): Add a SASL mechanism to the list to be used.
org.jivesoftware.smack.SmackConfiguration.addSaslMechs	(	Collection	): Add a Collection of SASL mechanisms to the list to be used.
org.jivesoftware.smack.SmackConfiguration.createDebugger	(	XMPPConnection	Writer	Reader	): Creates new debugger instance with given arguments as parameters. May return null if no DebuggerFactory is set or if the factory did not produce a debugger.
org.jivesoftware.smack.SmackConfiguration.getDebuggerFactory	(	): Get the debugger factory.
org.jivesoftware.smack.SmackConfiguration.getDefaultHostnameVerifier	(	): Get the default HostnameVerifier
org.jivesoftware.smack.SmackConfiguration.getDefaultPacketReplyTimeout	(	): Returns the number of milliseconds to wait for a response from the server. The default value is 5000 ms.
org.jivesoftware.smack.SmackConfiguration.getDefaultParsingExceptionCallback	(	): Returns the default parsing exception callback.
org.jivesoftware.smack.SmackConfiguration.getDefaultReplyTimeout	(	): Returns the number of milliseconds to wait for a response from the server. The default value is 5000 ms.
org.jivesoftware.smack.SmackConfiguration.getSaslMechs	(	): Returns the list of SASL mechanisms to be used. If a SASL mechanism is listed here it does not guarantee it will be used. The server may not support it, or it may not be implemented.
org.jivesoftware.smack.SmackConfiguration.getStanzaCollectorSize	(	): Gets the default max size of a stanza(/packet) collector before it will delete the older packets.
org.jivesoftware.smack.SmackConfiguration.getVersion	(	): Returns the Smack version information, eg "1.3.0".
org.jivesoftware.smack.SmackConfiguration.isSmackInitialized	(	): Check if Smack was successfully initialized.
org.jivesoftware.smack.SmackConfiguration.removeSaslMech	(	String	): Remove a SASL mechanism from the list to be used.
org.jivesoftware.smack.SmackConfiguration.removeSaslMechs	(	Collection	): Remove a Collection of SASL mechanisms to the list to be used.
org.jivesoftware.smack.SmackConfiguration.setDebuggerFactory	(	SmackDebuggerFactory	): Sets Smack debugger factory.
org.jivesoftware.smack.SmackConfiguration.setDefaultHostnameVerifier	(	HostnameVerifier	): Set the default HostnameVerifier that will be used by XMPP connections to verify the hostname of a TLS certificate. XMPP connections are able to overwrite this settings by supplying a HostnameVerifier in their ConnecitonConfiguration with setHostnameVerifier().
org.jivesoftware.smack.SmackConfiguration.setDefaultPacketReplyTimeout	(	int	): Sets the number of milliseconds to wait for a response from the server.
org.jivesoftware.smack.SmackConfiguration.setDefaultParsingExceptionCallback	(	ParsingExceptionCallback	): Set the default parsing exception callback for all newly created connections.
org.jivesoftware.smack.SmackConfiguration.setDefaultReplyTimeout	(	int	): Sets the number of milliseconds to wait for a response from the server.
org.jivesoftware.smack.SmackConfiguration.setStanzaCollectorSize	(	int	): Sets the default max size of a stanza(/packet) collector before it will delete the older packets.
org.jivesoftware.smack.SmackException: Smack uses SmackExceptions for errors that are not defined by any XMPP specification.
org.jivesoftware.smack.SmackException.ConnectionException: ConnectionException is thrown if Smack is unable to connect to all hosts of a given XMPP service. The failed hosts can be retrieved with getFailedAddresses(), which will have the exception causing the connection failure set and retrievable with getExceptions().
org.jivesoftware.smack.SmackException.FeatureNotSupportedException.getFeature	(	): Get the feature which is not supported.
org.jivesoftware.smack.SmackException.FeatureNotSupportedException.getJid	(	): Get JID which does not support the feature. The JID can be null in cases when there are multiple JIDs queried for this feature.
org.jivesoftware.smack.SmackException.NoResponseException: Exception thrown always when there was no response to an request within the stanza(/packet) reply timeout of the used connection instance. You can modify (e.g. increase) the stanza(/packet) reply timeout with setReplyTimeout().
org.jivesoftware.smack.SmackException.NoResponseException.getFilter	(	): Get the filter that was used to collect the response.
org.jivesoftware.smack.SmackException.SmackException	(	Throwable	): Creates a new SmackException with the Throwable that was the root cause of the exception.
org.jivesoftware.smack.SmackFuture.InternalSmackFuture.processStanza	(	Stanza	): Wrapper method for handleStanza(). Note that this method is synchronized.
org.jivesoftware.smack.SmackFuture.SimpleInternalSmackFuture: A simple version of InternalSmackFuture which implements isNonFatalException() as always returning false method.
org.jivesoftware.smack.SmackFuture.isNonFatalException	(	Exception	): This method checks if the given exception is not fatal. If this method returns false, then the future will automatically set the given exception as failure reason and notify potential waiting threads.
org.jivesoftware.smack.StanzaCollector: Provides a mechanism to collect Stanzas into a result queue that pass a specified filter/matcher. The collector lets you perform blocking and polling operations on the result queue. So, a StanzaCollector is more suitable to use than a StanzaListener when you need to wait for a specific result. Each stanza(/packet) collector will queue up a configured number of packets for processing before older packets are automatically dropped. The default number is retrieved by getStanzaCollectorSize().
org.jivesoftware.smack.StanzaCollector.Configuration.setCollectorToReset	(	StanzaCollector	): Set the collector which timeout for the next result is reset once this collector collects a packet.
org.jivesoftware.smack.StanzaCollector.Configuration.setPacketFilter	(	StanzaFilter	): Set the stanza(/packet) filter used by this collector. If null, then all packets will get collected by this collector.
org.jivesoftware.smack.StanzaCollector.Configuration.setSize	(	int	): Set the maximum size of this collector, i.e. how many stanzas this collector will collect before dropping old ones.
org.jivesoftware.smack.StanzaCollector.Configuration.setStanzaFilter	(	StanzaFilter	): Set the stanza filter used by this collector. If null, then all stanzas will get collected by this collector.
org.jivesoftware.smack.StanzaCollector.StanzaCollector	(	XMPPConnection	Configuration	): Creates a new stanza(/packet) collector. If the stanza(/packet) filter is null, then all packets will match this collector.
org.jivesoftware.smack.StanzaCollector.cancel	(	): Explicitly cancels the stanza(/packet) collector so that no more results are queued up. Once a stanza(/packet) collector has been cancelled, it cannot be re-enabled. Instead, a new stanza(/packet) collector must be created.
org.jivesoftware.smack.StanzaCollector.getCollectedCount	(	): Get the number of collected stanzas this stanza(/packet) collector has collected so far.
org.jivesoftware.smack.StanzaCollector.getPacketFilter	(	): Returns the stanza(/packet) filter associated with this stanza(/packet) collector. The packet filter is used to determine what packets are queued as results.
org.jivesoftware.smack.StanzaCollector.getStanzaFilter	(	): Returns the stanza filter associated with this stanza collector. The stanza filter is used to determine what stanzas are queued as results.
org.jivesoftware.smack.StanzaCollector.newConfiguration	(	): Get a new stanza(/packet) collector configuration instance.
org.jivesoftware.smack.StanzaCollector.nextResult	(	): Returns the next available packet. The method call will block until the connection's default timeout has elapsed.
org.jivesoftware.smack.StanzaCollector.nextResult	(	long	): Returns the next available packet. The method call will block (not return) until a stanza(/packet) is available or the timeout has elapsed. If the timeout elapses without a result, null will be returned.
org.jivesoftware.smack.StanzaCollector.nextResultBlockForever	(	): Returns the next available packet. The method call will block (not return) until a stanza(/packet) is available.
org.jivesoftware.smack.StanzaCollector.nextResultOrThrow	(	): Returns the next available stanza. The method in equivalent to nextResultOrThrow() where the timeout argument is the default reply timeout of the connection associated with this collector.
org.jivesoftware.smack.StanzaCollector.nextResultOrThrow	(	long	): Returns the next available stanza. The method call will block until a stanza is available or the timeout has elapsed. This method does also cancel the collector in every case.  Three things can happen when waiting for an response:   A result response arrives. An error response arrives. An timeout occurs. The thread is interrupted   in which this method will   return with the result. throw an XMPPErrorException. throw an NoResponseException. throw an InterruptedException.   Additionally the method will throw a NotConnectedException if no response was received and the connection got disconnected. 
org.jivesoftware.smack.StanzaCollector.pollResult	(	): Polls to see if a stanza(/packet) is currently available and returns it, or immediately returns null if no packets are currently in the result queue.
org.jivesoftware.smack.StanzaCollector.pollResultOrThrow	(	): Polls to see if a stanza(/packet) is currently available and returns it, or immediately returns null if no packets are currently in the result queue.  Throws an XMPPErrorException in case the polled stanzas did contain an XMPPError. 
org.jivesoftware.smack.StanzaCollector.processStanza	(	Stanza	): Processes a stanza(/packet) to see if it meets the criteria for this stanza(/packet) collector. If so, the stanza(/packet) is added to the result queue.
org.jivesoftware.smack.StanzaCollectorTest.verifyThreadSafety	(	): Although this doesn't guarentee anything due to the nature of threading, it can potentially catch problems.
org.jivesoftware.smack.StanzaListener: Provides a mechanism to listen for packets that pass a specified filter. This allows event-style programming -- every time a new stanza(/packet) is found, the processStanza() method will be called. This is the opposite approach to the functionality provided by a StanzaCollector which lets you block while waiting for results.  Additionally you are able to intercept Packets that are going to be send and make modifications to them. You can register a PacketListener as interceptor by using addPacketInterceptor() 
org.jivesoftware.smack.StanzaListener.processStanza	(	Stanza	): Process the next stanza(/packet) sent to this stanza(/packet) listener.  A single thread is responsible for invoking all listeners, so it's very important that implementations of this method not block for any extended period of time. 
org.jivesoftware.smack.SynchronizationPoint.SynchronizationPoint	(	AbstractXMPPConnection	String	): Construct a new synchronization point for the given connection.
org.jivesoftware.smack.SynchronizationPoint.checkForResponse	(	): Check for a response and throw a NoResponseException if there was none.  The exception is thrown, if state is one of 'Initial', 'NoResponse' or 'RequestSent' 
org.jivesoftware.smack.SynchronizationPoint.checkIfSuccessOrWait	(	): Check if this synchronization point is successful or wait the connections reply timeout.
org.jivesoftware.smack.SynchronizationPoint.checkIfSuccessOrWaitOrThrow	(	): Check if this synchronization point is successful or wait the connections reply timeout.
org.jivesoftware.smack.SynchronizationPoint.init	(	): Initialize (or reset) this synchronization point.
org.jivesoftware.smack.SynchronizationPoint.reportFailure	(	): Deprecated.
org.jivesoftware.smack.SynchronizationPoint.reportFailure	(	E	): Report this synchronization point as failed because of the given exception. The failureException must be set.
org.jivesoftware.smack.SynchronizationPoint.reportSuccess	(	): Report this synchronization point as successful.
org.jivesoftware.smack.SynchronizationPoint.requestSent	(	): Check if this synchronization point has its request already sent.
org.jivesoftware.smack.SynchronizationPoint.sendAndWaitForResponse	(	TopLevelStreamElement	): Send the given top level stream element and wait for a response.
org.jivesoftware.smack.SynchronizationPoint.sendAndWaitForResponseOrThrow	(	Nonza	): Send the given plain stream element and wait for a response.
org.jivesoftware.smack.SynchronizationPoint.waitForConditionOrTimeout	(	): Wait for the condition to become something else as RequestSent or Initial. reportSuccess(), reportFailure() and reportFailure() will either set this synchronization point to Success or Failure. If none of them is set after the connections reply timeout, this method will set the state of NoResponse.
org.jivesoftware.smack.SynchronizationPoint.wasSuccessful	(	): Check if this synchronization point was successful.
org.jivesoftware.smack.ThreadedDummyConnection: A threaded dummy connection.
org.jivesoftware.smack.ThreadedDummyConnection.setTimeout	(	): Calling this method will cause the next sendStanza call with an IQ stanza(/packet) to timeout. This is accomplished by simply stopping the auto creating of the reply stanza(/packet) or processing one that was entered via processStanza().
org.jivesoftware.smack.UnparseableStanza: Representation of an unparsable stanza.
org.jivesoftware.smack.UnparseableStanza.getContent	(	): Retrieve the raw stanza data.
org.jivesoftware.smack.UnparseableStanza.getParsingException	(	): Get the exception that caused the parser to fail.
org.jivesoftware.smack.XMPPConnection: The XMPPConnection interface provides an interface for connections to an XMPP server and implements shared methods which are used by the different types of connections (e.g. XMPPTCPConnection or XMPPBOSHConnection). To create a connection to an XMPP server a simple usage of this API might look like the following:   // Create a connection to the igniterealtime.org XMPP server. XMPPTCPConnection con = new XMPPTCPConnection("igniterealtime.org"); // Connect to the server con.connect(); // Most servers require you to login before performing other tasks. con.login("jsmith", "mypass"); // Start a new conversation with John Doe and send him a message. Chat chat = ChatManager.getInstanceFor(con).createChat("jdoe@igniterealtime.org", new MessageListener() { public void processMessage(Chat chat, Message message) { // Print out any messages we get back to standard out. System.out.println("Received message: " + message); } }); chat.sendMessage("Howdy!"); // Disconnect from the server con.disconnect();    Note that the XMPPConnection interface does intentionally not declare any methods that manipulate the connection state, e.g. connect(), disconnect(). You should use the most specific connection type, e.g. XMPPTCPConnection as declared type and use the XMPPConnection interface when you don't need to manipulate the connection state.   XMPPConnections can be reused between connections. This means that an Connection may be connected, disconnected and then connected again. Listeners of the XMPPConnection will be retained across connections. 
org.jivesoftware.smack.XMPPConnection.addAsyncStanzaListener	(	StanzaListener	StanzaFilter	): Registers an asynchronous stanza(/packet) listener with this connection. A stanza(/packet) listener will be invoked only when an incoming stanza(/packet) is received. A stanza(/packet) filter determines which packets will be delivered to the listener. If the same stanza(/packet) listener is added again with a different filter, only the new filter will be used.  Unlike addAsyncStanzaListener() stanza(/packet) listeners added with this method will be invoked asynchronously in their own thread. Use this method if the order of the stanza(/packet) listeners must not depend on the order how the stanzas where received. 
org.jivesoftware.smack.XMPPConnection.addConnectionListener	(	ConnectionListener	): Adds a connection listener to this connection that will be notified when the connection closes or fails.
org.jivesoftware.smack.XMPPConnection.addOneTimeSyncCallback	(	StanzaListener	StanzaFilter	): Add a callback that is called exactly once and synchronously with the incoming stanza that matches the given stanza(/packet) filter.
org.jivesoftware.smack.XMPPConnection.addPacketInterceptor	(	StanzaListener	StanzaFilter	): Registers a stanza(/packet) interceptor with this connection. The interceptor will be invoked every time a stanza(/packet) is about to be sent by this connection. Interceptors may modify the stanza(/packet) to be sent. A stanza(/packet) filter determines which packets will be delivered to the interceptor.  NOTE: For a similar functionality on incoming packets, see addAsyncStanzaListener().
org.jivesoftware.smack.XMPPConnection.addPacketListener	(	StanzaListener	StanzaFilter	): Registers a stanza(/packet) listener with this connection.  This method has been deprecated. It is important to differentiate between using an asynchronous stanza(/packet) listener (preferred where possible) and a synchronous stanza(/packet) lister. Refer addAsyncStanzaListener() and addSyncStanzaListener() for more information. 
org.jivesoftware.smack.XMPPConnection.addPacketSendingListener	(	StanzaListener	StanzaFilter	): Registers a stanza(/packet) listener with this connection. The listener will be notified of every stanza(/packet) that this connection sends. A stanza(/packet) filter determines which packets will be delivered to the listener. Note that the thread that writes packets will be used to invoke the listeners. Therefore, each stanza(/packet) listener should complete all operations quickly or use a different thread for processing.
org.jivesoftware.smack.XMPPConnection.addSyncStanzaListener	(	StanzaListener	StanzaFilter	): Registers a synchronous stanza(/packet) listener with this connection. A stanza(/packet) listener will be invoked only when an incoming stanza(/packet) is received. A stanza(/packet) filter determines which packets will be delivered to the listener. If the same stanza(/packet) listener is added again with a different filter, only the new filter will be used.  Important: This stanza(/packet) listeners will be called in the same single thread that processes all incoming stanzas. Only use this kind of stanza(/packet) filter if it does not perform any XMPP activity that waits for a response. Consider using addAsyncStanzaListener() when possible, i.e. when the invocation order doesn't have to be the same as the order of the arriving packets. If the order of the arriving packets, consider using a StanzaCollector when possible. 
org.jivesoftware.smack.XMPPConnection.createStanzaCollector	(	StanzaCollector.Configuration	): Create a new stanza(/packet) collector with the given stanza(/packet) collector configuration.  Please make sure to cancel the collector when it is no longer required. See also createStanzaCollector(). 
org.jivesoftware.smack.XMPPConnection.createStanzaCollector	(	StanzaFilter	): Creates a new stanza(/packet) collector for this connection. A stanza(/packet) filter determines which packets will be accumulated by the collector. A StanzaCollector is more suitable to use than a StanzaListener when you need to wait for a specific result.  Note: If you send a Stanza(/Packet) right after using this method, then consider using createStanzaCollectorAndSend() instead. Otherwise make sure cancel the StanzaCollector in every case, e.g. even if an exception is thrown, or otherwise you may leak the StanzaCollector. 
org.jivesoftware.smack.XMPPConnection.createStanzaCollectorAndSend	(	IQ	): Creates a new stanza(/packet) collector collecting packets that are replies to packet. Does also send packet. The stanza(/packet) filter for the collector is an IQReplyFilter, guaranteeing that stanza(/packet) id and JID in the 'from' address have expected values.
org.jivesoftware.smack.XMPPConnection.createStanzaCollectorAndSend	(	StanzaFilter	Stanza	): Creates a new stanza(/packet) collector for this connection. A stanza(/packet) filter determines which packets will be accumulated by the collector. A StanzaCollector is more suitable to use than a StanzaListener when you need to wait for a specific result.
org.jivesoftware.smack.XMPPConnection.getConnectionCounter	(	): Get the connection counter of this XMPPConnection instance. Those can be used as ID to identify the connection, but beware that the ID may not be unique if you create more then 2*Integer.MAX_VALUE instances as the counter could wrap.
org.jivesoftware.smack.XMPPConnection.getFeature	(	String	String	): Get the feature stanza(/packet) extensions for a given stream feature of the server, or null if the server doesn't support that feature.
org.jivesoftware.smack.XMPPConnection.getFromMode	(	): Get the currently active FromMode.
org.jivesoftware.smack.XMPPConnection.getHost	(	): Returns the host name of the server where the XMPP server is running. This would be the IP address of the server or a name that may be resolved by a DNS server.
org.jivesoftware.smack.XMPPConnection.getLastStanzaReceived	(	): Returns the timestamp in milliseconds when the last stanza was received.
org.jivesoftware.smack.XMPPConnection.getPacketReplyTimeout	(	): Returns the current value of the reply timeout in milliseconds for request for this XMPPConnection instance.
org.jivesoftware.smack.XMPPConnection.getPort	(	): Returns the port number of the XMPP server for this connection. The default port for normal connections is 5222.
org.jivesoftware.smack.XMPPConnection.getReplyTimeout	(	): Returns the current value of the reply timeout in milliseconds for request for this XMPPConnection instance.
org.jivesoftware.smack.XMPPConnection.getServiceName	(	): Returns the name of the service provided by the XMPP server for this connection. This is also called XMPP domain of the connected server. After authenticating with the server the returned value may be different.
org.jivesoftware.smack.XMPPConnection.getStreamId	(	): Returns the stream ID for this connection, which is the value set by the server when opening an XMPP stream. This value will be null if not connected to the server.
org.jivesoftware.smack.XMPPConnection.getUser	(	): Returns the full XMPP address of the user that is logged in to the connection or null if not logged in yet. An XMPP address is in the form username@server/resource.
org.jivesoftware.smack.XMPPConnection.getXMPPServiceDomain	(	): Returns the XMPP Domain of the service provided by the XMPP server and used for this connection. After authenticating with the server the returned value may be different.
org.jivesoftware.smack.XMPPConnection.hasFeature	(	String	String	): Return true if the server supports the given stream feature.
org.jivesoftware.smack.XMPPConnection.isAnonymous	(	): Returns true if currently authenticated anonymously.
org.jivesoftware.smack.XMPPConnection.isAuthenticated	(	): Returns true if currently authenticated by successfully calling the login method.
org.jivesoftware.smack.XMPPConnection.isConnected	(	): Returns true if currently connected to the XMPP server.
org.jivesoftware.smack.XMPPConnection.isSecureConnection	(	): Returns true if the connection to the server has successfully negotiated encryption. 
org.jivesoftware.smack.XMPPConnection.isUsingCompression	(	): Returns true if network traffic is being compressed. When using stream compression network traffic can be reduced up to 90%. Therefore, stream compression is ideal when using a slow speed network connection. However, the server will need to use more CPU time in order to un/compress network data so under high load the server performance might be affected.
org.jivesoftware.smack.XMPPConnection.registerIQRequestHandler	(	IQRequestHandler	): Register an IQ request handler with this connection.  IQ request handler process incoming IQ requests, i.e. incoming IQ stanzas of type 'get' or 'set', and return a result. 
org.jivesoftware.smack.XMPPConnection.removeAsyncStanzaListener	(	StanzaListener	): Removes an asynchronous stanza(/packet) listener for received packets from this connection.
org.jivesoftware.smack.XMPPConnection.removeConnectionListener	(	ConnectionListener	): Removes a connection listener from this connection.
org.jivesoftware.smack.XMPPConnection.removePacketInterceptor	(	StanzaListener	): Removes a stanza(/packet) interceptor.
org.jivesoftware.smack.XMPPConnection.removePacketListener	(	StanzaListener	): Removes a stanza(/packet) listener for received packets from this connection.
org.jivesoftware.smack.XMPPConnection.removePacketSendingListener	(	StanzaListener	): Removes a stanza(/packet) listener for sending packets from this connection.
org.jivesoftware.smack.XMPPConnection.removeStanzaCollector	(	StanzaCollector	): Remove a stanza(/packet) collector of this connection.
org.jivesoftware.smack.XMPPConnection.removeSyncStanzaListener	(	StanzaListener	): Removes a stanza(/packet) listener for received packets from this connection.
org.jivesoftware.smack.XMPPConnection.sendIqWithResponseCallback	(	IQ	StanzaListener	): Send a IQ stanza and invoke callback if there is a result of result with that result IQ. The callback will not be invoked after the connections default reply timeout has been elapsed.
org.jivesoftware.smack.XMPPConnection.sendIqWithResponseCallback	(	IQ	StanzaListener	ExceptionCallback	): Send a IQ stanza and invoke callback if there is a result of result with that result IQ. If there is an error response exceptionCallback will be invoked, if not null, with the received error as XMPPException.XMPPErrorException. If there is no response after the connections default reply timeout, then exceptionCallback will be invoked with a SmackException.NoResponseException.
org.jivesoftware.smack.XMPPConnection.sendIqWithResponseCallback	(	IQ	StanzaListener	ExceptionCallback	long	): Send a IQ stanza and invoke callback if there is a result of result with that result IQ. If there is an error response exceptionCallback will be invoked, if not null, with the received error as XMPPException.XMPPErrorException. If there is no response after timeout, then exceptionCallback will be invoked with a SmackException.NoResponseException.
org.jivesoftware.smack.XMPPConnection.sendNonza	(	Nonza	): Send a Nonza.  This method is not meant for end-user usage! It allows sending plain stream elements, which should not be done by a user manually. Doing so may result in a unstable or unusable connection. Certain Smack APIs use this method to send plain stream elements. 
org.jivesoftware.smack.XMPPConnection.sendPacket	(	Stanza	): Sends the specified stanza(/packet) to the server.
org.jivesoftware.smack.XMPPConnection.sendStanza	(	Stanza	): Sends the specified stanza to the server.
org.jivesoftware.smack.XMPPConnection.sendStanzaWithResponseCallback	(	Stanza	StanzaFilter	StanzaListener	): Send a stanza and wait asynchronously for a response by using replyFilter.  If there is a response, then callback will be invoked. The callback will be invoked at most once and it will be not invoked after the connections default reply timeout has been elapsed. 
org.jivesoftware.smack.XMPPConnection.sendStanzaWithResponseCallback	(	Stanza	StanzaFilter	StanzaListener	ExceptionCallback	): Send a stanza and wait asynchronously for a response by using replyFilter.  If there is a response, then callback will be invoked. If there is no response after the connections default reply timeout, then exceptionCallback will be invoked with a SmackException.NoResponseException. The callback will be invoked at most once. 
org.jivesoftware.smack.XMPPConnection.sendStanzaWithResponseCallback	(	Stanza	StanzaFilter	StanzaListener	ExceptionCallback	long	): Send a stanza and wait asynchronously for a response by using replyFilter.  If there is a response, then callback will be invoked. If there is no response after timeout milliseconds, then exceptionCallback will be invoked with a SmackException.NoResponseException. The callback will be invoked at most once. 
org.jivesoftware.smack.XMPPConnection.setFromMode	(	FromMode	): Set the FromMode for this connection instance. Defines how the 'from' attribute of outgoing stanzas should be populated by Smack.
org.jivesoftware.smack.XMPPConnection.setPacketReplyTimeout	(	long	): Set the stanza(/packet) reply timeout in milliseconds. In most cases, Smack will throw a NoResponseException if no reply to a request was received within the timeout period.
org.jivesoftware.smack.XMPPConnection.setReplyTimeout	(	long	): Set the stanza(/packet) reply timeout in milliseconds. In most cases, Smack will throw a NoResponseException if no reply to a request was received within the timeout period.
org.jivesoftware.smack.XMPPConnection.unregisterIQRequestHandler	(	IQRequestHandler	): Convenience method for unregisterIQRequestHandler().
org.jivesoftware.smack.XMPPConnection.unregisterIQRequestHandler	(	String	String	IQ.Type	): Unregister an IQ request handler with this connection.
org.jivesoftware.smack.XMPPConnectionRegistry.addConnectionCreationListener	(	ConnectionCreationListener	): Adds a new listener that will be notified when new Connections are created. Note that newly created connections will not be actually connected to the server.
org.jivesoftware.smack.XMPPConnectionRegistry.getConnectionCreationListeners	(	): Get the collection of listeners that are interested in connection creation events.
org.jivesoftware.smack.XMPPConnectionRegistry.removeConnectionCreationListener	(	ConnectionCreationListener	): Removes a listener that was interested in connection creation events.
org.jivesoftware.smack.XMPPException: A generic exception that is thrown when an error occurs performing an XMPP operation. XMPP servers can respond to error conditions with an error code and textual description of the problem, which are encapsulated in the XMPPError class. When appropriate, an XMPPError instance is attached instances of this exception. When a stream error occurred, the server will send a stream error to the client before closing the connection. Stream errors are unrecoverable errors. When a stream error is sent to the client an XMPPException will be thrown containing the StreamError sent by the server.
org.jivesoftware.smack.XMPPException.StreamErrorException.StreamErrorException	(	StreamError	): Creates a new XMPPException with the stream error that was the root case of the exception. When a stream error is received from the server then the underlying connection will be closed by the server.
org.jivesoftware.smack.XMPPException.StreamErrorException.getStreamError	(	): Returns the StreamError associated with this exception. The underlying TCP connection is closed by the server after sending the stream error to the client.
org.jivesoftware.smack.XMPPException.XMPPErrorException.XMPPErrorException	(	Stanza	XMPPError	): Creates a new XMPPErrorException with the XMPPError that was the root case of the exception.
org.jivesoftware.smack.XMPPException.XMPPErrorException.XMPPErrorException	(	XMPPError.Builder	): Creates a new XMPPErrorException with the given builder.
org.jivesoftware.smack.XMPPException.XMPPErrorException.getXMPPError	(	): Returns the XMPPError associated with this exception, or null if there isn't one.
org.jivesoftware.smack.XMPPException.XMPPException	(	): Creates a new XMPPException.
org.jivesoftware.smack.XMPPException.XMPPException	(	String	): Creates a new XMPPException with a description of the exception.
org.jivesoftware.smack.XMPPException.XMPPException	(	String	Throwable	): Creates a new XMPPException with a description of the exception and the Throwable that was the root cause of the exception.
org.jivesoftware.smack.bosh.BOSHConfiguration: Configuration to use while establishing the connection to the XMPP server via HTTP binding.
org.jivesoftware.smack.bosh.XMPPBOSHConnection: Creates a connection to an XMPP server via HTTP binding. This is specified in the XEP-0206: XMPP Over BOSH.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.BOSHConnectionListener: A listener class which listen for a successfully established connection and connection errors and notifies the BOSHConnection.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.BOSHConnectionListener.connectionEvent	(	BOSHClientConnEvent	): Notify the BOSHConnection about connection state changes. Process the connection listeners and try to login if the connection was formerly authenticated and is now reconnected.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.BOSHPacketReader: Listens for XML traffic from the BOSH connection manager and parses it into stanza(/packet) objects.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.BOSHPacketReader.responseReceived	(	BOSHMessageEvent	): Parse the received packets and notify the corresponding connection.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.XMPPBOSHConnection	(	BOSHConfiguration	): Create a HTTP Binding connection to an XMPP server.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.XMPPBOSHConnection	(	String	String	boolean	String	int	String	DomainBareJid	): Create a HTTP Binding connection to an XMPP server.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.initDebugger	(	): Initialize the SmackDebugger which allows to log and debug XML traffic.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.notifyConnectionError	(	Exception	): Sends out a notification that there was an error with the connection and closes the connection.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.send	(	ComposableBody	): Send a HTTP request to the connection manager with the provided body element.
org.jivesoftware.smack.bosh.XMPPBOSHConnection.shutdown	(	): Closes the connection by setting presence to unavailable and closing the HTTP client. The shutdown logic will be used during a planned disconnection or when dealing with an unexpected disconnection. Unlike disconnect() the connection's BOSH stanza(/packet) reader will not be removed; thus connection's state is kept.
org.jivesoftware.smack.chat.Chat: A chat is a series of messages sent between two users. Each chat has a unique thread ID, which is used to track which messages are part of a particular conversation. Some messages are sent without a thread ID, and some clients don't send thread IDs at all. Therefore, if a message without a thread ID arrives it is routed to the most recently created Chat with the message sender.
org.jivesoftware.smack.chat.Chat.Chat	(	ChatManager	EntityJid	String	): Creates a new chat with the specified user and thread ID.
org.jivesoftware.smack.chat.Chat.addMessageListener	(	ChatMessageListener	): Adds a stanza(/packet) listener that will be notified of any new messages in the chat.
org.jivesoftware.smack.chat.Chat.close	(	): Closes the Chat and removes all references to it from the ChatManager. The chat will be unusable when this method returns, so it's recommend to drop all references to the instance right after calling close().
org.jivesoftware.smack.chat.Chat.createCollector	(	): Creates a org.jivesoftware.smack.StanzaCollector which will accumulate the Messages for this chat. Always cancel StanzaCollectors when finished with them as they will accumulate messages indefinitely.
org.jivesoftware.smack.chat.Chat.deliver	(	Message	): Delivers a message directly to this chat, which will add the message to the collector and deliver it to all listeners registered with the Chat. This is used by the XMPPConnection class to deliver messages without a thread ID.
org.jivesoftware.smack.chat.Chat.getListeners	(	): Returns an unmodifiable set of all of the listeners registered with this chat.
org.jivesoftware.smack.chat.Chat.getParticipant	(	): Returns the name of the user the chat is with.
org.jivesoftware.smack.chat.Chat.getThreadID	(	): Returns the thread id associated with this chat, which corresponds to the thread field of XMPP messages. This method may return null if there is no thread ID is associated with this Chat.
org.jivesoftware.smack.chat.Chat.sendMessage	(	Message	): Sends a message to the other chat participant. The thread ID, recipient, and message type of the message will automatically set to those of this chat.
org.jivesoftware.smack.chat.Chat.sendMessage	(	String	): Sends the specified text as a message to the other chat participant. This is a convenience method for:  Message message = chat.createMessage(); message.setBody(messageText); chat.sendMessage(message); 
org.jivesoftware.smack.chat.ChatConnectionTest.chatFoundWhenNoThreadBaseJid	(	): Confirm that an existing chat created with a base jid is matched to an incoming chat message that has no thread id and the user is a base jid.
org.jivesoftware.smack.chat.ChatConnectionTest.chatFoundWhenNoThreadEntityFullJid	(	): Confirm that an existing chat created with a base jid is matched to an incoming chat message that has no thread id and the user is a full jid.
org.jivesoftware.smack.chat.ChatConnectionTest.chatFoundWithSameThreadBaseJid	(	): Confirm that an existing chat created with a base jid is matched to an incoming chat message that has the same id and the user is a base jid.
org.jivesoftware.smack.chat.ChatConnectionTest.chatFoundWithSameThreadEntityFullJid	(	): Confirm that an existing chat created with a base jid is matched to an incoming chat message that has the same id and the user is a full jid.
org.jivesoftware.smack.chat.ChatConnectionTest.chatNotFoundWithDiffThreadBaseJid	(	): Confirm that an existing chat created with a base jid is not matched to an incoming chat message that has a different id and the same user as a base jid.
org.jivesoftware.smack.chat.ChatConnectionTest.chatNotFoundWithDiffThreadEntityFullJid	(	): Confirm that an existing chat created with a base jid is not matched to an incoming chat message that has a different id and the same base jid.
org.jivesoftware.smack.chat.ChatManager: The chat manager keeps track of references to all current chats. It will not hold any references in memory on its own so it is necessary to keep a reference to the chat object itself. To be made aware of new chats, register a listener by calling addChatListener().
org.jivesoftware.smack.chat.ChatManager.addChatListener	(	ChatManagerListener	): Register a new listener with the ChatManager to recieve events related to chats.
org.jivesoftware.smack.chat.ChatManager.addOutgoingMessageInterceptor	(	MessageListener	): Adds an interceptor which intercepts any messages sent through chats.
org.jivesoftware.smack.chat.ChatManager.createChat	(	EntityJid	): Creates a new chat and returns it.
org.jivesoftware.smack.chat.ChatManager.createChat	(	EntityJid	ChatMessageListener	): Creates a new chat and returns it.
org.jivesoftware.smack.chat.ChatManager.createChat	(	EntityJid	String	ChatMessageListener	): Creates a new chat using the specified thread ID, then returns it.
org.jivesoftware.smack.chat.ChatManager.createChat	(	Message	): Creates a new Chat based on the message. May returns null if no chat could be created, e.g. because the message comes without from.
org.jivesoftware.smack.chat.ChatManager.getChatListeners	(	): Returns an unmodifiable set of all chat listeners currently registered with this manager.
org.jivesoftware.smack.chat.ChatManager.getInstanceFor	(	XMPPConnection	): Returns the ChatManager instance associated with a given XMPPConnection.
org.jivesoftware.smack.chat.ChatManager.getMatchMode	(	): Gets the current mode for matching messages with NO thread id to existing chats.
org.jivesoftware.smack.chat.ChatManager.getUserChat	(	Jid	): Try to get a matching chat for the given user JID, based on the MatchMode. NONE - return null SUPPLIED_JID - match the jid in the from field of the message exactly. BARE_JID - if not match for from field, try the bare jid. 
org.jivesoftware.smack.chat.ChatManager.isNormalIncluded	(	): Determines whether incoming messages of type normal will be used for creating new chats or matching a message to existing ones.
org.jivesoftware.smack.chat.ChatManager.nextID	(	): Returns a unique id.
org.jivesoftware.smack.chat.ChatManager.removeChatListener	(	ChatManagerListener	): Removes a listener, it will no longer be notified of new events related to chats.
org.jivesoftware.smack.chat.ChatManager.setMatchMode	(	MatchMode	): Sets the mode for matching messages with NO thread id to existing chats.
org.jivesoftware.smack.chat.ChatManager.setNormalIncluded	(	boolean	): Sets whether to allow incoming messages of type normal to be used for creating new chats or matching a message to an existing one.
org.jivesoftware.smack.chat.ChatManagerListener: A listener for chat related events.
org.jivesoftware.smack.chat.ChatManagerListener.chatCreated	(	Chat	boolean	): Event fired when a new chat is created.
org.jivesoftware.smack.chat2.ChatManager: A chat manager for 1:1 XMPP instant messaging chats.  This manager and the according Chat API implement "Resource Locking" (XEP-0296). Support for Carbon Copies (XEP-0280) will be added once the XEP has progressed from experimental. 
org.jivesoftware.smack.chat2.ChatManager.addIncomingListener	(	IncomingChatMessageListener	): Add a new listener for incoming chat messages.
org.jivesoftware.smack.chat2.ChatManager.addListener	(	IncomingChatMessageListener	): Add a new listener for incoming chat messages.
org.jivesoftware.smack.chat2.ChatManager.addListener	(	OutgoingChatMessageListener	): Add a new listener for incoming chat messages.
org.jivesoftware.smack.chat2.ChatManager.addOutgoingListener	(	OutgoingChatMessageListener	): Add a new listener for outgoing chat messages.
org.jivesoftware.smack.chat2.ChatManager.chatWith	(	EntityBareJid	): Start a new or retrieve the existing chat with jid.
org.jivesoftware.smack.chat2.ChatManager.removeListener	(	IncomingChatMessageListener	): Remove an incoming chat message listener.
org.jivesoftware.smack.chat2.ChatManager.removeListener	(	OutgoingChatMessageListener	): Remove an outgoing chat message listener.
org.jivesoftware.smack.chat2.ChatManager.removeOutoingLIstener	(	OutgoingChatMessageListener	): Remove an outgoing chat message listener.
org.jivesoftware.smack.chat2.ChatManager.setXhmtlImEnabled	(	boolean	): Also notify about messages containing XHTML-IM.
org.jivesoftware.smack.compression.Java7ZlibInputOutputStream: This class provides XMPP "zlib" compression with the help of the Deflater class of the Java API. Note that the method needed for compression with synchronous flush support is available since Java7, so it will only work with Java7 or higher (hence it's name). On Android, the required deflate() method is available on API 19 or higher.  See also:  The required deflate() method (Java7) The required deflate() method (Android) 
org.jivesoftware.smack.compression.XMPPInputOutputStream.setFlushMethod	(	FlushMethod	): Set the used flushed method when compressing data. The default is full flush which may not achieve the best compression ratio, but provides better security against certain attacks. Only use sync flush if you fully understand the implications.
org.jivesoftware.smack.compression.jzlib.JzlibInputOutputStream: This class provides XMPP "zlib" compression with the help of JZLib.
org.jivesoftware.smack.debugger.ConsoleDebugger: Very simple debugger that prints to the console (stdout) the sent and received stanzas. Use this debugger with caution since printing to the console is an expensive operation that may even block the thread since only one thread may print at a time.  It is possible to not only print the raw sent and received stanzas but also the interpreted packets by Smack. By default interpreted packets won't be printed. To enable this feature just change the printInterpreted static variable to true.
org.jivesoftware.smack.debugger.JulDebugger: Very simple debugger that prints to the console (stdout) the sent and received stanzas. Use this debugger with caution since printing to the console is an expensive operation that may even block the thread since only one thread may print at a time.  It is possible to not only print the raw sent and received stanzas but also the interpreted packets by Smack. By default interpreted packets won't be printed. To enable this feature just change the printInterpreted static variable to true.
org.jivesoftware.smack.debugger.ReflectionDebuggerFactory.getDebuggerClass	(	): Returns debugger class used by this factory.
org.jivesoftware.smack.debugger.ReflectionDebuggerFactory.setDebuggerClass	(	Class	): Sets custom debugger class to be created by this factory.
org.jivesoftware.smack.debugger.SmackDebugger: Interface that allows for implementing classes to debug XML traffic. That is a GUI window that displays XML traffic. Every implementation of this interface must have a public constructor with the following arguments: XMPPConnection, Writer, Reader.
org.jivesoftware.smack.debugger.SmackDebugger.getReader	(	): Returns the special Reader that wraps the main Reader and logs data to the GUI.
org.jivesoftware.smack.debugger.SmackDebugger.getReaderListener	(	): Returns the thread that will listen for all incoming packets and write them to the GUI. This is what we call "interpreted" stanza(/packet) data, since it's the stanza(/packet) data as Smack sees it and not as it's coming in as raw XML.
org.jivesoftware.smack.debugger.SmackDebugger.getWriter	(	): Returns the special Writer that wraps the main Writer and logs data to the GUI.
org.jivesoftware.smack.debugger.SmackDebugger.getWriterListener	(	): Returns the thread that will listen for all outgoing packets and write them to the GUI. 
org.jivesoftware.smack.debugger.SmackDebugger.newConnectionReader	(	Reader	): Returns a new special Reader that wraps the new connection Reader. The connection has been secured so the connection is using a new reader and writer. The debugger needs to wrap the new reader and writer to keep being notified of the connection traffic.
org.jivesoftware.smack.debugger.SmackDebugger.newConnectionWriter	(	Writer	): Returns a new special Writer that wraps the new connection Writer. The connection has been secured so the connection is using a new reader and writer. The debugger needs to wrap the new reader and writer to keep being notified of the connection traffic.
org.jivesoftware.smack.debugger.SmackDebugger.userHasLogged	(	EntityFullJid	): Called when a user has logged in to the server. The user could be an anonymous user, this means that the user would be of the form host/resource instead of the form user@host/resource.
org.jivesoftware.smack.debugger.SmackDebuggerFactory.create	(	XMPPConnection	Writer	Reader	): Initialize the new SmackDebugger instance.
org.jivesoftware.smack.experimental.ExperimentalInitializer: Initializes the providers in the experimental code stream.
org.jivesoftware.smack.extensions.ExtensionsInitializer: Initializes the providers in the experimental code stream.
org.jivesoftware.smack.filter.AbstractFromToMatchesFilter.AbstractFromToMatchesFilter	(	Jid	boolean	): Creates a filter matching on the address returned by getAddressToCompare(). The address must be the same as the filter address. The second parameter specifies whether the full or the bare addresses are compared.
org.jivesoftware.smack.filter.AbstractListFilter.AbstractListFilter	(	): Creates an empty filter.
org.jivesoftware.smack.filter.AbstractListFilter.AbstractListFilter	(	StanzaFilter	): Creates an filter using the specified filters.
org.jivesoftware.smack.filter.AbstractListFilter.addFilter	(	StanzaFilter	): Adds a filter to the filter list. A stanza will pass the filter if all of the filters in the list accept it.
org.jivesoftware.smack.filter.AndFilter: Implements the logical AND operation over two or more stanza(/packet) filters. In other words, packets pass this filter if they pass all of the filters.
org.jivesoftware.smack.filter.AndFilter.AndFilter	(	): Creates an empty AND filter. Filters should be added using the addFilter() method.
org.jivesoftware.smack.filter.AndFilter.AndFilter	(	StanzaFilter	): Creates an AND filter using the specified filters.
org.jivesoftware.smack.filter.AndFilterTest: A test case for the AndFilter class.
org.jivesoftware.smack.filter.FlexibleStanzaTypeFilter: Filters for stanzas of a particular type and allows a custom method to further filter the packets.
org.jivesoftware.smack.filter.FromContainsFilterTest: A test case for the FromContainsFilter class.
org.jivesoftware.smack.filter.FromContainsFilterTest.MockFromPacket: Wraps the MockPacket class to always give an expected From field.
org.jivesoftware.smack.filter.FromMatchesFilter: Filter for packets where the "from" field exactly matches a specified JID. If the specified address is a bare JID then the filter will match any address whose bare JID matches the specified JID. But if the specified address is a full JID then the filter will only match if the sender of the stanza(/packet) matches the specified resource.
org.jivesoftware.smack.filter.FromMatchesFilter.FromMatchesFilter	(	Jid	boolean	): Creates a filter matching on the "from" field. The from address must be the same as the filter address. The second parameter specifies whether the full or the bare addresses are compared.
org.jivesoftware.smack.filter.FromMatchesFilter.create	(	Jid	): Creates a filter matching on the "from" field. If the filter address is bare, compares the filter address with the bare from address. Otherwise, compares the filter address with the full from address.
org.jivesoftware.smack.filter.FromMatchesFilter.createBare	(	Jid	): Creates a filter matching on the "from" field. Compares the bare version of from and filter address.
org.jivesoftware.smack.filter.FromMatchesFilter.createFull	(	Jid	): Creates a filter matching on the "from" field. Compares the full version, if available, of from and filter address.
org.jivesoftware.smack.filter.FromMatchesFilterTest: From matches filter test.
org.jivesoftware.smack.filter.IQReplyFilter: Filters for packets which are a valid reply to an IQ request.  Such a stanza(/packet) must have the same stanza(/packet) id and must be an IQ stanza(/packet) of type RESULT or ERROR. Moreover, it is necessary to check the from address to ignore forged replies.  We accept a from address if one of the following is true:  It matches the to address of the request. The to address of the request was empty and the from address matches either the bare jid of the server or the (bare or full jid) of the client. To to was our bare address and the from is empty.   For a discussion of the issues, see the thread "Spoofing of iq ids and misbehaving servers" from 2014-01 on the jdev@jabber.org mailing list and following discussion in February and March.
org.jivesoftware.smack.filter.IQReplyFilter.IQReplyFilter	(	IQ	XMPPConnection	): Filters for packets which are a valid reply to an IQ request.  Such a stanza(/packet) must have the same stanza(/packet) id and must be an IQ stanza(/packet) of type RESULT or ERROR. Moreover, it is necessary to check the from address to ignore forged replies.  We accept a from address if one of the following is true:  It matches the to address of the request. The to address of the request was empty and the from address matches either the bare jid of the server or the (bare or full jid) of the client. To to was our bare address and the from is empty.   For a discussion of the issues, see the thread "Spoofing of iq ids and misbehaving servers" from 2014-01 on the jdev@jabber.org mailing list and following discussion in February and March.
org.jivesoftware.smack.filter.IQTypeFilter: A filter for IQ stanza(/packet) types. Returns true only if the stanza(/packet) is an IQ packet and it matches the type provided in the constructor.
org.jivesoftware.smack.filter.MessageTypeFilter: Filters for packets of a specific type of Message (e.g. CHAT).
org.jivesoftware.smack.filter.MessageTypeFilter.MessageTypeFilter	(	Message.Type	): Creates a new message type filter using the specified message type.
org.jivesoftware.smack.filter.MessageWithBodiesFilter: Filters message stanzas which have at least one body.
org.jivesoftware.smack.filter.MessageWithSubjectFilter: Filters message stanzas which have at least one body.
org.jivesoftware.smack.filter.MessageWithThreadFilter: Filters message stanzas which have at least one body.
org.jivesoftware.smack.filter.NotFilter: Implements the logical NOT operation on a stanza(/packet) filter. In other words, packets pass this filter if they do not pass the supplied filter.
org.jivesoftware.smack.filter.NotFilter.NotFilter	(	StanzaFilter	): Creates a NOT filter using the specified filter.
org.jivesoftware.smack.filter.NotFilterTest: A test case for the NotFilter class.
org.jivesoftware.smack.filter.OrFilter: Implements the logical OR operation over two or more stanza(/packet) filters. In other words, packets pass this filter if they pass any of the filters.
org.jivesoftware.smack.filter.OrFilter.OrFilter	(	): Creates an empty OR filter. Filters should be added using the addFilter() method.
org.jivesoftware.smack.filter.OrFilter.OrFilter	(	StanzaFilter	): Creates an OR filter using the specified filters.
org.jivesoftware.smack.filter.OrFilterTest: A test case for the OrFilter class.
org.jivesoftware.smack.filter.PacketExtensionFilter: Filters for packets with a particular type of stanza(/packet) extension.
org.jivesoftware.smack.filter.PacketExtensionFilter.PacketExtensionFilter	(	ExtensionElement	): Creates a new stanza(/packet) extension filter for the given stanza(/packet) extension.
org.jivesoftware.smack.filter.PacketExtensionFilter.PacketExtensionFilter	(	String	): Creates a new stanza(/packet) extension filter. Packets will pass the filter if they have a packet extension that matches the specified namespace.
org.jivesoftware.smack.filter.PacketExtensionFilter.PacketExtensionFilter	(	String	String	): Creates a new stanza(/packet) extension filter. Packets will pass the filter if they have a stanza(/packet) extension that matches the specified element name and namespace.
org.jivesoftware.smack.filter.PacketFilter: Defines a way to filter packets for particular attributes. Stanza(/Packet) filters are used when constructing stanza(/packet) listeners or collectors -- the filter defines what packets match the criteria of the collector or listener for further stanza(/packet) processing.  Several simple filters are pre-defined. These filters can be logically combined for more complex stanza(/packet) filtering by using the org.jivesoftware.smack.filter.AndFilter AndFilter and org.jivesoftware.smack.filter.OrFilter OrFilter filters. It's also possible to define your own filters by implementing this interface. The code example below creates a trivial filter for packets with a specific ID (real code should use StanzaIdFilter instead).  // Use an anonymous inner class to define a stanza(/packet) filter that returns // all packets that have a stanza(/packet) ID of "RS145". PacketFilter myFilter = new PacketFilter() { public boolean accept(Packet packet) { return "RS145".equals(packet.getStanzaId()); } }; // Create a new stanza(/packet) collector using the filter we created. StanzaCollector myCollector = packetReader.createStanzaCollector(myFilter); 
org.jivesoftware.smack.filter.PacketIDFilter: Filters for packets with a particular stanza(/packet) ID.
org.jivesoftware.smack.filter.PacketIDFilter.PacketIDFilter	(	Stanza	): Creates a new stanza(/packet) ID filter using the specified packet's ID.
org.jivesoftware.smack.filter.PacketIDFilter.PacketIDFilter	(	String	): Creates a new stanza(/packet) ID filter using the specified stanza(/packet) ID.
org.jivesoftware.smack.filter.PacketIDFilterTest: A test case for the PacketIDFilter class.
org.jivesoftware.smack.filter.PacketIDFilterTest.MockIDPacket: Wraps the MockPacket class to always give an expected stanza(/packet) ID field.
org.jivesoftware.smack.filter.PacketTypeFilter: Filters for packets of a particular type. The type is given as a Class object, so example types would:  Message.class IQ.class Presence.class 
org.jivesoftware.smack.filter.PacketTypeFilter.PacketTypeFilter	(	Class	): Creates a new stanza(/packet) type filter that will filter for packets that are the same type as packetType.
org.jivesoftware.smack.filter.PresenceTypeFilter: A filter for Presence types. Returns true only if the stanza is an Presence stanza(/packet) and it matches the type provided in the constructor.
org.jivesoftware.smack.filter.StanzaExtensionFilter: Filters for stanzas with a particular type of stanza extension.
org.jivesoftware.smack.filter.StanzaExtensionFilter.StanzaExtensionFilter	(	ExtensionElement	): Creates a new stanza extension filter for the given stanza extension.
org.jivesoftware.smack.filter.StanzaExtensionFilter.StanzaExtensionFilter	(	String	): Creates a new stanza extension filter. Stanzas will pass the filter if they have a stanza extension that matches the specified namespace.
org.jivesoftware.smack.filter.StanzaExtensionFilter.StanzaExtensionFilter	(	String	String	): Creates a new stanza extension filter. Stanzas will pass the filter if they have a stanza extension that matches the specified element name and namespace.
org.jivesoftware.smack.filter.StanzaFilter: Defines a way to filter stanzas for particular attributes. Stanza filters are used when constructing stanza listeners or collectors -- the filter defines what stanzas match the criteria of the collector or listener for further stanza processing.  Several simple filters are pre-defined. These filters can be logically combined for more complex stanza filtering by using the org.jivesoftware.smack.filter.AndFilter AndFilter and org.jivesoftware.smack.filter.OrFilter OrFilter filters. It's also possible to define your own filters by implementing this interface. The code example below creates a trivial filter for stanzas with a specific ID (real code should use StanzaIdFilter instead).  // Use an anonymous inner class to define a stanza filter that returns // all stanzas that have a stanza ID of "RS145". StanzaFilter myFilter = new StanzaFilter() { public boolean accept(Stanza stanza) { return "RS145".equals(stanza.getStanzaId()); } }; // Create a new stanza collector using the filter we created. StanzaCollector myCollector = connection.createStanzaCollector(myFilter); 
org.jivesoftware.smack.filter.StanzaFilter.accept	(	Stanza	): Tests whether or not the specified stanza should pass the filter.
org.jivesoftware.smack.filter.StanzaIdFilter: Filters for Stanzas with a particular stanza ID.
org.jivesoftware.smack.filter.StanzaIdFilter.StanzaIdFilter	(	Stanza	): Creates a new stanza ID filter using the specified stanza's ID.
org.jivesoftware.smack.filter.StanzaIdFilter.StanzaIdFilter	(	String	): Creates a new stanza ID filter using the specified stanza ID.
org.jivesoftware.smack.filter.StanzaTypeFilter: Filters for Stanzas of a particular type. The type is given as a Class object, so example types would:  Message.class IQ.class Presence.class 
org.jivesoftware.smack.filter.StanzaTypeFilter.StanzaTypeFilter	(	Class	): Creates a new stanza(/packet) type filter that will filter for packets that are the same type as packetType.
org.jivesoftware.smack.filter.StanzaTypeFilterTest: Test cases for the StanzaTypeFilter class.
org.jivesoftware.smack.filter.StanzaTypeFilterTest.testAccept	(	): Test case to test the accept() method of StanzaTypeFilter objects.
org.jivesoftware.smack.filter.StanzaTypeFilterTest.testConstructor	(	): Test case for the constructor of StanzaTypeFilter objects.
org.jivesoftware.smack.filter.ThreadFilter: Filters for message packets with a particular thread value.
org.jivesoftware.smack.filter.ThreadFilter.ThreadFilter	(	String	): Creates a new thread filter using the specified thread value.
org.jivesoftware.smack.filter.ToContainsFilterTest: A test case for the ToContainsFilter class.
org.jivesoftware.smack.filter.ToContainsFilterTest.MockToPacket: Wraps the MockPacket class to always give an expected To field.
org.jivesoftware.smack.filter.ToFilter: Match based on the 'to' attribute of a Stanza.
org.jivesoftware.smack.filter.ToMatchesFilter.create	(	Jid	): Creates a filter matching on the "to" field. If the filter address is bare, compares the filter address with the bare from address. Otherwise, compares the filter address with the full from address.
org.jivesoftware.smack.filter.ToMatchesFilter.createBare	(	Jid	): Creates a filter matching on the "to" field. Compares the bare version of to and filter address.
org.jivesoftware.smack.filter.ToMatchesFilter.createFull	(	Jid	): Creates a filter matching on the "to" field. Compares the full version, if available, of to and filter address.
org.jivesoftware.smack.filter.jidtype.AbstractJidTypeFilter: Base class for XMPP address type filters.
org.jivesoftware.smack.filter.jidtype.FromJidTypeFilter: Filter based on the 'from' XMPP address type.
org.jivesoftware.smack.initializer.SmackInitializer: Defines an initialization class that will be instantiated and invoked by the SmackConfiguration class during initialization.  Any implementation of this class MUST have a default constructor.
org.jivesoftware.smack.initializer.UrlInitializer: Loads the provider file defined by the URL returned by getProvidersUrl() and the generic smack configuration file returned getConfigUrl().
org.jivesoftware.smack.initializer.VmArgInitializer: Looks for a provider file location based on the VM argument smack.provider.file. If it is supplied, its value will be used as a file location for a providers file and loaded into the ProviderManager on Smack initialization.
org.jivesoftware.smack.iqrequest.AbstractIqRequestHandler: Convenience class to create IQ requests handlers.
org.jivesoftware.smack.iqrequest.IQRequestHandler: IQ request handler are responsible for handling incoming IQ requests. They can be registered with registerIQRequestHandler().
org.jivesoftware.smack.java7.XmppHostnameVerifier: HostnameVerifier implementation for XMPP. Verifies a given name, the 'hostname' argument, which should be the XMPP domain of the used XMPP service. The verifier compares the name with the servers TLS certificate's Subject Alternative Name (SAN) DNS name ('dNSName'), and, if there are no SANs, which the Common Name (CN).  Based on the work by Kevin Locke (released under CC0 1.0 Universal / Public Domain Dedication). 
org.jivesoftware.smack.java7.XmppHostnameVerifier.matchDns	(	String	X509Certificate	): Try to match a certificate with a DNS name. This method returns if the certificate matches or throws a CertificateException if not.
org.jivesoftware.smack.java7.XmppHostnameVerifier.matchIp	(	String	X509Certificate	): Check if the certificate allows use of the given IP address.  From RFC2818 § 3.1: "In some cases, the URI is specified as an IP address rather than a hostname. In this case, the iPAddress subjectAltName must be present in the certificate and must exactly match the IP in the URI." 
org.jivesoftware.smack.java7.XmppHostnameVerifier.matchWildCards	(	String	String	): Returns true if the name matches against the template that may contain the wildcard char '*'.
org.jivesoftware.smack.omemo.DeviceListTest: Test behavior of device lists.
org.jivesoftware.smack.omemo.DeviceListTest.mergeDeviceListsTest	(	): Test, whether deviceList updates are correctly merged into the cached device list. IDs in the update become active devices, active IDs that were not in the update become inactive. Inactive IDs that were not in the update stay inactive.
org.jivesoftware.smack.omemo.OmemoBundleVAxolotlElementTest: Test serialization and parsing of the OmemoBundleVAxolotlElement.
org.jivesoftware.smack.omemo.OmemoConfigurationTest: Test the OmemoConfiguration class.
org.jivesoftware.smack.omemo.OmemoDeviceListVAxolotlElementTest: Test serialization and parsing of DeviceListElement.
org.jivesoftware.smack.omemo.OmemoDeviceTest: Test the OmemoDevice class.
org.jivesoftware.smack.omemo.OmemoDeviceTest.testEquals	(	): Test, if the equals() method works as intended.
org.jivesoftware.smack.omemo.OmemoExceptionsTest: Test Omemo related Exceptions.
org.jivesoftware.smack.omemo.OmemoFingerprintTest: Test the OmemoFingerprint class.
org.jivesoftware.smack.omemo.OmemoKeyUtilTest: Test KeyUtil functions.
org.jivesoftware.smack.omemo.OmemoManagerTest: Test OmemoManager functionality.
org.jivesoftware.smack.omemo.OmemoMessageBuilderTest: Test the OmemoMessageBuilder.
org.jivesoftware.smack.omemo.OmemoVAxolotlElementTest: Test serialization and parsing of OmemoVAxolotlElements.
org.jivesoftware.smack.omemo.SignalFileBasedOmemoStoreTest: Test the file-based signalOmemoStore.
org.jivesoftware.smack.omemo.SignalOmemoKeyUtilTest: Test SignalOmemoKeyUtil methods.
org.jivesoftware.smack.omemo.SignalOmemoStoreConnectorTest: Test some functionality of the SignalOmemoStoreConnector.
org.jivesoftware.smack.omemo.WrapperObjectsTest: Test the identityKeyWrapper.
org.jivesoftware.smack.packet.AbstractError.getDescriptiveText	(	): Get the descriptive text of this SASLFailure.  Returns the descriptive text of this SASLFailure in the system default language if possible. May return null. 
org.jivesoftware.smack.packet.AbstractError.getDescriptiveText	(	String	): Get the descriptive test of this SASLFailure.  Returns the descriptive text of this SASLFailure in the given language. May return null if not available. 
org.jivesoftware.smack.packet.AbstractError.getExtension	(	String	String	): Returns the first stanza(/packet) extension that matches the specified element name and namespace, or null if it doesn't exist. 
org.jivesoftware.smack.packet.Bind: IQ stanza(/packet) used by Smack to bind a resource and to obtain the jid assigned by the server. There are two ways to bind a resource. One is simply sending an empty Bind stanza(/packet) where the server will assign a new resource for this connection. The other option is to set a desired resource but the server may return a modified version of the sent resource. For more information refer to the following link. 
org.jivesoftware.smack.packet.DefaultExtensionElement: Default implementation of the ExtensionElement interface. Unless a ExtensionElementProvider is registered with org.jivesoftware.smack.provider.ProviderManager ProviderManager, instances of this class will be returned when getting stanza(/packet) extensions. This class provides a very simple representation of an XML sub-document. Each element is a key in a Map with its CDATA being the value. For example, given the following XML sub-document:  <foo xmlns="http://bar.com"> <color>blue</color> <food>pizza</food> </foo> In this case, getValue("color") would return "blue", and getValue("food") would return "pizza". This parsing mechanism is very simplistic and will not work as desired in all cases (for example, if some of the elements have attributes. In those cases, a custom ExtensionElementProvider should be used.
org.jivesoftware.smack.packet.DefaultExtensionElement.DefaultExtensionElement	(	String	String	): Creates a new generic stanza(/packet) extension.
org.jivesoftware.smack.packet.DefaultExtensionElement.getElementName	(	): Returns the XML element name of the extension sub-packet root element.
org.jivesoftware.smack.packet.DefaultExtensionElement.getNames	(	): Returns an unmodifiable collection of the names that can be used to get values of the stanza(/packet) extension.
org.jivesoftware.smack.packet.DefaultExtensionElement.getNamespace	(	): Returns the XML namespace of the extension sub-packet root element.
org.jivesoftware.smack.packet.DefaultExtensionElement.getValue	(	String	): Returns a stanza(/packet) extension value given a name.
org.jivesoftware.smack.packet.DefaultExtensionElement.setValue	(	String	String	): Sets a stanza(/packet) extension value using the given name.
org.jivesoftware.smack.packet.Element: Interface to represent a XML element. This is similar to ExtensionElement, but does not carry a namespace and is usually included as child element of an stanza(/packet) extension.
org.jivesoftware.smack.packet.Element.toXML	(	): Returns the XML representation of this Element.
org.jivesoftware.smack.packet.ErrorIQ.ErrorIQ	(	XMPPError.Builder	): Constructs a new error IQ.  According to RFC 6120 § 8.3.1 "4. An error stanza MUST contain an  child element.", so the xmppError argument is mandatory. 
org.jivesoftware.smack.packet.ExtensionElement: Interface to represent extension elements.  An extension element is an XML subdocument with a root element name and namespace. Extension elements are used to provide extended functionality beyond what is in the base XMPP specification. Examples of extensions elements include message events, message properties, and extra presence data. IQ stanzas have limited support for extension elements.  This class is used primarily for extended content in XMPP Stanzas, to act as so called "extension elements". For more information see RFC 6120 § 8.4 Extended Content. 
org.jivesoftware.smack.packet.ExtensionElement.getNamespace	(	): Returns the root element XML namespace.
org.jivesoftware.smack.packet.IQ: The base IQ (Info/Query) packet. IQ packets are used to get and set information on the server, including authentication, roster operations, and creating accounts. Each IQ stanza(/packet) has a specific type that indicates what type of action is being taken: "get", "set", "result", or "error". IQ packets can contain a single child element that exists in a specific XML namespace. The combination of the element name and namespace determines what type of IQ stanza(/packet) it is. Some example IQ subpacket snippets: <query xmlns="jabber:iq:auth"> -- an authentication IQ. <query xmlns="jabber:iq:private"> -- a private storage IQ. <pubsub xmlns="http://jabber.org/protocol/pubsub"> -- a pubsub IQ. 
org.jivesoftware.smack.packet.IQ.createErrorResponse	(	IQ	XMPPError	): Convenience method to create a new error IQ.Type.error IQ based on a get IQ.Type.get or set IQ.Type.set IQ. The new stanza(/packet) will be initialized with: The sender set to the recipient of the originating IQ. The recipient set to the sender of the originating IQ. The type set to error IQ.Type.error. The id set to the id of the originating IQ. The child element contained in the associated originating IQ. The provided XMPPError XMPPError. 
org.jivesoftware.smack.packet.IQ.createErrorResponse	(	IQ	XMPPError.Builder	): Convenience method to create a new error IQ.Type.error IQ based on a get IQ.Type.get or set IQ.Type.set IQ. The new stanza(/packet) will be initialized with: The sender set to the recipient of the originating IQ. The recipient set to the sender of the originating IQ. The type set to error IQ.Type.error. The id set to the id of the originating IQ. The child element contained in the associated originating IQ. The provided XMPPError XMPPError. 
org.jivesoftware.smack.packet.IQ.createResultIQ	(	IQ	): Convenience method to create a new empty result IQ.Type.result IQ based on a get IQ.Type.get or set IQ.Type.set IQ. The new stanza(/packet) will be initialized with: The sender set to the recipient of the originating IQ. The recipient set to the sender of the originating IQ. The type set to result IQ.Type.result. The id set to the id of the originating IQ. No child element of the IQ element. 
org.jivesoftware.smack.packet.IQ.getChildElementXML	(	): Returns the sub-element XML section of the IQ packet, or the empty String if there isn't one.
org.jivesoftware.smack.packet.IQ.getIQChildElementBuilder	(	IQChildElementXmlStringBuilder	): This method must be overwritten by IQ subclasses to create their child content. It is important you don't use the builder to add the final end tag. This will be done automatically by IQChildElementXmlStringBuilder after eventual existing ExtensionElements have been added.  For example to create an IQ with a extra attribute and an additional child element     elementText    the body of the getIQChildElementBuilder looks like  // The builder 'xml' will already have the child element and the 'xmlns' attribute added // So the current builder state is " If your IQ only contains attributes and no child elements, i.e. it can be represented as empty element, then you can mark it as such.  xml.attribute("myAttribute", "myAttributeValue"); xml.setEmptyElement();  If your IQ does not contain any attributes or child elements (besides ExtensionElements), consider sub-classing SimpleIQ instead.
org.jivesoftware.smack.packet.IQ.getType	(	): Returns the type of the IQ packet.
org.jivesoftware.smack.packet.IQ.isRequestIQ	(	): Return true if this IQ is a request IQ, i.e. an IQ of type get or set.
org.jivesoftware.smack.packet.IQ.setType	(	Type	): Sets the type of the IQ packet.  Since the type of an IQ must present, an IllegalArgmentException will be thrown when type is null. 
org.jivesoftware.smack.packet.IQResponseTest: Tests that verifies the correct behavior of creating result and error IQ packets.
org.jivesoftware.smack.packet.IQResponseTest.testGeneratingErrorBasedOnError	(	): According to RFC3920: IQ Semantics we shouldn't respond to an IQ of type error.
org.jivesoftware.smack.packet.IQResponseTest.testGeneratingResponseBasedOnResult	(	): According to RFC3920: IQ Semantics we shouldn't respond to an IQ of type result.
org.jivesoftware.smack.packet.IQResponseTest.testGeneratingSimpleResponse	(	): Test creating a simple and empty IQ response.
org.jivesoftware.smack.packet.IQResponseTest.testGeneratingValidErrorResponse	(	): Test creating a error response based on an IQ request.
org.jivesoftware.smack.packet.Message: Represents XMPP message packets. A message can be one of several types:  Message.Type.NORMAL -- (Default) a normal text message used in email like interface. Message.Type.CHAT -- a typically short text message used in line-by-line chat interfaces. Message.Type.GROUP_CHAT -- a chat message sent to a groupchat server for group chats. Message.Type.HEADLINE -- a text message to be displayed in scrolling marquee displays. Message.Type.ERROR -- indicates a messaging error.  For each message type, different message fields are typically used as follows:   Message Types  Message type FieldNormalChatGroup ChatHeadlineXMPPError subject SHOULDSHOULD NOTSHOULD NOTSHOULD NOTSHOULD NOT thread OPTIONALSHOULDOPTIONALOPTIONALSHOULD NOT body SHOULDSHOULDSHOULDSHOULDSHOULD NOT error MUST NOTMUST NOTMUST NOTMUST NOTMUST 
org.jivesoftware.smack.packet.Message.Body: Represents a message body, its language and the content of the message.
org.jivesoftware.smack.packet.Message.Body.getLanguage	(	): Returns the language of this message body.
org.jivesoftware.smack.packet.Message.Body.getMessage	(	): Returns the message content.
org.jivesoftware.smack.packet.Message.Message	(	): Creates a new, "normal" message.
org.jivesoftware.smack.packet.Message.Message	(	Jid	): Creates a new "normal" message to the specified recipient.
org.jivesoftware.smack.packet.Message.Message	(	Jid	ExtensionElement	): Creates a new message with the specified recipient and extension element.
org.jivesoftware.smack.packet.Message.Message	(	Jid	String	): Creates a new message to the specified recipient and with the specified body.
org.jivesoftware.smack.packet.Message.Message	(	Jid	Type	): Creates a new message of the specified type to a recipient.
org.jivesoftware.smack.packet.Message.Message	(	Message	): Copy constructor.  This does not perform a deep clone, as extension elements are shared between the new and old instance. 
org.jivesoftware.smack.packet.Message.Message	(	String	String	): Creates a new message to the specified recipient and with the specified body.
org.jivesoftware.smack.packet.Message.Subject: Represents a message subject, its language and the content of the subject.
org.jivesoftware.smack.packet.Message.Subject.getLanguage	(	): Returns the language of this message subject.
org.jivesoftware.smack.packet.Message.Subject.getSubject	(	): Returns the subject content.
org.jivesoftware.smack.packet.Message.addBody	(	String	String	): Adds a body with a corresponding language.
org.jivesoftware.smack.packet.Message.addSubject	(	String	String	): Adds a subject with a corresponding language.
org.jivesoftware.smack.packet.Message.clone	(	): Creates and returns a copy of this message stanza.  This does not perform a deep clone, as extension elements are shared between the new and old instance. 
org.jivesoftware.smack.packet.Message.getBodies	(	): Returns a set of all bodies in this Message, including the default message body accessible from getBody().
org.jivesoftware.smack.packet.Message.getBody	(	): Returns the default body of the message, or null if the body has not been set. The body is the main message contents.  The default body of a message is the body that corresponds to the message's language. (see getLanguage()) or if no language is set to the applications default language (see getDefaultLanguage()).
org.jivesoftware.smack.packet.Message.getBody	(	String	): Returns the body corresponding to the language. If the language is null, the method result will be the same as getBody(). Null will be returned if the language does not have a corresponding body.
org.jivesoftware.smack.packet.Message.getBodyLanguages	(	): Returns all the languages being used for the bodies, not including the default body.
org.jivesoftware.smack.packet.Message.getSubject	(	): Returns the default subject of the message, or null if the subject has not been set. The subject is a short description of message contents.  The default subject of a message is the subject that corresponds to the message's language. (see getLanguage()) or if no language is set to the applications default language (see getDefaultLanguage()).
org.jivesoftware.smack.packet.Message.getSubject	(	String	): Returns the subject corresponding to the language. If the language is null, the method result will be the same as getSubject(). Null will be returned if the language does not have a corresponding subject.
org.jivesoftware.smack.packet.Message.getSubjectLanguages	(	): Returns all the languages being used for the subjects, not including the default subject.
org.jivesoftware.smack.packet.Message.getSubjects	(	): Returns a set of all subjects in this Message, including the default message subject accessible from getSubject().
org.jivesoftware.smack.packet.Message.getThread	(	): Returns the thread id of the message, which is a unique identifier for a sequence of "chat" messages. If no thread id is set, null will be returned.
org.jivesoftware.smack.packet.Message.getType	(	): Returns the type of the message. If no type has been set this method will return normal.
org.jivesoftware.smack.packet.Message.removeBody	(	Body	): Removes the body from the message and returns true if the body was removed.
org.jivesoftware.smack.packet.Message.removeBody	(	String	): Removes the body with the given language from the message.
org.jivesoftware.smack.packet.Message.removeSubject	(	String	): Removes the subject with the given language from the message.
org.jivesoftware.smack.packet.Message.removeSubject	(	Subject	): Removes the subject from the message and returns true if the subject was removed.
org.jivesoftware.smack.packet.Message.setBody	(	CharSequence	): Sets the body of the message.
org.jivesoftware.smack.packet.Message.setBody	(	String	): Sets the body of the message. The body is the main message contents.
org.jivesoftware.smack.packet.Message.setSubject	(	String	): Sets the subject of the message. The subject is a short description of message contents.
org.jivesoftware.smack.packet.Message.setThread	(	String	): Sets the thread id of the message, which is a unique identifier for a sequence of "chat" messages.
org.jivesoftware.smack.packet.Message.setType	(	Type	): Sets the type of the message.
org.jivesoftware.smack.packet.MockPacket: A mock implementation of the Stanza(/Packet) abstract class. Implements toXML() by returning null.
org.jivesoftware.smack.packet.MockPacket.toXML	(	): Returns null always.
org.jivesoftware.smack.packet.MockPacketFilter: A mock implementation of the PacketFilter class. Pass in the value you want the accept(..) method to return.
org.jivesoftware.smack.packet.NamedElement: Interface to represent a XML element. This is similar to ExtensionElement, but does not carry a namespace and is usually included as child element of an stanza(/packet) extension.
org.jivesoftware.smack.packet.NamedElement.getElementName	(	): Returns the root element name.
org.jivesoftware.smack.packet.Nonza: A Nonza, i.e everything that is not a stanza as defined RFC 6120 8. Stanzas are Message, Presence and IQ. Everything else should sublcass this class instead of Stanza.  It is important to cleanly distinguish between stanzas and non-stanzas. For example plain stream elements don't count into the stanza count of XEP-198 Stream Management. 
org.jivesoftware.smack.packet.Packet: Deprecated interface of pre Smack 4.1 Stanzas.
org.jivesoftware.smack.packet.Packet.addExtension	(	ExtensionElement	): Adds a stanza(/packet) extension to the packet. Does nothing if extension is null.
org.jivesoftware.smack.packet.Packet.addExtensions	(	Collection	): Adds a collection of stanza(/packet) extensions to the packet. Does nothing if extensions is null.
org.jivesoftware.smack.packet.Packet.getError	(	): Returns the error associated with this packet, or null if there are no errors.
org.jivesoftware.smack.packet.Packet.getExtension	(	String	): Returns the first extension of this stanza(/packet) that has the given namespace.  When possible, use getExtension() instead. 
org.jivesoftware.smack.packet.Packet.getExtension	(	String	String	): Returns the first stanza(/packet) extension that matches the specified element name and namespace, or null if it doesn't exist. If the provided elementName is null, only the namespace is matched. Stanza(/Packet) extensions are are arbitrary XML sub-documents in standard XMPP packets. By default, a DefaultPacketExtension instance will be returned for each extension. However, PacketExtensionProvider instances can be registered with the org.jivesoftware.smack.provider.ProviderManager ProviderManager class to handle custom parsing. In that case, the type of the Object will be determined by the provider.
org.jivesoftware.smack.packet.Packet.getExtensions	(	): Returns a copy of the stanza(/packet) extensions attached to the packet.
org.jivesoftware.smack.packet.Packet.getExtensions	(	String	String	): Return a set of all extensions with the given element name and namespace.  Changes to the returned set will update the stanza(/packet) extensions, if the returned set is not the empty set. 
org.jivesoftware.smack.packet.Packet.getFrom	(	): Returns who the stanza(/packet) is being sent "from" or null if the value is not set. The XMPP protocol often makes the "from" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Packet.getLanguage	(	): Returns the xml:lang of this Stanza, or null if one has not been set.
org.jivesoftware.smack.packet.Packet.getPacketID	(	): Get the stanza id.
org.jivesoftware.smack.packet.Packet.getStanzaId	(	): Returns the unique ID of the stanza. The returned value could be null.
org.jivesoftware.smack.packet.Packet.getTo	(	): Returns who the stanza(/packet) is being sent "to", or null if the value is not set. The XMPP protocol often makes the "to" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Packet.hasExtension	(	String	): Check if a stanza(/packet) extension with the given namespace exists.
org.jivesoftware.smack.packet.Packet.hasExtension	(	String	String	): Check if a stanza(/packet) extension with the given element and namespace exists.  The argument elementName may be null. 
org.jivesoftware.smack.packet.Packet.removeExtension	(	ExtensionElement	): Removes a stanza(/packet) extension from the packet.
org.jivesoftware.smack.packet.Packet.removeExtension	(	String	String	): Remove the stanza(/packet) extension with the given elementName and namespace.
org.jivesoftware.smack.packet.Packet.setError	(	XMPPError	): Sets the error for this packet.
org.jivesoftware.smack.packet.Packet.setFrom	(	String	): Sets who the stanza(/packet) is being sent "from". The XMPP protocol often makes the "from" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Packet.setLanguage	(	String	): Sets the xml:lang of this Stanza.
org.jivesoftware.smack.packet.Packet.setPacketID	(	String	): Set the stanza ID.
org.jivesoftware.smack.packet.Packet.setStanzaId	(	String	): Sets the unique ID of the packet. To indicate that a stanza(/packet) has no id pass null as the packet's id value.
org.jivesoftware.smack.packet.Packet.setTo	(	String	): Sets who the stanza(/packet) is being sent "to". The XMPP protocol often makes the "to" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.PacketExtension: Interface to represent extension elements.  An extension element is an XML subdocument with a root element name and namespace. Extension elements are used to provide extended functionality beyond what is in the base XMPP specification. Examples of extensions elements include message events, message properties, and extra presence data. IQ stanzas have limited support for extension elements.  This class is used primarily for extended content in XMPP Stanzas, to act as so called "extension elements". For more information see RFC 6120 § 8.4 Extended Content. 
org.jivesoftware.smack.packet.Presence: Represents XMPP presence packets. Every presence stanza(/packet) has a type, which is one of the following values:  available -- (Default) indicates the user is available to receive messages. unavailable -- the user is unavailable to receive messages. subscribe -- request subscription to recipient's presence. subscribed -- grant subscription to sender's presence. unsubscribe -- request removal of subscription to sender's presence. unsubscribed -- grant removal of subscription to sender's presence. error -- the presence stanza(/packet) contains an error message.  A number of attributes are optional:  Status -- free-form text describing a user's presence (i.e., gone to lunch). Priority -- non-negative numerical priority of a sender's resource. The highest resource priority is the default recipient of packets not addressed to a particular resource. Mode -- one of five presence modes: available (the default), chat, away, xa (extended away), and dnd (do not disturb).  Presence packets are used for two purposes. First, to notify the server of the user's current presence status. Second, they are used to subscribe and unsubscribe users from the roster.
org.jivesoftware.smack.packet.Presence.Presence	(	Jid	Type	): Creates a new presence with the given type and using the given XMPP address as recipient.
org.jivesoftware.smack.packet.Presence.Presence	(	Presence	): Copy constructor.  This does not perform a deep clone, as extension elements are shared between the new and old instance. 
org.jivesoftware.smack.packet.Presence.Presence	(	Type	): Creates a new presence update. Status, priority, and mode are left un-set.
org.jivesoftware.smack.packet.Presence.Presence	(	Type	String	int	Mode	): Creates a new presence update with a specified status, priority, and mode.
org.jivesoftware.smack.packet.Presence.clone	(	): Creates and returns a copy of this presence stanza.  This does not perform a deep clone, as extension elements are shared between the new and old instance. 
org.jivesoftware.smack.packet.Presence.cloneWithNewId	(	): Clone this presence and set a newly generated stanza ID as the clone's ID.
org.jivesoftware.smack.packet.Presence.getMode	(	): Returns the mode of the presence update.
org.jivesoftware.smack.packet.Presence.getPriority	(	): Returns the priority of the presence, or Integer.MIN_VALUE if no priority has been set.
org.jivesoftware.smack.packet.Presence.getStatus	(	): Returns the status message of the presence update, or null if there is not a status. The status is free-form text describing a user's presence (i.e., "gone to lunch").
org.jivesoftware.smack.packet.Presence.getType	(	): Returns the type of this presence packet.
org.jivesoftware.smack.packet.Presence.isAvailable	(	): Returns true if the Type presence type is available (online) and false if the user is unavailable (offline), or if this is a presence packet involved in a subscription operation. This is a convenience method equivalent to getType() == Presence.Type.available. Note that even when the user is available, their presence mode may be away, xa extended away or dnd do not disturb. Use isAway() to determine if the user is away.
org.jivesoftware.smack.packet.Presence.isAway	(	): Returns true if the presence type is available and the presence mode is away, xa extended away, or dnd do not disturb. False will be returned when the type or mode is any other value, including when the presence type is unavailable (offline). This is a convenience method equivalent to type == Type.available && (mode == Mode.away || mode == Mode.xa || mode == Mode.dnd).
org.jivesoftware.smack.packet.Presence.setMode	(	Mode	): Sets the mode of the presence update. A null presence mode value is interpreted to be the same thing as available.
org.jivesoftware.smack.packet.Presence.setPriority	(	int	): Sets the priority of the presence. The valid range is -128 through 127.
org.jivesoftware.smack.packet.Presence.setStatus	(	String	): Sets the status message of the presence update. The status is free-form text describing a user's presence (i.e., "gone to lunch").
org.jivesoftware.smack.packet.Presence.setType	(	Type	): Sets the type of the presence packet.
org.jivesoftware.smack.packet.PrivacyProviderTest: Test the PrivacyProvider class with valids privacy xmls
org.jivesoftware.smack.packet.PrivacyProviderTest.PrivacyProviderTest	(	String	): Constructor for PrivacyTest.
org.jivesoftware.smack.packet.PrivacyProviderTest.testDeclineLists	(	): Check the parser with an xml with empty lists. It includes the active, default and special list. To create the xml string based from an xml file, replace:\n with: "\n + "
org.jivesoftware.smack.packet.PrivacyProviderTest.testEmptyLists	(	): Check the parser with an xml with empty lists. It includes the active, default and special list. To create the xml string based from an xml file, replace:\n with: "\n + "
org.jivesoftware.smack.packet.PrivacyProviderTest.testFull	(	): Check the parser with an xml with all kind of stanzas. To create the xml string based from an xml file, replace:\n with: "\n + "
org.jivesoftware.smack.packet.PrivacyTest.PrivacyClient: This class supports automated tests about privacy communication from the server to the client.
org.jivesoftware.smack.packet.PrivacyTest.testCreateActiveList	(	): Check when a client set a new active list.
org.jivesoftware.smack.packet.PrivacyTest.testCreateAndUpdateList	(	): Check when a client set a new list and then update its content.
org.jivesoftware.smack.packet.PrivacyTest.testCreateDefaultList	(	): Check when a client set a new default list.
org.jivesoftware.smack.packet.PrivacyTest.testCreateTwoLists	(	): Check when a client set more than one list.
org.jivesoftware.smack.packet.PrivacyTest.testDenyActiveList	(	): Check when a client denies the use of the active list.
org.jivesoftware.smack.packet.PrivacyTest.testDenyDefaultList	(	): Check when a client denies the use of a default list.
org.jivesoftware.smack.packet.PrivacyTest.testPrivacyItems	(	): Check different types of privacy items.
org.jivesoftware.smack.packet.PrivacyTest.testRemoveList	(	): Check when a client add a new list and then remove it.
org.jivesoftware.smack.packet.Session: IQ stanza(/packet) that will be sent to the server to establish a session. If a server supports sessions, it MUST include a session element in the stream features it advertises to a client after the completion of stream authentication. Upon being informed that session establishment is required by the server the client MUST establish a session if it desires to engage in instant messaging and presence functionality. For more information refer to the following link.
org.jivesoftware.smack.packet.SimpleIQ: A simple IQ.  Simple IQs child elements do not contain further attributes besides 'xmlns'. They may contain additional packet extensions. 
org.jivesoftware.smack.packet.StandardExtensionElement: An ExtensionElement modeling the often required and used XML features when using XMPP. It is therefore suitable for most use cases. Use builder() to build these elements.  Note the this is only meant as catch-all if no particular extension element provider is registered. Protocol implementations should prefer to model their own extension elements tailored to their use cases. 
org.jivesoftware.smack.packet.StandardExtensionElement.StandardExtensionElement	(	String	String	): Constructs a new extension element with the given name and namespace and nothing else.  This is meant to construct extension elements used as simple flags in Stanzas. 
org.jivesoftware.smack.packet.Stanza: Base class for XMPP Stanzas, which are called Stanza(/Packet) in older versions of Smack (i.e. < 4.1).  Every stanza has a unique ID (which is automatically generated, but can be overridden). Stanza IDs are required for IQ stanzas and recommended for presence and message stanzas. Optionally, the "to" and "from" fields can be set.   XMPP Stanzas are Message, IQ and Presence. Which therefore subclass this class. If you think you need to subclass this class, then you are doing something wrong. 
org.jivesoftware.smack.packet.Stanza.addCommonAttributes	(	XmlStringBuilder	): Add to, from, id and 'xml:lang' attributes
org.jivesoftware.smack.packet.Stanza.addExtension	(	ExtensionElement	): Adds a stanza(/packet) extension to the packet. Does nothing if extension is null.
org.jivesoftware.smack.packet.Stanza.addExtensions	(	Collection	): Adds a collection of stanza(/packet) extensions to the packet. Does nothing if extensions is null.
org.jivesoftware.smack.packet.Stanza.appendErrorIfExists	(	XmlStringBuilder	): Append an XMPPError is this stanza(/packet) has one set.
org.jivesoftware.smack.packet.Stanza.getDefaultLanguage	(	): Returns the default language used for all messages containing localized content.
org.jivesoftware.smack.packet.Stanza.getError	(	): Returns the error associated with this packet, or null if there are no errors.
org.jivesoftware.smack.packet.Stanza.getExtension	(	String	): Returns the first extension of this stanza(/packet) that has the given namespace.  When possible, use getExtension() instead. 
org.jivesoftware.smack.packet.Stanza.getExtension	(	String	String	): Returns the first extension that matches the specified element name and namespace, or null if it doesn't exist. If the provided elementName is null, only the namespace is matched. Extensions are are arbitrary XML elements in standard XMPP stanzas.
org.jivesoftware.smack.packet.Stanza.getExtensions	(	): Returns a list of all extension elements of this stanza.
org.jivesoftware.smack.packet.Stanza.getExtensions	(	String	String	): Return a list of all extensions with the given element name and namespace.  Changes to the returned set will update the stanza(/packet) extensions, if the returned set is not the empty set. 
org.jivesoftware.smack.packet.Stanza.getExtensionsXML	(	): Returns the extension sub-packets (including properties data) as an XML String, or the Empty String if there are no stanza(/packet) extensions.
org.jivesoftware.smack.packet.Stanza.getFrom	(	): Returns who the stanza(/packet) is being sent "from" or null if the value is not set. The XMPP protocol often makes the "from" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Stanza.getLanguage	(	): Returns the xml:lang of this Stanza, or null if one has not been set.
org.jivesoftware.smack.packet.Stanza.getPacketID	(	): Get the Stanza ID.
org.jivesoftware.smack.packet.Stanza.getStanzaId	(	): Returns the unique ID of the stanza. The returned value could be null.
org.jivesoftware.smack.packet.Stanza.getTo	(	): Returns who the stanza(/packet) is being sent "to", or null if the value is not set. The XMPP protocol often makes the "to" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Stanza.hasExtension	(	String	): Check if a stanza(/packet) extension with the given namespace exists.
org.jivesoftware.smack.packet.Stanza.hasExtension	(	String	String	): Check if a stanza(/packet) extension with the given element and namespace exists.  The argument elementName may be null. 
org.jivesoftware.smack.packet.Stanza.hasStanzaIdSet	(	): Check if this stanza has an ID set.
org.jivesoftware.smack.packet.Stanza.overrideExtension	(	ExtensionElement	): Add the given extension and override eventually existing extensions with the same name and namespace.
org.jivesoftware.smack.packet.Stanza.removeExtension	(	ExtensionElement	): Removes a stanza(/packet) extension from the packet.
org.jivesoftware.smack.packet.Stanza.removeExtension	(	String	String	): Remove the stanza(/packet) extension with the given elementName and namespace.
org.jivesoftware.smack.packet.Stanza.setError	(	XMPPError	): Sets the error for this packet.
org.jivesoftware.smack.packet.Stanza.setError	(	XMPPError.Builder	): Sets the error for this stanza.
org.jivesoftware.smack.packet.Stanza.setFrom	(	Jid	): Sets who the packet is being sent "from". The XMPP protocol often makes the "from" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Stanza.setFrom	(	String	): Sets who the stanza(/packet) is being sent "from". The XMPP protocol often makes the "from" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Stanza.setLanguage	(	String	): Sets the xml:lang of this Stanza.
org.jivesoftware.smack.packet.Stanza.setPacketID	(	String	): Set the stanza ID.
org.jivesoftware.smack.packet.Stanza.setStanzaId	(	): Set the stanza id if none is set.
org.jivesoftware.smack.packet.Stanza.setStanzaId	(	String	): Sets the unique ID of the packet. To indicate that a stanza(/packet) has no id pass null as the packet's id value.
org.jivesoftware.smack.packet.Stanza.setTo	(	Jid	): Sets who the packet is being sent "to". The XMPP protocol often makes the "to" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Stanza.setTo	(	String	): Sets who the stanza(/packet) is being sent "to". The XMPP protocol often makes the "to" attribute optional, so it does not always need to be set.
org.jivesoftware.smack.packet.Stanza.toString	(	): Returns a short String describing the Stanza. This method is suited for log purposes.
org.jivesoftware.smack.packet.StreamError: Represents a stream error packet. Stream errors are unrecoverable errors where the server will close the unrelying TCP connection after the stream error was sent to the client. These is the list of stream errors as defined in the XMPP spec:  Stream Errors CodeDescription  bad-format  the entity has sent XML that cannot be processed   unsupported-encoding  the entity has sent a namespace prefix that is unsupported   bad-namespace-prefix  Remote Server Timeout   conflict  the server is closing the active stream for this entity because a new stream has been initiated that conflicts with the existing stream.   connection-timeout  the entity has not generated any traffic over the stream for some period of time.   host-gone  the value of the 'to' attribute provided by the initiating entity in the stream header corresponds to a hostname that is no longer hosted by the server.   host-unknown  the value of the 'to' attribute provided by the initiating entity in the stream header does not correspond to a hostname that is hosted by the server.   improper-addressing  a stanza sent between two servers lacks a 'to' or 'from' attribute   internal-server-error  the server has experienced a misconfiguration.   invalid-from  the JID or hostname provided in a 'from' address does not match an authorized JID.   invalid-namespace  the streams namespace name is invalid.   invalid-xml  the entity has sent invalid XML over the stream.   not-authorized  the entity has attempted to send data before the stream has been authenticated   policy-violation  the entity has violated some local service policy.   remote-connection-failed  Rthe server is unable to properly connect to a remote entity.   resource-constraint  Rthe server lacks the system resources necessary to service the stream.   restricted-xml  the entity has attempted to send restricted XML features.   see-other-host  the server will not provide service to the initiating entity but is redirecting traffic to another host.   system-shutdown  the server is being shut down and all active streams are being closed.   undefined-condition  the error condition is not one of those defined by the other conditions in this list.   unsupported-encoding  the initiating entity has encoded the stream in an encoding that is not supported.   unsupported-stanza-type  the initiating entity has sent a first-level child of the stream that is not supported.   unsupported-version  the value of the 'version' attribute provided by the initiating entity in the stream header specifies a version of XMPP that is not supported.   not-well-formed  the initiating entity has sent XML that is not well-formed.    Stream error syntax:    [ OPTIONAL descriptive text ] [OPTIONAL application-specific condition element]  
org.jivesoftware.smack.packet.StreamOpen: The stream open tag.
org.jivesoftware.smack.packet.TopLevelStreamElement: A XMPP top level stream element. This is either a stanza (Stanza) or just a plain stream element (Nonza).
org.jivesoftware.smack.packet.UnparsedIQ: An IQ stanzas that could not be parsed because no provider was found.
org.jivesoftware.smack.packet.XMPPError: Represents an XMPP error sub-packet. Typically, a server responds to a request that has problems by sending the stanza(/packet) back and including an error packet. Each error has a type, error condition as well as as an optional text explanation. Typical errors are:  XMPP Errors XMPP Error ConditionTypeRFC 6120 Section bad-requestMODIFY8.3.3.1 conflictCANCEL8.3.3.2 feature-not-implementedCANCEL8.3.3.3 forbiddenAUTH8.3.3.4 goneMODIFY8.3.3.5 internal-server-errorWAIT8.3.3.6 item-not-foundCANCEL8.3.3.7 jid-malformedMODIFY8.3.3.8 not-acceptable MODIFY8.3.3.9 not-allowedCANCEL8.3.3.10 not-authorizedAUTH8.3.3.11 policy-violationAUTH8.3.3.12 recipient-unavailableWAIT8.3.3.13 redirectMODIFY8.3.3.14 registration-requiredAUTH8.3.3.15 remote-server-not-foundCANCEL8.3.3.16 remote-server-timeoutWAIT8.3.3.17 resource-constraintWAIT8.3.3.18 service-unavailableCANCEL8.3.3.19 subscription-requiredAUTH8.3.3.20 undefined-conditionWAIT8.3.3.21 unexpected-requestWAIT8.3.3.22 
org.jivesoftware.smack.packet.XMPPError.XMPPError	(	Condition	): Create a new XMPPError.
org.jivesoftware.smack.packet.XMPPError.XMPPError	(	Condition	ExtensionElement	): Create a new XMPPError.
org.jivesoftware.smack.packet.XMPPError.XMPPError	(	Condition	String	String	Type	Map	List	): Creates a new error with the specified type, condition and message. This constructor is used when the condition is not recognized automatically by XMPPError i.e. there is not a defined instance of ErrorCondition or it does not apply the default specification.
org.jivesoftware.smack.packet.XMPPError.XMPPError	(	Condition	String	String	Type	Map	List	Stanza	): Creates a new error with the specified type, condition and message. This constructor is used when the condition is not recognized automatically by XMPPError i.e. there is not a defined instance of ErrorCondition or it does not apply the default specification.
org.jivesoftware.smack.packet.XMPPError.getCondition	(	): Returns the error condition.
org.jivesoftware.smack.packet.XMPPError.getStanza	(	): Get the stanza carrying the XMPP error.
org.jivesoftware.smack.packet.XMPPError.getType	(	): Returns the error type.
org.jivesoftware.smack.packet.XMPPError.toXML	(	): Returns the error as XML.
org.jivesoftware.smack.parsing.ExceptionLoggingCallback: Simple parsing exception callback that only logs the encountered parsing exception to java util logging.
org.jivesoftware.smack.parsing.ExceptionThrowingCallback: Parsing exception callback class that simply throws the encountered parsing exception. This usually leads to an connectionClosedOnError() and disconnect of the connection.
org.jivesoftware.smack.parsing.ParsingExceptionCallback: Interface to receive parsing exceptions.  If this class is used as callback, then Smack will silently ignore the stanza that caused the parsing exception and place the parser after the faulty stanza.   Smack provides 2 predefined ParsingExceptionCallback's: ExceptionLoggingCallback and ExceptionThrowingCallback. 
org.jivesoftware.smack.parsing.ParsingExceptionCallback.handleUnparsableStanza	(	UnparseableStanza	): Called when parsing a stanza caused an exception.
org.jivesoftware.smack.parsing.StandardExtensionElementProvider: The parser for StandardExtensionElements.
org.jivesoftware.smack.provider.EmbeddedExtensionProvider: This class simplifies parsing of embedded elements by using the Template Method Pattern. After extracting the current element attributes and content of any child elements, the template method (createReturnExtension() is called. Subclasses then override this method to create the specific return type. To use this class, you simply register your subclasses as extension providers in the smack.properties file. Then they will be automatically picked up and used to parse any child elements.  For example, given the following message <message from='pubsub.shakespeare.lit' to='francisco@denmark.lit' id='foo> <event xmlns='http://jabber.org/protocol/pubsub#event> <items node='princely_musings'> <item id='asdjkwei3i34234n356'> <entry xmlns='http://www.w3.org/2005/Atom'> <title>Soliloquy</title> <link rel='alternative' type='text/html'/> <id>tag:denmark.lit,2003:entry-32397</id> </entry> </item> </items> </event> </message> I would have a classes ItemsProvider extends EmbeddedExtensionProvider ItemProvider extends EmbeddedExtensionProvider and AtomProvider extends ExtensionElementProvider These classes are then registered in the meta-inf/smack.providers file as follows. <extensionProvider> <elementName>items</elementName> <namespace>http://jabber.org/protocol/pubsub#event</namespace> <className>org.jivesoftware.smackx.provider.ItemsEventProvider</className> </extensionProvider> <extensionProvider> <elementName>item</elementName> <namespace>http://jabber.org/protocol/pubsub#event</namespace> <className>org.jivesoftware.smackx.provider.ItemProvider</className> </extensionProvider> 
org.jivesoftware.smack.provider.ExtensionElementProvider: An abstract class for parsing custom extensions elements. Each ExtensionElementProvider must be registered with the ProviderManager class for it to be used. Every implementation of this abstract class must have a public, no-argument constructor.
org.jivesoftware.smack.provider.ExtensionProviderInfo: Defines the information required to register a stanza(/packet) extension Provider with the ProviderManager when using the ProviderLoader.
org.jivesoftware.smack.provider.ExtensionProviderInfo.ExtensionProviderInfo	(	String	String	ExtensionElementProvider	): Defines an extension provider which implements the ExtensionElementProvider interface.
org.jivesoftware.smack.provider.IQProvider: An abstract class for parsing custom IQ packets. Each IQProvider must be registered with the ProviderManager class for it to be used. Every implementation of this abstract class must have a public, no-argument constructor.
org.jivesoftware.smack.provider.IQProviderInfo: Defines the information required to register an IQ Provider with the ProviderManager when using the ProviderLoader.
org.jivesoftware.smack.provider.IQProviderInfo.IQProviderInfo	(	String	String	IQProvider	): Defines an IQ provider which implements the IQProvider interface.
org.jivesoftware.smack.provider.IntrospectionProvider.decode	(	Class	String	): Decodes a String into an object of the specified type. If the object type is not supported, null will be returned.
org.jivesoftware.smack.provider.ProviderFileLoader: Loads the IQProvider and ExtensionElementProvider information from a standard provider file in preparation for loading into the ProviderManager.
org.jivesoftware.smack.provider.ProviderLoader: Used to load providers into the ProviderManager.
org.jivesoftware.smack.provider.ProviderLoader.getExtensionProviderInfo	(	): Provides the extension providers for the creation of extension providers to be added to the ProviderManager.
org.jivesoftware.smack.provider.ProviderLoader.getIQProviderInfo	(	): Provides the IQ provider info for the creation of IQ providers to be added to the ProviderManager.
org.jivesoftware.smack.provider.ProviderLoader.getStreamFeatureProviderInfo	(	): Provides the stream feature providers information for the creation of stream feature providers to be added to the ProviderManager.
org.jivesoftware.smack.provider.ProviderManager: Manages providers for parsing custom XML sub-documents of XMPP packets. Two types of providers exist: IQProvider -- parses IQ requests into Java objects. PacketExtension -- parses XML sub-documents attached to packets into PacketExtension instances. IQProvider By default, Smack only knows how to process IQ packets with sub-packets that are in a few namespaces such as: jabber:iq:auth jabber:iq:roster jabber:iq:register Because many more IQ types are part of XMPP and its extensions, a pluggable IQ parsing mechanism is provided. IQ providers are registered programatically or by creating a providers file. The file is an XML document that contains one or more iqProvider entries, as in the following example:  <?xml version="1.0"?> <smackProviders> <iqProvider> <elementName>query</elementName> <namespace>jabber:iq:time</namespace> <className>org.jivesoftware.smack.packet.Time</className> </iqProvider> </smackProviders> Each IQ provider is associated with an element name and a namespace. If multiple provider entries attempt to register to handle the same namespace, the first entry loaded from the classpath will take precedence. The IQ provider class can either implement the IQProvider interface, or extend the IQ class. In the former case, each IQProvider is responsible for parsing the raw XML stream to create an IQ instance. In the latter case, bean introspection is used to try to automatically set properties of the IQ instance using the values found in the IQ stanza(/packet) XML. For example, an XMPP time stanza(/packet) resembles the following:  <iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'> <query xmlns='jabber:iq:time'> <utc>20020910T17:58:35</utc> <tz>MDT</tz> <display>Tue Sep 10 12:58:35 2002</display> </query> </iq> In order for this stanza(/packet) to be automatically mapped to the Time object listed in the providers file above, it must have the methods setUtc(String), setTz(String), and setDisplay(String). The introspection service will automatically try to convert the String value from the XML into a boolean, int, long, float, double, or Class depending on the type the IQ instance expects. A pluggable system for stanza(/packet) extensions, child elements in a custom namespace for message and presence packets, also exists. Each extension provider is registered with a name space in the smack.providers file as in the following example:  <?xml version="1.0"?> <smackProviders> <extensionProvider> <elementName>x</elementName> <namespace>jabber:iq:event</namespace> <className>org.jivesoftware.smack.packet.MessageEvent</className> </extensionProvider> </smackProviders> If multiple provider entries attempt to register to handle the same element name and namespace, the first entry loaded from the classpath will take precedence. Whenever a stanza(/packet) extension is found in a packet, parsing will be passed to the correct provider. Each provider can either implement the PacketExtensionProvider interface or be a standard Java Bean. In the former case, each extension provider is responsible for parsing the raw XML stream to contruct an object. In the latter case, bean introspection is used to try to automatically set the properties of th class using the values in the stanza(/packet) extension sub-element. When an extension provider is not registered for an element name and namespace combination, Smack will store all top-level elements of the sub-packet in DefaultPacketExtension object and then attach it to the packet.
org.jivesoftware.smack.provider.ProviderManager.addExtensionProvider	(	String	String	Object	): Adds an extension provider with the specified element name and name space. The provider will override any providers loaded through the classpath. The provider must be either a PacketExtensionProvider instance, or a Class object of a Javabean.
org.jivesoftware.smack.provider.ProviderManager.addIQProvider	(	String	String	Object	): Adds an IQ provider (must be an instance of IQProvider or Class object that is an IQ) with the specified element name and name space. The provider will override any providers loaded through the classpath.
org.jivesoftware.smack.provider.ProviderManager.getExtensionProvider	(	String	String	): Returns the stanza(/packet) extension provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "x" and the namespace "jabber:x:event", then the following stanza(/packet) would trigger the provider:  <message to='romeo@montague.net' id='message_1'> <body>Art thou not Romeo, and a Montague?</body> <x xmlns='jabber:x:event'> <composing/> </x> </message> Note: this method is generally only called by the internal Smack classes.
org.jivesoftware.smack.provider.ProviderManager.getExtensionProviders	(	): Returns an unmodifiable collection of all PacketExtensionProvider instances. Each object in the collection will either be a PacketExtensionProvider instance, or a Class object that implements the PacketExtensionProvider interface.
org.jivesoftware.smack.provider.ProviderManager.getIQProvider	(	String	String	): Returns the IQ provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "query" and the namespace "jabber:iq:time", then the following stanza(/packet) would trigger the provider:  <iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'> <query xmlns='jabber:iq:time'> <utc>20020910T17:58:35</utc> <tz>MDT</tz> <display>Tue Sep 10 12:58:35 2002</display> </query> </iq> Note: this method is generally only called by the internal Smack classes.
org.jivesoftware.smack.provider.ProviderManager.getIQProviders	(	): Returns an unmodifiable collection of all IQProvider instances. Each object in the collection will either be an IQProvider instance, or a Class object that implements the IQProvider interface.
org.jivesoftware.smack.provider.ProviderManager.removeExtensionProvider	(	String	String	): Removes an extension provider with the specified element name and namespace. This method is typically called to cleanup providers that are programatically added using the addExtensionProvider() method.
org.jivesoftware.smack.provider.ProviderManager.removeIQProvider	(	String	String	): Removes an IQ provider with the specified element name and namespace. This method is typically called to cleanup providers that are programatically added using the addIQProvider() method.
org.jivesoftware.smack.provider.ProviderManagerTest.shouldInitializeSmackTest	(	): This test should be run in a clean (e.g. forked) VM
org.jivesoftware.smack.provider.StreamFeatureProviderInfo.StreamFeatureProviderInfo	(	String	String	ExtensionElementProvider	): Defines an extension provider which implements the StreamFeatureProvider interface.
org.jivesoftware.smack.proxy.HTTPProxySocketConnection: HTTP Proxy Socket Connection which connects the socket using a HTTP Proxy.
org.jivesoftware.smack.proxy.ProxyException: An exception class to handle exceptions caused by proxy.
org.jivesoftware.smack.proxy.ProxyInfo: Class which stores proxy information such as proxy type, host, port, authentication etc.
org.jivesoftware.smack.proxy.Socks4ProxySocketConnection: Socket factory for socks4 proxy.
org.jivesoftware.smack.proxy.Socks5ProxySocketConnection: Socket factory for Socks5 proxy.
org.jivesoftware.smack.roster.AbstractRosterListener: Provides empty implementations for RosterListener.
org.jivesoftware.smack.roster.Roster: Represents a user's roster, which is the collection of users a person receives presence updates for. Roster items are categorized into groups for easier management.  Others users may attempt to subscribe to this user using a subscription request. Three modes are supported for handling these requests:  accept_all -- accept all subscription requests. reject_all -- reject all subscription requests. manual -- manually process all subscription requests.  
org.jivesoftware.smack.roster.Roster.PresencePacketListener: Listens for all presence packets and processes them.
org.jivesoftware.smack.roster.Roster.Roster	(	XMPPConnection	): Creates a new roster.
org.jivesoftware.smack.roster.Roster.RosterPushListener: Listens for all roster pushes and processes them.
org.jivesoftware.smack.roster.Roster.RosterResultListener: Handles Roster results as described in RFC 6121 2.1.4.
org.jivesoftware.smack.roster.Roster.addRosterListener	(	RosterListener	): Adds a listener to this roster. The listener will be fired anytime one or more changes to the roster are pushed from the server.
org.jivesoftware.smack.roster.Roster.addRosterLoadedListener	(	RosterLoadedListener	): Add a roster loaded listener.
org.jivesoftware.smack.roster.Roster.addSubscribeListener	(	SubscribeListener	): Add a subscribe listener, which is invoked on incoming subscription requests and if SubscriptionMode is set to manual. This also sets subscription mode to manual.
org.jivesoftware.smack.roster.Roster.contains	(	BareJid	): Returns true if the specified XMPP address is an entry in the roster.
org.jivesoftware.smack.roster.Roster.createEntry	(	BareJid	String	String[]	): Creates a new roster entry and presence subscription. The server will asynchronously update the roster with the subscription status.
org.jivesoftware.smack.roster.Roster.createGroup	(	String	): Creates a new group.  Note: you must add at least one entry to the group for the group to be kept after a logout/login. This is due to the way that XMPP stores group information. 
org.jivesoftware.smack.roster.Roster.fireRosterChangedEvent	(	Collection	Collection	Collection	): Fires roster changed event to roster listeners indicating that the specified collections of contacts have been added, updated or deleted from the roster.
org.jivesoftware.smack.roster.Roster.fireRosterPresenceEvent	(	Presence	): Fires roster presence changed event to roster listeners.
org.jivesoftware.smack.roster.Roster.getAllPresences	(	BareJid	): Returns a List of Presence objects for all of a user's current presences if no presence information is available, such as when you are not subscribed to the user's presence updates.
org.jivesoftware.smack.roster.Roster.getAvailablePresences	(	BareJid	): Returns a List of all available Presence Objects for the given bare JID. If there are no available presences, then the empty list will be returned.
org.jivesoftware.smack.roster.Roster.getDefaultSubscriptionMode	(	): Returns the default subscription processing mode to use when a new Roster is created. The subscription processing mode dictates what action Smack will take when subscription requests from other users are made. The default subscription mode is accept_all.
org.jivesoftware.smack.roster.Roster.getEntries	(	): Returns a set of all entries in the roster, including entries that don't belong to any groups.
org.jivesoftware.smack.roster.Roster.getEntriesAndAddListener	(	RosterListener	RosterEntries	): Add a roster listener and invoke the roster entries with all entries of the roster.  The method guarantees that the listener is only invoked after rosterEntries() has been invoked, and that all roster events that happen while rosterEntires(Collection)  is called are queued until the method returns.   This guarantee makes this the ideal method to e.g. populate a UI element with the roster while installing a RosterListener to listen for subsequent roster events. 
org.jivesoftware.smack.roster.Roster.getEntry	(	BareJid	): Returns the roster entry associated with the given XMPP address or null if the user is not an entry in the roster.
org.jivesoftware.smack.roster.Roster.getEntryCount	(	): Returns a count of the entries in the roster.
org.jivesoftware.smack.roster.Roster.getGroup	(	String	): Returns the roster group with the specified name, or null if the group doesn't exist.
org.jivesoftware.smack.roster.Roster.getGroupCount	(	): Returns the number of the groups in the roster.
org.jivesoftware.smack.roster.Roster.getGroups	(	): Returns an unmodifiable collections of all the roster groups.
org.jivesoftware.smack.roster.Roster.getInstanceFor	(	XMPPConnection	): Returns the roster for the user.  This method will never return null, instead if the user has not yet logged into the server all modifying methods of the returned roster object like createEntry(), removeEntry() , etc. except adding or removing RosterListeners will throw an IllegalStateException. 
org.jivesoftware.smack.roster.Roster.getOrCreatePresencesInternal	(	BareJid	): Retrieve the user presences (a map from resource to Presence) for a given XMPP entity represented by their bare JID.
org.jivesoftware.smack.roster.Roster.getPresence	(	BareJid	): Returns the presence info for a particular user. If the user is offline, or if no presence data is available (such as when you are not subscribed to the user's presence updates), unavailable presence will be returned.  If the user has several presences (one for each resource), then the presence with highest priority will be returned. If multiple presences have the same priority, the one with the "most available" presence mode will be returned. In order, that's chat free to chat, available, away, xa extended away, and dnd do not disturb.   Note that presence information is received asynchronously. So, just after logging in to the server, presence values for users in the roster may be unavailable even if they are actually online. In other words, the value returned by this method should only be treated as a snapshot in time, and may not accurately reflect other user's presence instant by instant. If you need to track presence over time, such as when showing a visual representation of the roster, consider using a RosterListener. 
org.jivesoftware.smack.roster.Roster.getPresenceResource	(	FullJid	): Returns the presence info for a particular user's resource, or unavailable presence if the user is offline or if no presence information is available, such as when you are not subscribed to the user's presence updates.
org.jivesoftware.smack.roster.Roster.getPresences	(	BareJid	): Returns a List of Presence objects for all of a user's current presences or an unavailable presence if the user is unavailable (offline) or if no presence information is available, such as when you are not subscribed to the user's presence updates.
org.jivesoftware.smack.roster.Roster.getPresencesInternal	(	BareJid	): Retrieve the user presences (a map from resource to Presence) for a given XMPP entity represented by their bare JID.
org.jivesoftware.smack.roster.Roster.getSubscriptionMode	(	): Returns the subscription processing mode, which dictates what action Smack will take when subscription requests from other users are made. The default subscription mode is accept_all.  If using the manual mode, a PacketListener should be registered that listens for Presence packets that have a type of subscribe. 
org.jivesoftware.smack.roster.Roster.getUnfiledEntries	(	): Returns an unmodifiable set for the unfiled roster entries. An unfiled entry is an entry that doesn't belong to any groups.
org.jivesoftware.smack.roster.Roster.getUnfiledEntryCount	(	): Returns a count of the unfiled entries in the roster. An unfiled entry is an entry that doesn't belong to any groups.
org.jivesoftware.smack.roster.Roster.hasValidSubscriptionType	(	RosterPacket.Item	): Ignore ItemTypes as of RFC 6121, 2.1.2.5. This is used by RosterPushListener and RosterResultListener.
org.jivesoftware.smack.roster.Roster.iAmSubscribedTo	(	Jid	): Check if the XMPP entity this roster belongs to is subscribed to the presence of the given JID.
org.jivesoftware.smack.roster.Roster.isLoaded	(	): Check if the roster is loaded.
org.jivesoftware.smack.roster.Roster.isRosterLoadedAtLogin	(	): Returns true if the roster will be loaded from the server when logging in. This is the common behavior for clients but sometimes clients may want to differ this or just never do it if not interested in rosters.
org.jivesoftware.smack.roster.Roster.isRosterVersioningSupported	(	): Check if the server supports roster versioning.
org.jivesoftware.smack.roster.Roster.isSubscribedToMyPresence	(	Jid	): Check if the given JID is subscribed to the user's presence.  If the JID is subscribed to the user's presence then it is allowed to see the presence and will get notified about presence changes. Also returns true, if the JID is the service name of the XMPP connection (the "XMPP domain"), i.e. the XMPP service is treated like having an implicit subscription to the users presence.  Note that if the roster is not loaded, then this method will always return false.
org.jivesoftware.smack.roster.Roster.isSubscriptionPreApprovalSupported	(	): Check for subscription pre-approval support.
org.jivesoftware.smack.roster.Roster.move	(	BareJid	Map	Map	): Move presences from 'entity' from one presence map to another.
org.jivesoftware.smack.roster.Roster.preApprove	(	BareJid	): Pre-approve user presence subscription.
org.jivesoftware.smack.roster.Roster.preApproveAndCreateEntry	(	BareJid	String	String[]	): Creates a new pre-approved roster entry and presence subscription. The server will asynchronously update the roster with the subscription status.
org.jivesoftware.smack.roster.Roster.reload	(	): Reloads the entire roster from the server. This is an asynchronous operation, which means the method will return immediately, and the roster will be reloaded at a later point when the server responds to the reload request.
org.jivesoftware.smack.roster.Roster.reloadAndWait	(	): Reload the roster and block until it is reloaded.
org.jivesoftware.smack.roster.Roster.removeEmptyGroups	(	): Removes all the groups with no entries. This is used by RosterPushListener and RosterResultListener to cleanup groups after removing contacts.
org.jivesoftware.smack.roster.Roster.removeEntry	(	RosterEntry	): Removes a roster entry from the roster. The roster entry will also be removed from the unfiled entries or from any roster group where it could belong and will no longer be part of the roster. Note that this is a synchronous call -- Smack must wait for the server to send an updated subscription status.
org.jivesoftware.smack.roster.Roster.removeRosterListener	(	RosterListener	): Removes a listener from this roster. The listener will be fired anytime one or more changes to the roster are pushed from the server.
org.jivesoftware.smack.roster.Roster.removeRosterLoadedListener	(	RosterLoadedListener	): Remove a roster loaded listener.
org.jivesoftware.smack.roster.Roster.removeSubscribeListener	(	SubscribeListener	): Remove a subscribe listener. Also restores the previous subscription mode state, if the last listener got removed.
org.jivesoftware.smack.roster.Roster.setDefaultNonRosterPresenceMapMaxSize	(	int	): Set the default maximum size of the non-Roster presence map.  The roster will only store this many presence entries for entities non in the Roster. The default is INITIAL_DEFAULT_NON_ROSTER_PRESENCE_MAP_SIZE. 
org.jivesoftware.smack.roster.Roster.setDefaultSubscriptionMode	(	SubscriptionMode	): Sets the default subscription processing mode to use when a new Roster is created. The subscription processing mode dictates what action Smack will take when subscription requests from other users are made. The default subscription mode is accept_all.
org.jivesoftware.smack.roster.Roster.setNonRosterPresenceMapMaxSize	(	int	): Set the maximum size of the non-Roster presence map.
org.jivesoftware.smack.roster.Roster.setOfflinePresences	(	): Changes the presence of available contacts offline by simulating an unavailable presence sent from the server.
org.jivesoftware.smack.roster.Roster.setOfflinePresencesAndResetLoaded	(	): Changes the presence of available contacts offline by simulating an unavailable presence sent from the server. After a disconnection, every Presence is set to offline.
org.jivesoftware.smack.roster.Roster.setRosterLoadedAtLogin	(	boolean	): Sets if the roster will be loaded from the server when logging in. This is the common behaviour for clients but sometimes clients may want to differ this or just never do it if not interested in rosters.
org.jivesoftware.smack.roster.Roster.setRosterLoadedAtLoginDefault	(	boolean	): Sets if the roster will be loaded from the server when logging in for newly created instances of Roster.
org.jivesoftware.smack.roster.Roster.setRosterStore	(	RosterStore	): Set the roster store, may cause a roster reload.
org.jivesoftware.smack.roster.Roster.setSubscriptionMode	(	SubscriptionMode	): Sets the subscription processing mode, which dictates what action Smack will take when subscription requests from other users are made. The default subscription mode is accept_all.  If using the manual mode, a PacketListener should be registered that listens for Presence packets that have a type of subscribe. 
org.jivesoftware.smack.roster.RosterEntry: Each user in your roster is represented by a roster entry, which contains the user's JID and a name or nickname you assign.
org.jivesoftware.smack.roster.RosterEntry.RosterEntry	(	RosterPacket.Item	Roster	XMPPConnection	): Creates a new roster entry.
org.jivesoftware.smack.roster.RosterEntry.canSeeHisPresence	(	): Check if we are subscribed to the contact's presence. If true then the contact has allowed us to receive presence information.
org.jivesoftware.smack.roster.RosterEntry.canSeeMyPresence	(	): Check if the contact is subscribed to "my" presence. This allows the contact to see the presence information.
org.jivesoftware.smack.roster.RosterEntry.cancelSubscription	(	): Cancel the presence subscription the XMPP entity representing this roster entry has with us.
org.jivesoftware.smack.roster.RosterEntry.equalsDeep	(	Object	): Indicates whether some other object is "equal to" this by comparing all members.  The equals() method returns true if the user JIDs are equal.
org.jivesoftware.smack.roster.RosterEntry.getGroups	(	): Returns an copied list of the roster groups that this entry belongs to.
org.jivesoftware.smack.roster.RosterEntry.getJid	(	): Returns the JID associated with this entry.
org.jivesoftware.smack.roster.RosterEntry.getName	(	): Returns the name associated with this entry.
org.jivesoftware.smack.roster.RosterEntry.getType	(	): Returns the roster subscription type of the entry. When the type is RosterPacket.ItemType.none or RosterPacket.ItemType.from, refer to RosterEntry getStatus() to see if a subscription request is pending.
org.jivesoftware.smack.roster.RosterEntry.getUser	(	): Returns the JID of the user associated with this entry.
org.jivesoftware.smack.roster.RosterEntry.isApproved	(	): Returns the pre-approval state of this entry.
org.jivesoftware.smack.roster.RosterEntry.isSubscriptionPending	(	): Returns the roster subscription request status of the entry. If true, then the contact did not answer the subscription request yet.
org.jivesoftware.smack.roster.RosterEntry.setName	(	String	): Sets the name associated with this entry.
org.jivesoftware.smack.roster.RosterEntry.toRosterItem	(	RosterEntry	): Convert the RosterEntry to a Roster stanza <item/> element.
org.jivesoftware.smack.roster.RosterEntry.toRosterItem	(	RosterEntry	String	): Convert the RosterEntry to a Roster stanza <item/> element.
org.jivesoftware.smack.roster.RosterEntry.toRosterItem	(	RosterEntry	String	boolean	): Convert a roster entry with the given name to a roster item. As per RFC 6121 § 2.1.2.2., clients MUST NOT include the 'ask' attribute, thus set includeAskAttribute to false.
org.jivesoftware.smack.roster.RosterEntry.updateItem	(	RosterPacket.Item	): Updates the state of the entry with the new values.
org.jivesoftware.smack.roster.RosterGroup: A group of roster entries.
org.jivesoftware.smack.roster.RosterGroup.RosterGroup	(	String	XMPPConnection	): Creates a new roster group instance.
org.jivesoftware.smack.roster.RosterGroup.addEntry	(	RosterEntry	): Adds a roster entry to this group. If the entry was unfiled then it will be removed from the unfiled list and will be added to this group. Note that this is a synchronous call -- Smack must wait for the server to receive the updated roster.
org.jivesoftware.smack.roster.RosterGroup.contains	(	Jid	): Returns true if the specified XMPP address is an entry in this group.
org.jivesoftware.smack.roster.RosterGroup.contains	(	RosterEntry	): Returns true if the specified entry is part of this group.
org.jivesoftware.smack.roster.RosterGroup.getEntries	(	): Returns an copied list of all entries in the group.
org.jivesoftware.smack.roster.RosterGroup.getEntry	(	Jid	): Returns the roster entry associated with the given XMPP address or null if the user is not an entry in the group.
org.jivesoftware.smack.roster.RosterGroup.getEntryCount	(	): Returns the number of entries in the group.
org.jivesoftware.smack.roster.RosterGroup.getName	(	): Returns the name of the group.
org.jivesoftware.smack.roster.RosterGroup.removeEntry	(	RosterEntry	): Removes a roster entry from this group. If the entry does not belong to any other group then it will be considered as unfiled, therefore it will be added to the list of unfiled entries. Note that this is a synchronous call -- Smack must wait for the server to receive the updated roster.
org.jivesoftware.smack.roster.RosterGroup.setName	(	String	): Sets the name of the group. Changing the group's name is like moving all the group entries of the group to a new group specified by the new name. Since this group won't have entries it will be removed from the roster. This means that all the references to this object will be invalid and will need to be updated to the new group specified by the new name.
org.jivesoftware.smack.roster.RosterListener: A listener that is fired any time a roster is changed or the presence of a user in the roster is changed.
org.jivesoftware.smack.roster.RosterListener.entriesAdded	(	Collection	): Called when roster entries are added.
org.jivesoftware.smack.roster.RosterListener.entriesDeleted	(	Collection	): Called when a roster entries are removed.
org.jivesoftware.smack.roster.RosterListener.entriesUpdated	(	Collection	): Called when a roster entries are updated.
org.jivesoftware.smack.roster.RosterListener.presenceChanged	(	Presence	): Called when the presence of a roster entry is changed. Care should be taken when using the presence data delivered as part of this event. Specifically, when a user account is online with multiple resources, the UI should account for that. For example, say a user is online with their desktop computer and mobile phone. If the user logs out of the IM client on their mobile phone, the user should not be shown in the roster (contact list) as offline since they're still available as another resource. To get the current "best presence" for a user after the presence update, query the roster:  String user = presence.getFrom(); Presence bestPresence = roster.getPresence(user);  That will return the presence value for the user with the highest priority and availability. Note that this listener is triggered for presence (mode) changes only (e.g presence of types available and unavailable. Subscription-related presence packets will not cause this method to be called.
org.jivesoftware.smack.roster.RosterLoadedListener: Roster loaded listeners are invoked once the Roster was successfully loaded.  A common approach is to call getEntriesAndAddListener() within onRosterLoaded(), to initialize or update your UI components with the current roster state. 
org.jivesoftware.smack.roster.RosterLoadedListener.onRosterLoaded	(	Roster	): Called when the Roster was loaded successfully.
org.jivesoftware.smack.roster.RosterLoadedListener.onRosterLoadingFailed	(	Exception	): Called when roster loading has failed.  Note that the reason for the failure could be as trivial as the connection being not connected, in which case the exception will be a org.jivesoftware.smack.SmackException.NotConnectedException. 
org.jivesoftware.smack.roster.RosterOfflineTest: Tests the behavior of the roster if the connection is not authenticated yet.
org.jivesoftware.smack.roster.RosterTest: Tests that verifies the correct behavior of the Roster implementation.
org.jivesoftware.smack.roster.RosterTest.RosterUpdateResponder: This class can be used to simulate the server response for a roster update request.
org.jivesoftware.smack.roster.RosterTest.RosterUpdateResponder.getException	(	): Returns the exception or error if something went wrong.
org.jivesoftware.smack.roster.RosterTest.RosterUpdateResponder.verifyUpdateRequest	(	RosterPacket	): Overwrite this method to check if the received update request is valid.
org.jivesoftware.smack.roster.RosterTest.TestRosterListener: This class can be used to check if the RosterListener was invoked.
org.jivesoftware.smack.roster.RosterTest.TestRosterListener.getAddedAddresses	(	): Get a collection of JIDs of the added roster items.
org.jivesoftware.smack.roster.RosterTest.TestRosterListener.getDeletedAddresses	(	): Get a collection of JIDs of the deleted roster items.
org.jivesoftware.smack.roster.RosterTest.TestRosterListener.getUpdatedAddresses	(	): Get a collection of JIDs of the updated roster items.
org.jivesoftware.smack.roster.RosterTest.TestRosterListener.reset	(	): Reset the lists of added, deleted or updated items.
org.jivesoftware.smack.roster.RosterTest.initRoster	(	): Initialize the roster according to the example in RFC3921: Retrieving One's Roster on Login.
org.jivesoftware.smack.roster.RosterTest.removeAllRosterEntries	(	DummyConnection	Roster	): Remove all roster entries by iterating trough getEntries() and simulating receiving roster pushes from the server.
org.jivesoftware.smack.roster.RosterTest.testAddEmptyGroupEntry	(	): Test if adding an user with an empty group is equivalent with providing no group.
org.jivesoftware.smack.roster.RosterTest.testAddRosterItem	(	): Test adding a roster item according to the example in RFC3921: Adding a Roster Item.
org.jivesoftware.smack.roster.RosterTest.testDeleteRosterItem	(	): Test deleting a roster item according to the example in RFC3921: Deleting a Roster Item.
org.jivesoftware.smack.roster.RosterTest.testEmptyGroupRosterPush	(	): Test processing a roster push with an empty group is equivalent with providing no group.
org.jivesoftware.smack.roster.RosterTest.testIgnoreInvalidFrom	(	): Tests that roster pushes with invalid from are ignored.
org.jivesoftware.smack.roster.RosterTest.testSimpleRosterInitialization	(	): Test a simple roster initialization according to the example in RFC3921: Retrieving One's Roster on Login.
org.jivesoftware.smack.roster.RosterTest.testSimpleRosterPush	(	): Test a simple roster push according to the example in RFC3921bis-03: Roster Push.
org.jivesoftware.smack.roster.RosterTest.testUpdateRosterItem	(	): Test updating a roster item according to the example in RFC3921: Updating a Roster Item.
org.jivesoftware.smack.roster.RosterTest.verifyBenvoliosEntry	(	RosterEntry	): Check Benvolio's roster entry according to the example in RFC3921: Retrieving One's Roster on Login.
org.jivesoftware.smack.roster.RosterTest.verifyMercutiosEntry	(	RosterEntry	): Check Mercutio's roster entry according to the example in RFC3921: Retrieving One's Roster on Login.
org.jivesoftware.smack.roster.RosterTest.verifyRomeosEntry	(	RosterEntry	): Check Romeo's roster entry according to the example in RFC3921: Retrieving One's Roster on Login.
org.jivesoftware.smack.roster.RosterVersioningTest: Tests that verify the correct behavior of the Roster implementation with regard to roster versioning.
org.jivesoftware.smack.roster.RosterVersioningTest.testEqualVersionStored	(	): Tests that receiving an empty roster result causes the roster to be populated by all entries of the roster store.
org.jivesoftware.smack.roster.RosterVersioningTest.testOtherVersionStored	(	): Tests that a non-empty roster result empties the store.
org.jivesoftware.smack.roster.RosterVersioningTest.testRosterVersioningWithCachedRosterAndPushes	(	): Test roster versioning with roster pushes.
org.jivesoftware.smack.roster.SubscribeListener: Handle incoming requests to subscribe to our presence.
org.jivesoftware.smack.roster.SubscribeListener.processSubscribe	(	Jid	Presence	): Handle incoming presence subscription requests.
org.jivesoftware.smack.roster.SubscriptionPreApprovalTest: Tests that verifies the correct behavior of the pre-approval implementation.
org.jivesoftware.smack.roster.SubscriptionPreApprovalTest.PreApproveAndCreateEntryResponder: This class can be used to simulate the server response for a pre approve request request.
org.jivesoftware.smack.roster.SubscriptionPreApprovalTest.PreApproveAndCreateEntryResponder.getException	(	): Returns the exception or error if something went wrong.
org.jivesoftware.smack.roster.SubscriptionPreApprovalTest.PreApproveAndCreateEntryResponder.verifyPreApprovalRequest	(	Presence	): Overwrite this method to check if recieved pre-approval request is valid
org.jivesoftware.smack.roster.SubscriptionPreApprovalTest.PreApproveAndCreateEntryResponder.verifyRosterUpdateRequest	(	RosterPacket	): Overwrite this method to check if the received roster update request is valid.
org.jivesoftware.smack.roster.packet.RosterPacket: Represents XMPP roster packets.
org.jivesoftware.smack.roster.packet.RosterPacket.Item: A roster item, which consists of a JID, their name, the type of subscription, and the groups the roster item belongs to.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.Item	(	BareJid	String	): Creates a new roster item.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.Item	(	BareJid	String	boolean	): Creates a new roster item.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.addGroupName	(	String	): Adds a group name.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.getGroupNames	(	): Returns an unmodifiable set of the group names that the roster item belongs to.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.getItemType	(	): Returns the roster item type.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.getJid	(	): Returns the JID of this item.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.getName	(	): Returns the user's name.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.getUser	(	): Returns the user.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.isApproved	(	): Returns the roster item pre-approval state.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.removeGroupName	(	String	): Removes a group name.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.setApproved	(	boolean	): Sets the roster item pre-approval state.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.setItemType	(	ItemType	): Sets the roster item type.
org.jivesoftware.smack.roster.packet.RosterPacket.Item.setName	(	String	): Sets the user's name.
org.jivesoftware.smack.roster.packet.RosterPacket.addRosterItem	(	Item	): Adds a roster item to the packet.
org.jivesoftware.smack.roster.packet.RosterPacket.getRosterItemCount	(	): Returns the number of roster items in this roster packet.
org.jivesoftware.smack.roster.packet.RosterPacket.getRosterItems	(	): Returns a copied list of the roster items in the packet.
org.jivesoftware.smack.roster.rosterstore.DirectoryRosterStore: Stores roster entries as specified by RFC 6121 for roster versioning in a set of files.
org.jivesoftware.smack.roster.rosterstore.DirectoryRosterStore.DirectoryRosterStore	(	File	): 
org.jivesoftware.smack.roster.rosterstore.DirectoryRosterStore.init	(	File	): Creates a new roster store on disk.
org.jivesoftware.smack.roster.rosterstore.DirectoryRosterStore.open	(	File	): Opens a roster store.
org.jivesoftware.smack.roster.rosterstore.DirectoryRosterStoreTest: Tests the implementation of DirectoryRosterStore.
org.jivesoftware.smack.roster.rosterstore.DirectoryRosterStoreTest.testStoreAddRemove	(	): Tests adding and removing entries.
org.jivesoftware.smack.roster.rosterstore.DirectoryRosterStoreTest.testStoreInitializedEmpty	(	): Tests that an initialized directory is empty.
org.jivesoftware.smack.roster.rosterstore.DirectoryRosterStoreTest.testStoreUninitialized	(	): Tests that opening an uninitialized directory fails.
org.jivesoftware.smack.roster.rosterstore.RosterStore: This is an interface for persistent roster store needed to implement roster versioning as per RFC 6121.
org.jivesoftware.smack.roster.rosterstore.RosterStore.addEntry	(	RosterPacket.Item	String	): This method stores a new roster entry in this store or updates an existing one.
org.jivesoftware.smack.roster.rosterstore.RosterStore.getEntries	(	): This method returns a list of all roster items contained in this store. If there was an error while loading the store, then null is returned.
org.jivesoftware.smack.roster.rosterstore.RosterStore.getEntry	(	Jid	): This method returns the roster item in this store for the given JID.
org.jivesoftware.smack.roster.rosterstore.RosterStore.getRosterVersion	(	): This method returns the version number as specified by the "ver" attribute of the local store. For a fresh store, this MUST be the empty string.
org.jivesoftware.smack.roster.rosterstore.RosterStore.removeEntry	(	Jid	String	): Removes an entry from the store.
org.jivesoftware.smack.roster.rosterstore.RosterStore.resetEntries	(	Collection	String	): This method updates the store so that it contains only the given entries.
org.jivesoftware.smack.roster.rosterstore.RosterStore.resetStore	(	): Reset the store by removing all entries and setting the version to the empty String.
org.jivesoftware.smack.sasl.SASLMechanism: Base class for SASL mechanisms. Subclasses will likely want to implement their own versions of these methods: authenticate() -- Initiate authentication stanza using the deprecated method. authenticate() -- Initiate authentication stanza using the CallbackHandler method. challengeReceived() -- Handle a challenge from the server. 
org.jivesoftware.smack.sasl.SASLMechanism.authenticate	(	String	DomainBareJid	CallbackHandler	EntityBareJid	SSLSession	): Builds and sends the auth stanza to the server. The callback handler will handle any additional information, such as the authentication ID or realm, if it is needed.
org.jivesoftware.smack.sasl.SASLMechanism.authenticate	(	String	String	DomainBareJid	String	EntityBareJid	SSLSession	): Builds and sends the auth stanza to the server. Note that this method of authentication is not recommended, since it is very inflexible. Use authenticate() whenever possible. Explanation of auth stanza: The client authentication stanza needs to include the digest-uri of the form: xmpp/serviceName From RFC-2831: digest-uri = "digest-uri" "=" digest-uri-value digest-uri-value = serv-type "/" host [ "/" serv-name ] digest-uri: Indicates the principal name of the service with which the client wishes to connect, formed from the serv-type, host, and serv-name. For example, the FTP service on "ftp.example.com" would have a "digest-uri" value of "ftp/ftp.example.com"; the SMTP server from the example above would have a "digest-uri" value of "smtp/mail3.example.com/example.com". host: The DNS host name or IP address for the service requested. The DNS host name must be the fully-qualified canonical name of the host. The DNS host name is the preferred form; see notes on server processing of the digest-uri. serv-name: Indicates the name of the service if it is replicated. The service is considered to be replicated if the client's service-location process involves resolution using standard DNS lookup operations, and if these operations involve DNS records (such as SRV, or MX) which resolve one DNS name into a set of other DNS names. In this case, the initial name used by the client is the "serv-name", and the final name is the "host" component. For example, the incoming mail service for "example.com" may be replicated through the use of MX records stored in the DNS, one of which points at an SMTP server called "mail3.example.com"; it's "serv-name" would be "example.com", it's "host" would be "mail3.example.com". If the service is not replicated, or the serv-name is identical to the host, then the serv-name component MUST be omitted digest-uri verification is needed for ejabberd 2.0.3 and higher
org.jivesoftware.smack.sasl.SASLMechanism.authenticateInternal	(	): 
org.jivesoftware.smack.sasl.SASLMechanism.challengeReceived	(	String	boolean	): The server is challenging the SASL mechanism for the stanza he just sent. Send a response to the server's challenge.
org.jivesoftware.smack.sasl.SASLMechanism.evaluateChallenge	(	byte[]	): 
org.jivesoftware.smack.sasl.SASLMechanism.getAuthenticationText	(	): Should return the initial response of the SASL mechanism. The returned byte array will be send base64 encoded to the server. SASL mechanism are free to return null or an empty array here.
org.jivesoftware.smack.sasl.SASLMechanism.getName	(	): Returns the common name of the SASL mechanism. E.g.: PLAIN, DIGEST-MD5 or GSSAPI.
org.jivesoftware.smack.sasl.SASLMechanism.getPriority	(	): Get the priority of this SASL mechanism. Lower values mean higher priority.
org.jivesoftware.smack.sasl.SASLMechanism.saslPrep	(	String	): SASLprep the given String. The resulting String is in UTF-8.
org.jivesoftware.smack.sasl.SASLMechanism.setSaslPrepTransformer	(	StringTransformer	): Set the SASLPrep StringTransformer.  A simple SASLPrep StringTransformer would be for example: java.text.Normalizer.normalize(string, Form.NFKC); 
org.jivesoftware.smack.sasl.core.SASLAnonymous: Implementation of the SASL ANONYMOUS mechanism.
org.jivesoftware.smack.sasl.core.SASLXOauth2Mechanism: The SASL X-OAUTH2 mechanism as described in https://developers.google .com/talk/jep_extensions/oauth  The given password will be used as OAUTH token.   Note that X-OAUTH2 is experimental in Smack. This is because Google defined, besides being a bad practice (XEP-134), custom attributes to the 'auth' stanza, as can be seen here     from https://developers.google.com/cloud-print/docs/rawxmpp and here   base64("\0" + user_name + "\0" + oauth_token)   from https://developers.google.com/talk/jep_extensions/oauth  Those attribute extensions are currently not supported by Smack, and it's unclear how it affects authorization and how widely they are used. 
org.jivesoftware.smack.sasl.core.ScramHmac.hmac	(	byte[]	byte[]	): RFC 5802 § 2.2 HMAC(key, str).
org.jivesoftware.smack.sasl.core.ScramMechanism.escape	(	String	): Escapes usernames or passwords for SASL SCRAM-SHA1.  According to RFC 5802 § 5.1 'n:' "The characters ',' or '=' in usernames are sent as '=2C' and '=3D' respectively." 
org.jivesoftware.smack.sasl.core.ScramMechanism.getChannelBindingData	(	): 
org.jivesoftware.smack.sasl.core.ScramMechanism.getRandomAscii	(	): Generate random ASCII.  This method is non-static and package-private for unit testing purposes. 
org.jivesoftware.smack.sasl.core.ScramMechanism.hi	(	String	byte[]	int	): RFC 5802 § 2.2 Hi(str, salt, i)  Hi() is, essentially, PBKDF2 [RFC2898] with HMAC() as the pseudorandom function (PRF) and with dkLen == output length of HMAC() == output length of H(). 
org.jivesoftware.smack.sasl.core.ScramMechanism.hmac	(	byte[]	byte[]	): RFC 5802 § 2.2 HMAC(key, str)
org.jivesoftware.smack.sasl.core.ScramPlusMechanism: SCRAM-X-PLUS implementation. Due limitations of the Java API, this mechanism only supports the 'tls-server-end-point' channel binding type. But on the other hand, the other relevant channel binding type 'tls-unique' has some flaws (see 3SHAKE, RFC 7627).
org.jivesoftware.smack.sasl.javax.SASLCramMD5Mechanism: Implementation of the SASL CRAM-MD5 mechanism.
org.jivesoftware.smack.sasl.javax.SASLDigestMD5Mechanism: Implementation of the SASL DIGEST-MD5 mechanism.
org.jivesoftware.smack.sasl.javax.SASLExternalMechanism: Implementation of the SASL EXTERNAL mechanism. To effectively use this mechanism, Java must be configured to properly supply a client SSL certificate (of some sort) to the server. It is up to the implementer to determine how to do this. Here is one method: Create a java keystore with your SSL certificate in it: keytool -genkey -alias username -dname "cn=username,ou=organizationalUnit,o=organizationaName,l=locality,s=state,c=country" Next, set the System Properties:  javax.net.ssl.keyStore to the location of the keyStore javax.net.ssl.keyStorePassword to the password of the keyStore javax.net.ssl.trustStore to the location of the trustStore javax.net.ssl.trustStorePassword to the the password of the trustStore  Then, when the server requests or requires the client certificate, java will simply provide the one in the keyStore. Also worth noting is the EXTERNAL mechanism in Smack is not enabled by default. To enable it, the implementer will need to call SASLAuthentication.supportSASLMechamism("EXTERNAL");
org.jivesoftware.smack.sasl.javax.SASLGSSAPIMechanism: Implementation of the SASL GSSAPI mechanism.
org.jivesoftware.smack.sasl.javax.SASLGSSAPIMechanism.getServerName	(	): GSSAPI differs from all other SASL mechanism such that it required the FQDN host name as server name and not the serviceName (At least that is what old code comments of Smack tell us).
org.jivesoftware.smack.sasl.javax.SASLPlainMechanism: Implementation of the SASL PLAIN mechanism.
org.jivesoftware.smack.sasl.packet.SaslStreamElements.AuthMechanism: Initiating SASL authentication by select a mechanism.
org.jivesoftware.smack.sasl.packet.SaslStreamElements.Challenge: A SASL challenge stream element.
org.jivesoftware.smack.sasl.packet.SaslStreamElements.Response: A SASL response stream element.
org.jivesoftware.smack.sasl.packet.SaslStreamElements.SASLFailure: A SASL failure stream element, also called "SASL Error".
org.jivesoftware.smack.sasl.packet.SaslStreamElements.SASLFailure.getSASLError	(	): Get the SASL related error condition.
org.jivesoftware.smack.sasl.packet.SaslStreamElements.SASLFailure.getSASLErrorString	(	): Get the SASL error as String.
org.jivesoftware.smack.sasl.packet.SaslStreamElements.Success: A SASL success stream element.
org.jivesoftware.smack.sasl.packet.SaslStreamElements.Success.Success	(	String	): Construct a new SASL success stream element with optional additional data for the SASL layer. (RFC6120 6.3.10)
org.jivesoftware.smack.sasl.packet.SaslStreamElements.Success.getData	(	): Returns additional data for the SASL layer or null.
org.jivesoftware.smack.sasl.provided.SASLDigestMD5Mechanism.quoteBackslash	(	String	): Quote the backslash in the given String. Replaces all occurrences of "\" with "\\".  According to RFC 2831 § 7.2 a quoted-string consists either of qdtext or quoted-pair. And since quoted-pair is a backslash followed by a char, every backslash in qdtext must be quoted, since it otherwise would be treated as qdtext. 
org.jivesoftware.smack.sasl.provided.SASLExternalMechanism: Implementation of the SASL-EXTERNAL authentication mechanism.
org.jivesoftware.smack.sm.SMUtils.calculateDelta	(	long	long	): Calculates the delta of the last known stanza handled count and the new reported stanza handled count while considering that the new value may be wrapped after 2^32-1.
org.jivesoftware.smack.sm.SMUtils.incrementHeight	(	long	): Increment the Stream Management height counter. Quoting XEP-198 4.: "In the unlikely case that the number of stanzas handled during a stream management session exceeds the number of digits that can be represented by the unsignedInt datatype as specified in XML Schema Part 2 [10] (i.e., 2^32), the value of 'h' SHALL be reset from 2^32-1 back to zero (rather than being incremented to 2^32)."
org.jivesoftware.smack.sm.packet.StreamManagement.AbstractEnable.getMaxResumptionTime	(	): Return the max resumption time in seconds.
org.jivesoftware.smack.sm.packet.StreamManagement.Enabled: A Stream Management 'enabled' element.  Here is a full example, all attributes besides 'xmlns' are optional.    
org.jivesoftware.smack.tcp.BundleAndDefer.stopCurrentBundleAndDefer	(	): Stop the bundle and defer mechanism that was started when this instance of BundleAndDefer was emitted by Smack.  It is possible that the defer period already expired when this is invoked. In this case this method is basically a no-op. 
org.jivesoftware.smack.tcp.BundleAndDeferCallback: This callback is used to get the current value of the period in which Smack does bundle and defer outgoing stanzas.  Smack will bundle and defer stanzas if the connection is authenticated and if a bundle and defer callback is set, either via setDefaultBundleAndDeferCallback() or setBundleandDeferCallback(), and getBundleAndDeferMillis() returns a positive value. In a mobile environment, bundling and deferring outgoing stanzas may reduce battery consumption. It heavily depends on the environment, but recommend values for the bundle and defer period range from 20-60 seconds. But keep in mind that longer periods decrease the realtime aspect of Smack.   Smack will invoke the callback when it needs to know the length of the bundle and defer period. If getBundleAndDeferMillis() returns 0 or a negative value, then the stanzas will send immediately. You can also prematurely abort the bundling of stanzas by calling stopCurrentBundleAndDefer(). 
org.jivesoftware.smack.tcp.BundleAndDeferCallback.getBundleAndDeferMillis	(	BundleAndDefer	): Return the bundle and defer period used by Smack in milliseconds.
org.jivesoftware.smack.tcp.PacketWriterTest.shouldBlockAndUnblockTest	(	): Make sure that stanza(/packet) writer does block once the queue reaches QUEUE_SIZE and that sendStanza() does unblock after the interrupt.
org.jivesoftware.smack.tcp.XMPPTCPConnection: Creates a socket connection to an XMPP server. This is the default connection to an XMPP server and is specified in the XMPP Core (RFC 6120).
org.jivesoftware.smack.tcp.XMPPTCPConnection.PacketReader.init	(	): Initializes the reader in order to be used. The reader is initialized during the first connection and when reconnecting due to an abruptly disconnection.
org.jivesoftware.smack.tcp.XMPPTCPConnection.PacketReader.parsePackets	(	): Parse top-level packets in order to process them further.
org.jivesoftware.smack.tcp.XMPPTCPConnection.PacketReader.shutdown	(	): Shuts the stanza(/packet) reader down. This method simply sets the 'done' flag to true.
org.jivesoftware.smack.tcp.XMPPTCPConnection.PacketWriter.init	(	): Initializes the writer in order to be used. It is called at the first connection and also is invoked if the connection is disconnected by an error.
org.jivesoftware.smack.tcp.XMPPTCPConnection.PacketWriter.nextStreamElement	(	): Maybe return the next available element from the queue for writing. If the queue is shut down or a spurious interrupt occurs, null is returned. So it is important to check the 'done' condition in that case.
org.jivesoftware.smack.tcp.XMPPTCPConnection.PacketWriter.sendStreamElement	(	Element	): Sends the specified element to the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.PacketWriter.shutdown	(	boolean	): Shuts down the stanza(/packet) writer. Once this method has been called, no further packets will be written to the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.XMPPTCPConnection	(	CharSequence	String	): Creates a new XMPP connection over TCP.  Note that jid must be the bare JID, e.g. "user@example.org". More fine-grained control over the connection settings is available using the XMPPTCPConnection() constructor. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.XMPPTCPConnection	(	CharSequence	String	String	): Creates a new XMPP connection over TCP.  This is the simplest constructor for connecting to an XMPP server. Alternatively, you can get fine-grained control over connection settings using the XMPPTCPConnection() constructor. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.XMPPTCPConnection	(	XMPPTCPConnectionConfiguration	): Creates a new XMPP connection over TCP (optionally using proxies).  Note that XMPPTCPConnection constructors do not establish a connection to the server and you must call connect(). 
org.jivesoftware.smack.tcp.XMPPTCPConnection.addRequestAckPredicate	(	StanzaFilter	): Add a predicate for Stream Management acknowledgment requests.  Those predicates are used to determine when a Stream Management acknowledgement request is send to the server. Some pre-defined predicates are found in the org.jivesoftware.smack.sm.predicates package.   If not predicate is configured, the forMessagesOrAfter5Stanzas() will be used. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.addStanzaAcknowledgedListener	(	StanzaListener	): Add a Stanza acknowledged listener.  Those listeners will be invoked every time a Stanza has been acknowledged by the server. The will not get automatically removed. Consider using addStanzaIdAcknowledgedListener() when possible. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.addStanzaIdAcknowledgedListener	(	String	StanzaListener	): Add a new Stanza ID acknowledged listener for the given ID.  The listener will be invoked if the stanza with the given ID was acknowledged by the server. It will automatically be removed after the listener was run. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.connectInternal	(	): Establishes a connection to the XMPP server. It basically creates and maintains a socket connection to the server.  Listeners will be preserved from a previous connection if the reconnection occurs after an abrupt termination. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.dropSmState	(	): Drop the stream management state. Sets smSessionId and unacknowledgedStanzas to null.
org.jivesoftware.smack.tcp.XMPPTCPConnection.getMaxSmResumptionTime	(	): Get the maximum resumption time in seconds after which a managed stream can be resumed.  This method will return MAX_VALUE if neither the client nor the server specify a maximum resumption time. Be aware of integer overflows when using this value, e.g. do not add arbitrary values to it without checking for overflows before. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.initConnection	(	): Initializes the connection by creating a stanza(/packet) reader and writer and opening a XMPP stream to the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.instantShutdown	(	): Performs an unclean disconnect and shutdown of the connection. Does not send a closing stream stanza.
org.jivesoftware.smack.tcp.XMPPTCPConnection.isDisconnectedButSmResumptionPossible	(	): Returns true if the connection is disconnected by a Stream resumption via Stream Management is possible.
org.jivesoftware.smack.tcp.XMPPTCPConnection.isSmAvailable	(	): Returns true if Stream Management is supported by the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.isSmEnabled	(	): Returns true if Stream Management was successfully negotiated with the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.isSmResumptionPossible	(	): Returns true if the stream is resumable.
org.jivesoftware.smack.tcp.XMPPTCPConnection.maybeEnableCompression	(	):  Starts using stream compression that will compress network traffic. Traffic can be reduced up to 90%. Therefore, stream compression is ideal when using a slow speed network connection. However, the server and the client will need to use more CPU time in order to un/compress network data so under high load the server performance might be affected.   Stream compression has to have been previously offered by the server. Currently only the zlib method is supported by the client. Stream compression negotiation has to be done before authentication took place. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.maybeGetCompressionHandler	(	Compress.Feature	): Returns the compression handler that can be used for one compression methods offered by the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.notifyConnectionError	(	Exception	): Sends out a notification that there was an error with the connection and closes the connection. Also prints the stack trace of the given exception
org.jivesoftware.smack.tcp.XMPPTCPConnection.openStream	(	): Resets the parser using the latest connection's reader. Reseting the parser is necessary when the plain connection has been secured or when a new opening stream element is going to be sent by the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.proceedTLSReceived	(	): The server has indicated that TLS negotiation can start. We now need to secure the existing plain connection and perform a handshake. This method won't return until the connection has finished the handshake or an error occurred while securing the connection.
org.jivesoftware.smack.tcp.XMPPTCPConnection.removeAllRequestAckPredicates	(	): Remove all predicates for Stream Management acknowledgment requests.
org.jivesoftware.smack.tcp.XMPPTCPConnection.removeAllStanzaAcknowledgedListeners	(	): Remove all stanza acknowledged listeners.
org.jivesoftware.smack.tcp.XMPPTCPConnection.removeAllStanzaIdAcknowledgedListeners	(	): Removes all Stanza ID acknowledged listeners.
org.jivesoftware.smack.tcp.XMPPTCPConnection.removeRequestAckPredicate	(	StanzaFilter	): Remove the given predicate for Stream Management acknowledgment request.
org.jivesoftware.smack.tcp.XMPPTCPConnection.removeStanzaAcknowledgedListener	(	StanzaListener	): Remove the given Stanza acknowledged listener.
org.jivesoftware.smack.tcp.XMPPTCPConnection.removeStanzaIdAcknowledgedListener	(	String	): Remove the Stanza ID acknowledged listener for the given ID.
org.jivesoftware.smack.tcp.XMPPTCPConnection.requestSmAcknowledgement	(	): Send an unconditional Stream Management acknowledgement request to the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.sendSmAcknowledgement	(	): Send a unconditional Stream Management acknowledgment to the server.  See XEP-198: Stream Management § 4. Acks: "Either party MAY send an  element at any time (e.g., after it has received a certain number of stanzas, or after a certain period of time), even if it has not received an  element from the other party." 
org.jivesoftware.smack.tcp.XMPPTCPConnection.setBundleandDeferCallback	(	BundleAndDeferCallback	): Set the bundle and defer callback used for this connection.  You can use null as argument to reset the callback. Outgoing stanzas will then no longer get deferred. 
org.jivesoftware.smack.tcp.XMPPTCPConnection.setDefaultBundleAndDeferCallback	(	BundleAndDeferCallback	): Set the default bundle and defer callback used for new connections.
org.jivesoftware.smack.tcp.XMPPTCPConnection.setPreferredResumptionTime	(	int	): Set the preferred resumption time in seconds.
org.jivesoftware.smack.tcp.XMPPTCPConnection.setUseStreamManagement	(	boolean	): Set if Stream Management should be used if supported by the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.setUseStreamManagementDefault	(	boolean	): Set if Stream Management should be used by default for new connections.
org.jivesoftware.smack.tcp.XMPPTCPConnection.setUseStreamManagementResumptiodDefault	(	boolean	): Set if Stream Management resumption should be used by default for new connections.
org.jivesoftware.smack.tcp.XMPPTCPConnection.setUseStreamManagementResumption	(	boolean	): Set if Stream Management resumption should be used if supported by the server.
org.jivesoftware.smack.tcp.XMPPTCPConnection.setUseStreamManagementResumptionDefault	(	boolean	): Set if Stream Management resumption should be used by default for new connections.
org.jivesoftware.smack.tcp.XMPPTCPConnection.setWriter	(	Writer	): For unit testing purposes
org.jivesoftware.smack.tcp.XMPPTCPConnection.shutdown	(	): Shuts the current connection down. After this method returns, the connection must be ready for re-use by connect.
org.jivesoftware.smack.tcp.XMPPTCPConnection.streamWasResumed	(	): Returns true if the stream was successfully resumed with help of Stream Management.
org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration: A connection configuration for XMPP connections over TCP (the common case).  You can get an instance of the configuration builder with builder() and build the final immutable connection configuration with build().   XMPPTCPConnectionConfiguration conf = XMPPConnectionConfiguration.builder() .setXmppDomain("example.org").setUsernameAndPassword("user", "password") .setCompressionEnabled(false).build(); XMPPTCPConnection connection = new XMPPTCPConnection(conf); 
org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration.Builder: A configuration builder for XMPP connections over TCP. Use builder() to obtain a new instance and build to build the configuration.
org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration.Builder.setCompressionEnabled	(	boolean	): Sets if the connection is going to use stream compression. Stream compression will be requested after TLS was established (if TLS was enabled) and only if the server offered stream compression. With stream compression network traffic can be reduced up to 90%. By default compression is disabled.
org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration.Builder.setConnectTimeout	(	int	): Set how long the socket will wait until a TCP connection is established (in milliseconds).
org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration.getConnectTimeout	(	): How long the socket will wait until a TCP connection is established (in milliseconds). Defaults to DEFAULT_CONNECT_TIMEOUT.
org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration.isCompressionEnabled	(	): Returns true if the connection is going to use stream compression. Stream compression will be requested after TLS was established (if TLS was enabled) and only if the server offered stream compression. With stream compression network traffic can be reduced up to 90%. By default compression is disabled.
org.jivesoftware.smack.test.SmackTestCase: Base class for all the test cases which provides a pre-configured execution context. This means that any test case that subclassifies this base class will have access to a pool of connections and to the user of each connection. The maximum number of connections in the pool can be controlled by the message getMaxConnections() which every subclass must implement. This base class defines a default execution context (i.e. host, port, chat domain and muc domain) which can be found in the file "config/test-case.xml". However, each subclass could redefine the default configuration by providing its own configuration file (if desired). The name of the configuration file must be of the form .xml (e.g. RosterTest.xml). The file must be placed in the folder "config". This folder is where the default configuration file is being held.
org.jivesoftware.smack.test.SmackTestCase.SmackTestCase	(	String	): Constructor for SmackTestCase.
org.jivesoftware.smack.test.SmackTestCase.assertEquals	(	String	byte[]	byte[]	): Compares two contents of two byte arrays to make sure that they are equal
org.jivesoftware.smack.test.SmackTestCase.createConnection	(	): Creates a new XMPPTCPConnection using the connection preferences. This is useful when not using a connection from the connection pool in a test case.
org.jivesoftware.smack.test.SmackTestCase.createOfflineConnections	(	): Returns false if the connections initialized by the test case will be automatically connected to the XMPP server. Returns true if the connections initialized by the test case will NOT be connected to the XMPP server. To connect the connections invoke connectAndLogin().  Connections are connected by default. Overwrite this method if the test case needs unconnected connections.
org.jivesoftware.smack.test.SmackTestCase.getBareJID	(	int	): Returns the bare XMPP address of the user (e.g. johndoe@jabber.org) that is using the connection located at the requested position.
org.jivesoftware.smack.test.SmackTestCase.getChatDomain	(	): Returns the default groupchat service domain.
org.jivesoftware.smack.test.SmackTestCase.getConfigurationFilename	(	): Returns the name of the configuration file related to this test case. By default all the test cases will use the same configuration file. However, it's possible to override the default configuration by providing a file of the form .xml (e.g. RosterTest.xml).
org.jivesoftware.smack.test.SmackTestCase.getConnection	(	int	): Returns the XMPPTCPConnection located at the requested position. Each test case holds a pool of connections which is initialized while setting up the test case. The maximum number of connections is controlled by the message getMaxConnections() which every subclass must implement. If the requested position is greater than the connections size then an IllegalArgumentException will be thrown. 
org.jivesoftware.smack.test.SmackTestCase.getFullJID	(	int	): Returns the full XMPP address of the user (e.g. johndoe@jabber.org/Smack) that is using the connection located at the requested position.
org.jivesoftware.smack.test.SmackTestCase.getMUCDomain	(	): Returns the default MUC service domain.
org.jivesoftware.smack.test.SmackTestCase.getMaxConnections	(	): Returns the maximum number of connections to initialize for this test case. All the initialized connections will be connected to the server using a new test account for each conection. 
org.jivesoftware.smack.test.SmackTestCase.getPassword	(	int	): Returns the password of the user (e.g. johndoe) that is using the connection located at the requested position.
org.jivesoftware.smack.test.SmackTestCase.getSocketFactory	(	): Returns a SocketFactory that will be used to create the socket to the XMPP server. By default no SocketFactory is used but subclasses my want to redefine this method. A custom SocketFactory allows fine-grained control of the actual connection to the XMPP server. A typical use for a custom SocketFactory is when connecting through a SOCKS proxy.
org.jivesoftware.smack.test.SmackTestCase.getUsername	(	int	): Returns the name of the user (e.g. johndoe) that is using the connection located at the requested position.
org.jivesoftware.smack.test.SmackTestCase.init	(	): Initializes the context of the test case. We will first try to load the configuration from a file whose name is conformed by the test case class name plus an .xml extension (e.g RosterTest.xml). If no file was found under that name then we will try to load the default configuration for all the test cases from the file "config/test-case.xml".
org.jivesoftware.smack.test.SmackTestCase.letsAllBeFriends	(	): Subscribes all connections with each other: They all become friends
org.jivesoftware.smack.test.SmackTestCase.parseURL	(	URL	): Returns true if the given URL was found and parsed without problems. The file provided by the URL must contain information useful for the test case configuration, such us, host and port of the server. 
org.jivesoftware.smack.test.util.SmackTestSuite: The SmackTestSuite takes care of initializing Smack for the unit tests. For example the Base64 encoder is configured.
org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown: Like ArrayBlockingQueue but with additional shutdown() and start methods. Will throw InterruptedException if Queue has been shutdown on take() and poll().  Based on ArrayBlockingQueue of OpenJDK by Doug Lea (who released ArrayBlockingQueue as public domain).
org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown.isShutdown	(	): Returns true if the queue is currently shut down.
org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown.put	(	E	): Inserts the specified element into this queue, waiting if necessary for space to become available.  This may throw an InterruptedException in two cases  If the queue was shut down. If the thread was was interrupted.  So you have to check which is the case, e.g. by calling isShutdown().
org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown.shutdown	(	): Shutdown the Queue. Will method currently waiting for a not full/empty condition will unblock (and usually throw a InterruptedException).
org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown.start	(	): Start the queue. Newly created instances will be started automatically, thus this only needs to be called after shutdown().
org.jivesoftware.smack.util.Async.ThrowingRunnable: Like Runnable, but allows the runOrThrow() method to throw an exception.  If the exception is an instance of RuntimeException, then it will be re-thrown, otherwise it will be simply logged.
org.jivesoftware.smack.util.Async.go	(	Runnable	): Creates a new thread with the given Runnable, marks it daemon, starts it and returns the started thread.
org.jivesoftware.smack.util.Async.go	(	Runnable	String	): Creates a new thread with the given Runnable, marks it daemon, sets the name, starts it and returns the started thread.
org.jivesoftware.smack.util.CacheTest: A test case for the Cache class.
org.jivesoftware.smack.util.DNSUtil: Utility class to perform DNS lookups for XMPP services.
org.jivesoftware.smack.util.DNSUtil.getDNSResolver	(	): Returns the current DNS resolved used to perform DNS lookups.
org.jivesoftware.smack.util.DNSUtil.getDaneProvider	(	): Returns the currently active DANE provider used when DANE is enabled.
org.jivesoftware.smack.util.DNSUtil.resolveDomain	(	String	DomainType	List	DnssecMode	): 
org.jivesoftware.smack.util.DNSUtil.resolveXMPPServerDomain	(	String	List	DnssecMode	): Returns a list of HostAddresses under which the specified XMPP server can be reached at for server-to-server communication. A DNS lookup for a SRV record in the form "_xmpp-server._tcp.example.com" is attempted, according to section 3.2.1 of RFC 6120. If that lookup fails , it's assumed that the XMPP server lives at the host resolved by a DNS lookup at the specified domain on the default port of 5269.  As an example, a lookup for "example.com" may return "im.example.com:5269". 
org.jivesoftware.smack.util.DNSUtil.resolveXMPPServiceDomain	(	String	List	DnssecMode	): Returns a list of HostAddresses under which the specified XMPP server can be reached at for client-to-server communication. A DNS lookup for a SRV record in the form "_xmpp-client._tcp.example.com" is attempted, according to section 3.2.1 of RFC 6120. If that lookup fails, it's assumed that the XMPP server lives at the host resolved by a DNS lookup at the specified domain on the default port of 5222.  As an example, a lookup for "example.com" may return "im.example.com:5269". 
org.jivesoftware.smack.util.DNSUtil.setDNSResolver	(	DNSResolver	): Set the DNS resolver that should be used to perform DNS lookups.
org.jivesoftware.smack.util.DNSUtil.setDaneProvider	(	SmackDaneProvider	): Set the DANE provider that should be used when DANE is enabled.
org.jivesoftware.smack.util.DNSUtil.setIdnaTransformer	(	StringTransformer	): Set the IDNA (Internationalizing Domain Names in Applications, RFC 3490) transformer.  You usually want to wrap 'java.net.IDN.toASCII()' into a StringTransformer here. 
org.jivesoftware.smack.util.DNSUtil.sortSRVRecords	(	List	): Sort a given list of SRVRecords as described in RFC 2782 Note that we follow the RFC with one exception. In a group of the same priority, only the first entry is calculated by random. The others are ore simply ordered by their priority.
org.jivesoftware.smack.util.EventManger: The event manager class is used to perform actions and wait for an event, which is usually caused by the action (or maybe never occurs).  Events are distinguished by an unique event key. They can produce an event result, which can simply be null.   The action is able to throw an exception. 
org.jivesoftware.smack.util.EventManger.performActionAndWaitForEvent	(	K	long	Callback	): Perform an action and wait for an event.  The event is signaled with signalEvent(). 
org.jivesoftware.smack.util.EventManger.signalEvent	(	K	R	): Signal an event and the event result.  This method will return false if the event was not created with performActionAndWaitForEvent(). 
org.jivesoftware.smack.util.FileUtils.getClassLoaders	(	): Returns default classloaders.
org.jivesoftware.smack.util.FileUtils.readFileOrThrow	(	File	): Reads the contents of a File.
org.jivesoftware.smack.util.LazyStringBuilder.getAsList	(	): Get the List of CharSequences representation of this instance. The list is unmodifiable. If the resulting String was already cached, a list with a single String entry will be returned.
org.jivesoftware.smack.util.MultiMap: A lightweight implementation of a MultiMap, that is a Map that is able to hold multiple values for every key.  This MultiMap uses a LinkedHashMap together with a ArrayList in order to keep the order of its entries. 
org.jivesoftware.smack.util.MultiMap.MultiMap	(	): Constructs a new MultiMap with a initial capacity of DEFAULT_MAP_SIZE.
org.jivesoftware.smack.util.MultiMap.MultiMap	(	int	): Constructs a new MultiMap.
org.jivesoftware.smack.util.MultiMap.getAll	(	Object	): Get all values for the given key. Returns the empty set if there are none.  Changes to the returned set will update the underlying MultiMap if the return set is not empty. 
org.jivesoftware.smack.util.MultiMap.getFirst	(	Object	): Get the first value for the given key, or null if there are no entries.
org.jivesoftware.smack.util.MultiMap.remove	(	Object	): Removes all mappings for the given key and returns the first value if there where mappings or null if not.
org.jivesoftware.smack.util.MultiMap.removeOne	(	Object	V	): Remove the mapping of the given key to the value.  Returns true if the mapping was removed and false if the mapping did not exist. 
org.jivesoftware.smack.util.MultiMap.values	(	): Returns a new list containing all values of this multi map.
org.jivesoftware.smack.util.NumberUtil.checkIfInUInt32Range	(	long	): Checks if the given long is within the range of an unsigned 32-bit integer, the XML type "xs:unsignedInt".
org.jivesoftware.smack.util.ObservableReader: An ObservableReader is a wrapper on a Reader that notifies to its listeners when reading character streams.
org.jivesoftware.smack.util.ObservableReader.addReaderListener	(	ReaderListener	): Adds a reader listener to this reader that will be notified when new strings are read.
org.jivesoftware.smack.util.ObservableReader.removeReaderListener	(	ReaderListener	): Removes a reader listener from this reader.
org.jivesoftware.smack.util.ObservableWriter: An ObservableWriter is a wrapper on a Writer that notifies to its listeners when writing to character streams.
org.jivesoftware.smack.util.ObservableWriter.addWriterListener	(	WriterListener	): Adds a writer listener to this writer that will be notified when new strings are sent.
org.jivesoftware.smack.util.ObservableWriter.notifyListeners	(	): Notify that a new string has been written.
org.jivesoftware.smack.util.ObservableWriter.removeWriterListener	(	WriterListener	): Removes a writer listener from this writer.
org.jivesoftware.smack.util.PacketParserUtils: Utility class that helps to parse packets. Any parsing packets method that must be shared between many clients must be placed in this utility class.
org.jivesoftware.smack.util.PacketParserUtils.newXmppParser	(	): Creates a new XmlPullParser suitable for parsing XMPP. This means in particular that FEATURE_PROCESS_NAMESPACES is enabled.  Note that not all XmlPullParser implementations will return a String on getText() if the parser is on START_TAG or END_TAG. So you must not rely on this behavior when using the parser. 
org.jivesoftware.smack.util.PacketParserUtils.newXmppParser	(	Reader	): Creates a new XmlPullParser suitable for parsing XMPP. This means in particular that FEATURE_PROCESS_NAMESPACES is enabled.  Note that not all XmlPullParser implementations will return a String on getText() if the parser is on START_TAG or END_TAG. So you must not rely on this behavior when using the parser. 
org.jivesoftware.smack.util.PacketParserUtils.parseCompressionFeature	(	XmlPullParser	): Parse the Compression Feature reported from the server.
org.jivesoftware.smack.util.PacketParserUtils.parseContent	(	XmlPullParser	): Returns the content of a element.  The parser must be positioned on the START_TAG of the element which content is going to get returned. If the current element is the empty element, then the empty string is returned. If it is a element which contains just text, then just the text is returned. If it contains nested elements (and text), then everything from the current opening tag to the corresponding closing tag of the same depth is returned as String.  Note that only the outermost namespace attributes ("xmlns") will be returned, not nested ones.
org.jivesoftware.smack.util.PacketParserUtils.parseContentDepth	(	XmlPullParser	int	boolean	): Returns the content from the current position of the parser up to the closing tag of the given depth. Note that only the outermost namespace attributes ("xmlns") will be returned, not nested ones, if fullNamespaces is false. If it is true, then namespaces of parent elements will be added to child elements that don't define a different namespace.  This method is able to parse the content with MX- and KXmlParser. KXmlParser does not support xml-roundtrip. i.e. return a String on getText() on START_TAG and END_TAG. We check for the XML_ROUNDTRIP feature. If it's not found we are required to work around this limitation, which results in only partial support for XML namespaces ("xmlns"): Only the outermost namespace of elements will be included in the resulting String, if fullNamespaces is set to false.   In particular Android's XmlPullParser does not support XML_ROUNDTRIP. 
org.jivesoftware.smack.util.PacketParserUtils.parseElement	(	XmlPullParser	): Returns the current element as string.  The parser must be positioned on START_TAG.  Note that only the outermost namespace attributes ("xmlns") will be returned, not nested ones.
org.jivesoftware.smack.util.PacketParserUtils.parseElementText	(	XmlPullParser	): Returns the textual content of an element as String. After this method returns the parser position will be END_TAG, following the established pull parser calling convention.  The parser must be positioned on a START_TAG of an element which MUST NOT contain Mixed Content (as defined in XML 3.2.2), or else an XmlPullParserException will be thrown.  This method is used for the parts where the XMPP specification requires elements that contain only text or are the empty element.
org.jivesoftware.smack.util.PacketParserUtils.parseError	(	XmlPullParser	): Parses error sub-packets.
org.jivesoftware.smack.util.PacketParserUtils.parseExtensionElement	(	String	String	XmlPullParser	): Parses an extension element.
org.jivesoftware.smack.util.PacketParserUtils.parseIQ	(	XmlPullParser	): Parses an IQ packet.
org.jivesoftware.smack.util.PacketParserUtils.parseMechanisms	(	XmlPullParser	): Parse the available SASL mechanisms reported from the server.
org.jivesoftware.smack.util.PacketParserUtils.parseMessage	(	XmlPullParser	): Parses a message packet.
org.jivesoftware.smack.util.PacketParserUtils.parsePacketExtension	(	String	String	XmlPullParser	): Parse an extension element.
org.jivesoftware.smack.util.PacketParserUtils.parsePresence	(	XmlPullParser	): Parses a presence packet.
org.jivesoftware.smack.util.PacketParserUtils.parseSASLFailure	(	XmlPullParser	): Parses SASL authentication error packets.
org.jivesoftware.smack.util.PacketParserUtils.parseStanza	(	XmlPullParser	): Tries to parse and return either a Message, IQ or Presence stanza. connection is optional and is used to return feature-not-implemented errors for unknown IQ stanzas.
org.jivesoftware.smack.util.PacketParserUtils.parseStreamError	(	XmlPullParser	): Parses stream error packets.
org.jivesoftware.smack.util.PacketParserUtilsTest.invalidMessageBodyContainingTagTest	(	): RFC6121 5.2.3 explicitly disallows mixed content in  elements. Make sure that we throw an exception if we encounter such an element.
org.jivesoftware.smack.util.PacketUtil.extensionElementFrom	(	Collection	String	String	): Get a extension element from a collection.
org.jivesoftware.smack.util.PacketUtil.packetExtensionfromCollection	(	Collection	String	String	): Get a extension element from a collection.
org.jivesoftware.smack.util.ParserUtils.getBooleanAttribute	(	XmlPullParser	String	): Get the boolean value of an argument.
org.jivesoftware.smack.util.ReaderListener: Interface that allows for implementing classes to listen for string reading events. Listeners are registered with ObservableReader objects.
org.jivesoftware.smack.util.ReaderListener.read	(	String	): Notification that the Reader has read a new string.
org.jivesoftware.smack.util.SHA1Test: A test case for the SHA1 class.
org.jivesoftware.smack.util.SHA1Test.isValidHash	(	String	): Returns true if the input string is valid md5 hash, false otherwise.
org.jivesoftware.smack.util.SmackExecutorThreadFactory: SmackExecutorThreadFactory creates daemon threads with a particular name. Note that you should not use anonymous inner classes for thread factories in order to prevent threads from leaking.
org.jivesoftware.smack.util.StringUtils: A collection of utility methods for String objects.
org.jivesoftware.smack.util.StringUtils.collectionToString	(	Collection	): Transform a collection of objects to a whitespace delimited String.
org.jivesoftware.smack.util.StringUtils.encodeHex	(	byte[]	): Encodes an array of bytes as String representation of hexadecimal.
org.jivesoftware.smack.util.StringUtils.escapeForXML	(	CharSequence	): Escape input for XML.
org.jivesoftware.smack.util.StringUtils.escapeForXml	(	CharSequence	): Escape input for XML.
org.jivesoftware.smack.util.StringUtils.escapeForXml	(	CharSequence	XmlEscapeMode	): Escapes all necessary characters in the CharSequence so that it can be used in an XML doc.
org.jivesoftware.smack.util.StringUtils.escapeForXmlAttribute	(	CharSequence	): Escape input for XML.
org.jivesoftware.smack.util.StringUtils.escapeForXmlAttributeApos	(	CharSequence	): Escape input for XML.  This is an optimized variant of escapeForXmlAttribute() for XML where the XML attribute is quoted using ''' (Apos). 
org.jivesoftware.smack.util.StringUtils.escapeForXmlText	(	CharSequence	): Escape input for XML.
org.jivesoftware.smack.util.StringUtils.hash	(	String	): Hashes a String using the SHA-1 algorithm and returns the result as a String of hexadecimal numbers. This method is synchronized to avoid excessive MessageDigest object creation. If calling this method becomes a bottleneck in your code, you may wish to maintain a pool of MessageDigest objects instead of using this method.  A hash is a one-way function -- that is, given an input, an output is easily computed. However, given the output, the input is almost impossible to compute. This is useful for passwords since we can store the hash and a hacker will then have a very hard time determining the original password.
org.jivesoftware.smack.util.StringUtils.insecureRandomString	(	int	): Returns a random String of numbers and letters (lower and upper case) of the specified length. The method uses the Random class that is built-in to Java which is suitable for low to medium grade security uses. This means that the output is only pseudo random, i.e., each number is mathematically generated so is not truly random. The specified length must be at least one. If not, the method will return null.
org.jivesoftware.smack.util.StringUtils.isEmpty	(	CharSequence	): Returns true if the given CharSequence is empty.
org.jivesoftware.smack.util.StringUtils.isNotEmpty	(	CharSequence	): Returns true if all given CharSequences are not empty.
org.jivesoftware.smack.util.StringUtils.isNullOrEmpty	(	CharSequence	): Returns true if all given CharSequences are either null or empty.
org.jivesoftware.smack.util.StringUtils.maybeToString	(	CharSequence	): Return the String representation of the given char sequence if it is not null.
org.jivesoftware.smack.util.StringUtils.toStringBuilder	(	Collection	String	): Transform a collection of objects to a delimited String.
org.jivesoftware.smack.util.StringUtilsTest: A test case for the StringUtils class.
org.jivesoftware.smack.util.TLSUtils.AcceptAllTrustManager: A X509TrustManager that doesn't validate X.509 certificates.  Connections that use this TrustManager will just be encrypted, without any guarantee that the counter part is actually the intended one. Man-in-the-Middle attacks will be possible, since any certificate presented by the attacker will be considered valid. 
org.jivesoftware.smack.util.TLSUtils.acceptAllCertificates	(	B	): Accept all TLS certificates.  Warning: Use with care. This method make the Connection use AcceptAllTrustManager and essentially invalidates all security guarantees provided by TLS. Only use this method if you understand the implications. 
org.jivesoftware.smack.util.TLSUtils.disableHostnameVerificationForTlsCertificates	(	B	): Disable the hostname verification of TLS certificates.  Warning: Use with care. This disables hostname verification of TLS certificates and essentially invalidates all security guarantees provided by TLS. Only use this method if you understand the implications. 
org.jivesoftware.smack.util.TLSUtils.getChannelBindingTlsServerEndPoint	(	SSLSession	): Get the channel binding data for the 'tls-server-end-point' channel binding type. This channel binding type is defined in RFC 5929 § 4.
org.jivesoftware.smack.util.TLSUtils.setSSLv3AndTLSOnly	(	B	): Enable only TLS and SSLv3. Connections created with the given ConnectionConfiguration will only support TLS and SSLv3.  According to the Encrypted XMPP Manifesto, TLSv1.2 shall be deployed, providing fallback support for SSLv3 and TLSv1.1. 
org.jivesoftware.smack.util.TLSUtils.setTLSOnly	(	B	): Enable only TLS. Connections created with the given ConnectionConfiguration will only support TLS.  According to the Encrypted XMPP Manifesto, TLSv1.2 shall be deployed, providing fallback support for SSLv3 and TLSv1.1. This method goes one step boyond and upgrades the handshake to use TLSv1 or better. This method requires the underlying OS to support all of TLSv1.2 , 1.1 and 1.0. 
org.jivesoftware.smack.util.TypedCloneable: An extended version of java.lang.Cloneable, which defines a generic clone() method.
org.jivesoftware.smack.util.TypedCloneable.clone	(	): Clone this instance.
org.jivesoftware.smack.util.WriterListener: Interface that allows for implementing classes to listen for string writing events. Listeners are registered with ObservableWriter objects.
org.jivesoftware.smack.util.WriterListener.write	(	String	): Notification that the Writer has written a new string.
org.jivesoftware.smack.util.XMPPErrorTest.test404	(	): Check the parser with an xml with the 404 error.
org.jivesoftware.smack.util.XMPPErrorTest.testCancel	(	): Check the parser with an xml with the 404 error.
org.jivesoftware.smack.util.XMPPErrorTest.testCancelWithMessage	(	): Check the parser with an xml with the 404 error.
org.jivesoftware.smack.util.XMPPErrorTest.testCancelWithMessageAndApplicationError	(	): Check the parser with an xml with the 404 error.
org.jivesoftware.smack.util.XMPPErrorTest.testLocalErrorCreation	(	): Check the creation of a new xmppError locally.
org.jivesoftware.smack.util.XMPPErrorTest.testLocalErrorWithCommentCreation	(	): Check the creation of a new xmppError locally.
org.jivesoftware.smack.util.XMPPErrorTest.testUserDefinedErrorWithCommentCreation	(	): Check the creation of a new xmppError locally where there is not a default defined.
org.jivesoftware.smack.util.XmlStringBuilder.attribute	(	String	Date	): Add a new attribute to this builder, with the java.util.Date instance as its value, which will get formated with formatXEP0082Date().
org.jivesoftware.smack.util.XmlStringBuilder.attribute	(	String	String	): Does nothing if value is null.
org.jivesoftware.smack.util.XmlStringBuilder.element	(	String	CharSequence	): Add a new element to this builder.
org.jivesoftware.smack.util.XmlStringBuilder.element	(	String	Date	): Add a new element to this builder, with the java.util.Date instance as its content, which will get formated with formatXEP0082Date().
org.jivesoftware.smack.util.XmlStringBuilder.element	(	String	String	): Add a new element to this builder.
org.jivesoftware.smack.util.XmlStringBuilder.optAttribute	(	String	Date	): Add a new attribute to this builder, with the java.util.Date instance as its value, which will get formated with formatXEP0082Date() if java.util.Date instance is not null.
org.jivesoftware.smack.util.XmlStringBuilder.optElement	(	String	Date	): Add a new element to this builder, with the java.util.Date instance as its content, which will get formated with formatXEP0082Date() if java.util.Date instance is not null.
org.jivesoftware.smack.util.XmlStringBuilder.optIntAttribute	(	String	int	): Add the given attribute if value => 0.
org.jivesoftware.smack.util.XmlStringBuilder.optLongAttribute	(	String	Long	): Add the given attribute if value not null and value => 0.
org.jivesoftware.smack.util.XmlStringBuilder.rightAngelBracket	(	): Add a right angle bracket '>'.
org.jivesoftware.smack.util.XmlStringBuilder.rightAngleBracket	(	): Add a right angle bracket '>'.
org.jivesoftware.smack.util.XmlStringBuilder.write	(	Writer	): Write the contents of this XmlStringBuilder to a Writer. This will write the single parts one-by-one, avoiding allocation of a big continuous memory block holding the XmlStringBuilder contents.
org.jivesoftware.smack.util.dns.DNSResolver: Implementations of this interface define a class that is capable of resolving DNS addresses.
org.jivesoftware.smack.util.dns.DNSResolver.lookupSRVRecords	(	String	List	DnssecMode	): Gets a list of service records for the specified service.
org.jivesoftware.smack.util.dns.HostAddress.HostAddress	(	String	Exception	): Constructs a new failed HostAddress. This constructor is usually used when the DNS resolution of the domain name failed for some reason.
org.jivesoftware.smack.util.dns.HostAddress.HostAddress	(	String	int	List	): Creates a new HostAddress with the given FQDN.
org.jivesoftware.smack.util.dns.HostAddress.getExceptions	(	): Retrieve the Exception that caused a connection failure to this HostAddress. Every HostAddress found in ConnectionException will have an Exception set, which can be retrieved with this method.
org.jivesoftware.smack.util.dns.SRVRecord: A DNS SRV RR.
org.jivesoftware.smack.util.dns.SRVRecord.SRVRecord	(	String	int	int	int	List	): SRV Record constructor.
org.jivesoftware.smack.util.dns.SmackDaneProvider: Implementations of this interface define a class that is capable of enabling DANE on a connection.
org.jivesoftware.smack.util.dns.SmackDaneVerifier: Implementations of this interface define a class that is capable of enabling DANE on a connection.
org.jivesoftware.smack.util.dns.dnsjava.DNSJavaResolver: This implementation uses the dnsjava implementation for resolving DNS addresses.
org.jivesoftware.smack.util.dns.javax.JavaxResolver: A DNS resolver (mostly for SRV records), which makes use of the API provided in the javax.* namespace.
org.jivesoftware.smack.util.dns.minidns.MiniDnsResolver: This implementation uses the MiniDNS implementation for resolving DNS addresses.
org.jivesoftware.smack.util.stringencoder.Base32: Base32 string encoding is useful for when filenames case-insensitive filesystems are encoded. Base32 representation takes roughly 20% more space then Base64.
org.jivesoftware.smack.util.stringencoder.Base64Test.testDecodeBase64	(	): This method tests 2 StringUtil methods - decodeBase64(String) and decodeBase64(byte[]).
org.jivesoftware.smack.util.stringencoder.Base64Test.testEncodeBase64	(	): This method tests 2 StringUtil methods - encodeBase64(String) and encodeBase64(byte[]).
org.jivesoftware.smack.util.stringencoder.StringEncoder: An interface for String encoder.
org.jivesoftware.smack.util.stringencoder.StringEncoder.decode	(	String	): Decodes an string back to it's initial representation.
org.jivesoftware.smack.util.stringencoder.StringEncoder.encode	(	String	): Encodes an string to another representation.
org.jivesoftware.smack.util.stringencoder.android.AndroidBase64Encoder: A Base 64 encoding implementation based on android.util.Base64.
org.jivesoftware.smack.util.stringencoder.java7.Base64: Encodes and decodes to and from Base64 notation.  This code was obtained from http://iharder.net/base64 
org.jivesoftware.smack.util.stringencoder.java7.Base64.Base64	(	): Defeats instantiation. 
org.jivesoftware.smack.util.stringencoder.java7.Base64.InputStream: A Base64.InputStream will read data from another java.io.InputStream, given in the constructor, and encode/decode to/from Base64 notation on the fly.
org.jivesoftware.smack.util.stringencoder.java7.Base64.InputStream.InputStream	(	java.io.InputStream	): Constructs a Base64.InputStream in DECODE mode.
org.jivesoftware.smack.util.stringencoder.java7.Base64.InputStream.InputStream	(	java.io.InputStream	int	): Constructs a Base64.InputStream in either ENCODE or DECODE mode.  Valid options: ENCODE or DECODE: Encode or Decode as data is read. DONT_BREAK_LINES: don't break lines at 76 characters (only meaningful when encoding) Note: Technically, this makes your encoding non-compliant.   Example: new Base64.InputStream( in, Base64.DECODE )
org.jivesoftware.smack.util.stringencoder.java7.Base64.InputStream.read	(	): Reads enough of the input stream to convert to/from Base64 and returns the next byte.
org.jivesoftware.smack.util.stringencoder.java7.Base64.InputStream.read	(	byte[]	int	int	): Calls read() repeatedly until the end of stream is reached or len bytes are read. Returns number of bytes read into array or -1 if end of stream is encountered.
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream: A Base64.OutputStream will write data to another java.io.OutputStream, given in the constructor, and encode/decode to/from Base64 notation on the fly.
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream.OutputStream	(	java.io.OutputStream	): Constructs a Base64.OutputStream in ENCODE mode.
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream.OutputStream	(	java.io.OutputStream	int	): Constructs a Base64.OutputStream in either ENCODE or DECODE mode.  Valid options: ENCODE or DECODE: Encode or Decode as data is read. DONT_BREAK_LINES: don't break lines at 76 characters (only meaningful when encoding) Note: Technically, this makes your encoding non-compliant.   Example: new Base64.OutputStream( out, Base64.ENCODE )
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream.close	(	): Flushes and closes (I think, in the superclass) the stream.
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream.flushBase64	(	): Method added by PHIL. [Thanks, PHIL. -Rob] This pads the buffer without closing the stream.
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream.resumeEncoding	(	): Resumes encoding of the stream. May be helpful if you need to embed a piece of base640-encoded data in a stream.
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream.suspendEncoding	(	): Suspends encoding of the stream. May be helpful if you need to embed a piece of base640-encoded data in a stream.
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream.write	(	byte[]	int	int	): Calls write() repeatedly until len bytes are written.
org.jivesoftware.smack.util.stringencoder.java7.Base64.OutputStream.write	(	int	): Writes the byte to the output stream after converting to/from Base64 notation. When encoding, bytes are buffered three at a time before the output stream actually gets a write() call. When decoding, bytes are buffered four at a time.
org.jivesoftware.smack.util.stringencoder.java7.Base64.decode	(	String	): Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.
org.jivesoftware.smack.util.stringencoder.java7.Base64.decode	(	String	int	): Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.
org.jivesoftware.smack.util.stringencoder.java7.Base64.decode	(	byte[]	int	int	int	): Very low-level access to decoding ASCII characters in the form of a byte array. Does not support automatically gunzipping or any other "fancy" features.
org.jivesoftware.smack.util.stringencoder.java7.Base64.decode4to3	(	byte[]	int	byte[]	int	int	): Decodes four bytes from array source and writes the resulting bytes (up to three of them) to destination. The source and destination arrays can be manipulated anywhere along their length by specifying srcOffset and destOffset. This method does not check to make sure your arrays are large enough to accomodate srcOffset + 4 for the source array or destOffset + 3 for the destination array. This method returns the actual number of bytes that were converted from the Base64 encoding. This is the lowest level of the decoding methods with all possible parameters.
org.jivesoftware.smack.util.stringencoder.java7.Base64.decodeFileToFile	(	String	String	): Reads infile and decodes it to outfile.
org.jivesoftware.smack.util.stringencoder.java7.Base64.decodeFromFile	(	String	): Convenience method for reading a base64-encoded file and decoding it.
org.jivesoftware.smack.util.stringencoder.java7.Base64.decodeToFile	(	String	String	): Convenience method for decoding data to a file.
org.jivesoftware.smack.util.stringencoder.java7.Base64.decodeToObject	(	String	): Attempts to decode Base64 data and deserialize a Java Object within. Returns null if there was an error.
org.jivesoftware.smack.util.stringencoder.java7.Base64.encode3to4	(	byte[]	byte[]	int	int	): Encodes up to the first three bytes of array threeBytes and returns a four-byte array in Base64 notation. The actual number of significant bytes in your array is given by numSigBytes. The array threeBytes needs only be as big as numSigBytes. Code can reuse a byte array by passing a four-byte array as b4.
org.jivesoftware.smack.util.stringencoder.java7.Base64.encode3to4	(	byte[]	int	int	byte[]	int	int	): Encodes up to three bytes of the array source and writes the resulting four Base64 bytes to destination. The source and destination arrays can be manipulated anywhere along their length by specifying srcOffset and destOffset. This method does not check to make sure your arrays are large enough to accomodate srcOffset + 3 for the source array or destOffset + 4 for the destination array. The actual number of significant bytes in your array is given by numSigBytes. This is the lowest level of the encoding methods with all possible parameters.
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeBytes	(	byte[]	): Encodes a byte array into Base64 notation. Does not GZip-compress data.
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeBytes	(	byte[]	int	): Encodes a byte array into Base64 notation.  Valid options: GZIP: gzip-compresses object before encoding it. DONT_BREAK_LINES: don't break lines at 76 characters Note: Technically, this makes your encoding non-compliant.   Example: encodeBytes( myData, Base64.GZIP ) or  Example: encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeBytes	(	byte[]	int	int	): Encodes a byte array into Base64 notation. Does not GZip-compress data.
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeBytes	(	byte[]	int	int	int	): Encodes a byte array into Base64 notation.  Valid options: GZIP: gzip-compresses object before encoding it. DONT_BREAK_LINES: don't break lines at 76 characters Note: Technically, this makes your encoding non-compliant.   Example: encodeBytes( myData, Base64.GZIP ) or  Example: encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeFileToFile	(	String	String	): Reads infile and encodes it to outfile.
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeFromFile	(	String	): Convenience method for reading a binary file and base64-encoding it.
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeObject	(	java.io.Serializable	): Serializes an object and returns the Base64-encoded version of that serialized object. If the object cannot be serialized or there is another error, the method will return null. The object is not GZip-compressed before being encoded.
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeObject	(	java.io.Serializable	int	): Serializes an object and returns the Base64-encoded version of that serialized object. If the object cannot be serialized or there is another error, the method will return null.  Valid options: GZIP: gzip-compresses object before encoding it. DONT_BREAK_LINES: don't break lines at 76 characters Note: Technically, this makes your encoding non-compliant.   Example: encodeObject( myObj, Base64.GZIP ) or  Example: encodeObject( myObj, Base64.GZIP | Base64.DONT_BREAK_LINES )
org.jivesoftware.smack.util.stringencoder.java7.Base64.encodeToFile	(	byte[]	String	): Convenience method for encoding data to a file.
org.jivesoftware.smack.util.stringencoder.java7.Base64.getAlphabet	(	int	): Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URLSAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
org.jivesoftware.smack.util.stringencoder.java7.Base64.getDecodabet	(	int	): Returns one of the _SOMETHING_DECODABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
org.jivesoftware.smack.util.stringencoder.java7.Java7Base64Encoder: A Base 64 encoding implementation.
org.jivesoftware.smack.util.stringencoder.java7.Java7Base64UrlSafeEncoder: A Base 64 encoding implementation that generates filename and Url safe encodings.  Note: This does NOT produce standard Base 64 encodings, but a variant as defined in Section 4 of RFC3548: http://www.faqs.org/rfcs/rfc3548.html. 
org.jivesoftware.smackx.CompressionTest: Ensure that stream compression (XEP-138) is correctly supported by Smack.
org.jivesoftware.smackx.CompressionTest.setUp	(	): Just create an account.
org.jivesoftware.smackx.CompressionTest.tearDown	(	): Deletes the created account for the test.
org.jivesoftware.smackx.CompressionTest.testSuccessCompression	(	): Test that stream compression works fine. It is assumed that the server supports and has stream compression enabled.
org.jivesoftware.smackx.GroupChatInvitationTest.GroupChatInvitationTest	(	String	): Constructor for GroupChatInvitationTest.
org.jivesoftware.smackx.LastActivityManagerTest.testLastLoggedOut	(	): This is a test to check if a LastActivity request for last logged out lapsed time is answered and correct
org.jivesoftware.smackx.LastActivityManagerTest.testOnline	(	): This is a test to check if a LastActivity request for idle time is answered and correct.
org.jivesoftware.smackx.LastActivityManagerTest.testOnlinePermisionDenied	(	): This is a test to check if a denied LastActivity response is handled correctly.
org.jivesoftware.smackx.LastActivityManagerTest.testServerUptime	(	): This is a test to check if a LastActivity request for server uptime is answered and correct
org.jivesoftware.smackx.MessageEventManagerTest: Test the MessageEvent extension using the high level API.
org.jivesoftware.smackx.MessageEventManagerTest.testRequestsAndNotifications	(	): High level API test. 1. User_1 will send a message to user_2 requesting to be notified when any of these events occurs: offline, composing, displayed or delivered 2. User_2 will receive the message 3. User_2 will simulate that the message was displayed 4. User_2 will simulate that he/she is composing a reply 5. User_2 will simulate that he/she has cancelled the reply
org.jivesoftware.smackx.MessageEventManagerTest.testSendMessageEventRequest	(	): High level API test. This is a simple test to use with an XMPP client and check if the client receives the message 1. User_1 will send a message to user_2 requesting to be notified when any of these events occurs: offline, composing, displayed or delivered 
org.jivesoftware.smackx.MessageEventManagerTest.testSendMessageEventRequestAndDisplayNotifications	(	): High level API test. This is a simple test to use with an XMPP client, check if the client receives the message and display in the console any notification 1. User_1 will send a message to user_2 requesting to be notified when any of these events occurs: offline, composing, displayed or delivered 2. User_2 will use an XMPP client (like Exodus) to display the message and compose a reply 3. User_1 will display any notification that receives
org.jivesoftware.smackx.MessageEventTests: Test suite that runs all the Message Event extension tests
org.jivesoftware.smackx.MultipleRecipientManagerTest: Tests that XEP-33 support in Smack is correct.
org.jivesoftware.smackx.MultipleRecipientManagerTest.testNoReply	(	): Ensures that replying is not allowed when disabled.
org.jivesoftware.smackx.MultipleRecipientManagerTest.testReplying	(	): Ensures that replying to packets is ok.
org.jivesoftware.smackx.MultipleRecipientManagerTest.testSending	(	): Ensures that sending and receiving of packets is ok.
org.jivesoftware.smackx.OfflineMessageManagerTest: Tests handling of offline messaging using OfflineMessageManager. This server requires the server to support XEP-0013: Flexible Offline Message Retrieval.
org.jivesoftware.smackx.OfflineMessageManagerTest.testFetchAndPurge	(	): While user2 is connected but unavailable, user1 sends 2 messages to user1. User2 then performs some "Flexible Offline Message Retrieval" by fetching all the offline messages and then removing all the offline messages.
org.jivesoftware.smackx.OfflineMessageManagerTest.testReadAndDelete	(	): While user2 is connected but unavailable, user1 sends 2 messages to user1. User2 then performs some "Flexible Offline Message Retrieval" checking the number of offline messages, retriving the headers, then the real messages of the headers and finally removing the loaded messages.
org.jivesoftware.smackx.RosterExchangeManagerTest: Test the Roster Exchange extension using the high level API
org.jivesoftware.smackx.RosterExchangeManagerTest.RosterExchangeManagerTest	(	String	): Constructor for RosterExchangeManagerTest.
org.jivesoftware.smackx.RosterExchangeManagerTest.testSendAndAcceptRoster	(	): High level API test. 1. User_1 will send his/her roster to user_2 2. User_2 will automatically add the entries that receives to his/her roster in the corresponding group 3. User_1 will wait several seconds for an ACK from user_2, if none is received then something is wrong
org.jivesoftware.smackx.RosterExchangeManagerTest.testSendAndReceiveRoster	(	): High level API test. 1. User_1 will send his/her roster to user_2 2. User_2 will receive the entries and iterate over them to check if everything is fine 3. User_1 will wait several seconds for an ACK from user_2, if none is received then something is wrong
org.jivesoftware.smackx.RosterExchangeManagerTest.testSendRoster	(	): High level API test. This is a simple test to use with an XMPP client and check if the client receives user1's roster 1. User_1 will send his/her roster to user_2
org.jivesoftware.smackx.RosterExchangeManagerTest.testSendRosterGroup	(	): High level API test. This is a simple test to use with an XMPP client and check if the client receives user1's roster groups 1. User_1 will send his/her RosterGroups to user_2
org.jivesoftware.smackx.RosterExchangeTests: Test suite that runs all the Roster Exchange extension tests
org.jivesoftware.smackx.ServiceDiscoveryManagerTest: Tests the service discovery functionality.
org.jivesoftware.smackx.ServiceDiscoveryManagerTest.getMaxConnections	(	): Tests publishing items to another entity.
org.jivesoftware.smackx.ServiceDiscoveryManagerTest.testDiscoverPublishItemsSupport	(	): Tests support for publishing items to another entity.
org.jivesoftware.smackx.ServiceDiscoveryManagerTest.testInfoWithNode	(	): Tests that ensures that Smack answers a 404 error when the disco#info includes a node.
org.jivesoftware.smackx.ServiceDiscoveryManagerTest.testSmackInfo	(	): Tests info discovery of a Smack client. 
org.jivesoftware.smackx.ServiceDiscoveryManagerTest.testXHTMLFeature	(	): Tests service discovery of XHTML support. 
org.jivesoftware.smackx.SharedGroupsTest: Test cases for getting the shared groups of a user. Important note: This functionality is not part of the XMPP spec and it will only work with Wildfire.
org.jivesoftware.smackx.VCardTest: Created by IntelliJ IDEA. User: Gaston Date: Jun 18, 2005 Time: 1:29:30 AM To change this template use File | Settings | File Templates.
org.jivesoftware.smackx.XHTMLManagerTest: Test the XHTML extension using the high level API
org.jivesoftware.smackx.XHTMLManagerTest.XHTMLManagerTest	(	String	): Constructor for XHTMLManagerTest.
org.jivesoftware.smackx.XHTMLManagerTest.testSendComplexXHTMLMessageAndDisplayReceivedXHTMLMessage	(	): Low level API test. Test a message with two XHTML bodies and several XHTML tags. 1. User_1 will send a message with XHTML to user_2 2. User_2 will receive the message and iterate over the XHTML bodies to check if everything is fine 3. User_1 will wait several seconds for an ACK from user_2, if none is received then something is wrong
org.jivesoftware.smackx.XHTMLManagerTest.testSendSimpleXHTMLMessage	(	): High level API test. This is a simple test to use with an XMPP client and check if the client receives the message 1. User_1 will send a message with formatted text (XHTML) to user_2
org.jivesoftware.smackx.XHTMLManagerTest.testSendSimpleXHTMLMessageAndDisplayReceivedXHTMLMessage	(	): High level API test. 1. User_1 will send a message with XHTML to user_2 2. User_2 will receive the message and iterate over the XHTML bodies to check if everything is fine 3. User_1 will wait several seconds for an ACK from user_2, if none is received then something is wrong
org.jivesoftware.smackx.XHTMLSupportTests: Test suite that runs all the XHTML support tests
org.jivesoftware.smackx.address.MultipleRecipientInfo: MultipleRecipientInfo keeps information about the multiple recipients extension included in a received packet. Among the information we can find the list of TO and CC addresses.
org.jivesoftware.smackx.address.MultipleRecipientInfo.getCCAddresses	(	): Returns the list of org.jivesoftware.smackx.address.packet.MultipleAddresses.Address that were the secondary recipients of the packet.
org.jivesoftware.smackx.address.MultipleRecipientInfo.getReplyAddress	(	): Returns the address to which all replies are requested to be sent or null if no specific address was provided. When no specific address was provided then the reply can be sent to any or all recipients.
org.jivesoftware.smackx.address.MultipleRecipientInfo.getReplyRoom	(	): Returns the JID of a MUC room to which responses should be sent or null if no specific address was provided. When no specific address was provided then the reply can be sent to any or all recipients. Otherwise, the user should join the specified room and send the reply to the room.
org.jivesoftware.smackx.address.MultipleRecipientInfo.getTOAddresses	(	): Returns the list of org.jivesoftware.smackx.address.packet.MultipleAddresses.Address that were the primary recipients of the packet.
org.jivesoftware.smackx.address.MultipleRecipientInfo.shouldNotReply	(	): Returns true if the received stanza(/packet) should not be replied. Use reply() to send replies. 
org.jivesoftware.smackx.address.MultipleRecipientManager: A MultipleRecipientManager allows to send packets to multiple recipients by making use of XEP-33: Extended Stanza Addressing. It also allows to send replies to packets that were sent to multiple recipients.
org.jivesoftware.smackx.address.MultipleRecipientManager.PacketCopy: Stanza(/Packet) that holds the XML stanza to send. This class is useful when the same packet is needed to be sent to different recipients. Since using the same stanza(/packet) is not possible (i.e. cannot change the TO address of a queues stanza(/packet) to be sent) then this class was created to keep the XML stanza to send.
org.jivesoftware.smackx.address.MultipleRecipientManager.PacketCopy.PacketCopy	(	CharSequence	): Create a copy of a stanza(/packet) with the text to send. The passed text must be a valid text to send to the server, no validation will be done on the passed text.
org.jivesoftware.smackx.address.MultipleRecipientManager.getMultipleRecipienServiceAddress	(	XMPPConnection	): Returns the address of the multiple recipients service. To obtain such address service discovery is going to be used on the connected server and if none was found then another attempt will be tried on the server items. The discovered information is going to be cached for 24 hours.
org.jivesoftware.smackx.address.MultipleRecipientManager.getMultipleRecipientInfo	(	Stanza	): Returns the MultipleRecipientInfo contained in the specified stanza(/packet) or null if none was found. Only packets sent to multiple recipients will contain such information.
org.jivesoftware.smackx.address.MultipleRecipientManager.reply	(	XMPPConnection	Message	Message	): Sends a reply to a previously received stanza(/packet) that was sent to multiple recipients. Before attempting to send the reply message some checkings are performed. If any of those checkings fail then an XMPPException is going to be thrown with the specific error detail.
org.jivesoftware.smackx.address.MultipleRecipientManager.send	(	XMPPConnection	Stanza	Collection	Collection	Collection	): Sends the specified stanza(/packet) to the collection of specified recipients using the specified connection. If the server has support for XEP-33 then only one stanza(/packet) is going to be sent to the server with the multiple recipient instructions. However, if XEP-33 is not supported by the server then the client is going to send the stanza(/packet) to each recipient.
org.jivesoftware.smackx.address.MultipleRecipientManager.send	(	XMPPConnection	Stanza	Collection	Collection	Collection	Jid	Jid	boolean	): Sends the specified stanza(/packet) to the collection of specified recipients using the specified connection. If the server has support for XEP-33 then only one stanza(/packet) is going to be sent to the server with the multiple recipient instructions. However, if XEP-33 is not supported by the server then the client is going to send the stanza(/packet) to each recipient.
org.jivesoftware.smackx.address.packet.MultipleAddresses: Stanza(/Packet) extension that contains the list of addresses that a stanza(/packet) should be sent or was sent.
org.jivesoftware.smackx.address.packet.MultipleAddresses.addAddress	(	Type	Jid	String	String	boolean	String	): Adds a new address to which the stanza(/packet) is going to be sent or was sent.
org.jivesoftware.smackx.address.packet.MultipleAddresses.getAddressesOfType	(	Type	): Returns the list of addresses that matches the specified type. Examples of address type are: TO, CC, BCC, etc..
org.jivesoftware.smackx.address.packet.MultipleAddresses.setNoReply	(	): Indicate that the stanza(/packet) being sent should not be replied.
org.jivesoftware.smackx.address.provider.MultipleAddressesProvider: The MultipleAddressesProvider parses MultipleAddresses packets.
org.jivesoftware.smackx.amp.AMPDeliverCondition.AMPDeliverCondition	(	Value	): Create new amp deliver condition with value setted to one of defined by XEP-0079. See http://xmpp.org/extensions/xep-0079.html#conditions-def-deliver
org.jivesoftware.smackx.amp.AMPDeliverCondition.isSupported	(	XMPPConnection	): Check if server supports deliver condition.
org.jivesoftware.smackx.amp.AMPExpireAtCondition.AMPExpireAtCondition	(	Date	): Create new expire-at amp condition with value setted as XEP-0082 formatted date.
org.jivesoftware.smackx.amp.AMPExpireAtCondition.AMPExpireAtCondition	(	String	): Create new expire-at amp condition with defined value.
org.jivesoftware.smackx.amp.AMPExpireAtCondition.isSupported	(	XMPPConnection	): Check if server supports expire-at condition.
org.jivesoftware.smackx.amp.AMPManager: Manages AMP stanzas within messages. A AMPManager provides a high level access to get and set AMP rules to messages. See http://xmpp.org/extensions/xep-0079.html for AMP extension details
org.jivesoftware.smackx.amp.AMPManager.isActionSupported	(	XMPPConnection	AMPExtension.Action	): Check if server supports specified action.
org.jivesoftware.smackx.amp.AMPManager.isConditionSupported	(	XMPPConnection	String	): Check if server supports specified condition.
org.jivesoftware.smackx.amp.AMPManager.isServiceEnabled	(	XMPPConnection	): Returns true if the AMP support is enabled for the given connection.
org.jivesoftware.smackx.amp.AMPManager.setServiceEnabled	(	XMPPConnection	boolean	): Enables or disables the AMP support on a given connection. Before starting to send AMP messages to a user, check that the user can handle XHTML messages. Enable the AMP support to indicate that this client handles XHTML messages.
org.jivesoftware.smackx.amp.AMPMatchResourceCondition.AMPMatchResourceCondition	(	Value	): Create new amp match-resource condition with value setted to one of defined by XEP-0079. See http://xmpp.org/extensions/xep-0079.html#conditions-def-match
org.jivesoftware.smackx.amp.AMPMatchResourceCondition.isSupported	(	XMPPConnection	): Check if server supports match-resource condition.
org.jivesoftware.smackx.amp.packet.AMPExtension.AMPExtension	(	): Create a new amp request extension to be used with outgoing message.
org.jivesoftware.smackx.amp.packet.AMPExtension.AMPExtension	(	String	String	Status	): Create a new AMPExtension instance with defined from, to and status attributes. Used to create incoming packets.
org.jivesoftware.smackx.amp.packet.AMPExtension.Condition: Interface for defining XEP-0079 Conditions and their values.
org.jivesoftware.smackx.amp.packet.AMPExtension.Rule: XEP-0079 Rule element. Defines AMP Rule parameters. Can be added to AMPExtension.
org.jivesoftware.smackx.amp.packet.AMPExtension.Rule.Rule	(	Action	Condition	): Create a new amp rule with specified action and condition. Value will be taken from condition argument
org.jivesoftware.smackx.amp.packet.AMPExtension.addRule	(	Rule	): Adds a rule to the amp element. Amp can have any number of rules.
org.jivesoftware.smackx.amp.packet.AMPExtension.getElementName	(	): Returns the XML element name of the extension sub-packet root element. Always returns "amp"
org.jivesoftware.smackx.amp.packet.AMPExtension.getFrom	(	): Get the JID that triggered this AMP callback.
org.jivesoftware.smackx.amp.packet.AMPExtension.getNamespace	(	): Returns the XML namespace of the extension sub-packet root element. According the specification the namespace is always "http://jabber.org/protocol/xhtml-im"
org.jivesoftware.smackx.amp.packet.AMPExtension.getRules	(	): Returns a unmodifiable List of the rules in the packet.
org.jivesoftware.smackx.amp.packet.AMPExtension.getRulesCount	(	): Returns a count of the rules in the AMP packet.
org.jivesoftware.smackx.amp.packet.AMPExtension.getStatus	(	): Status of this amp notification.
org.jivesoftware.smackx.amp.packet.AMPExtension.getTo	(	): Get the receiver of this AMP receipt.
org.jivesoftware.smackx.amp.packet.AMPExtension.isPerHop	(	): Returns true is this ruleset is "per-hop".
org.jivesoftware.smackx.amp.packet.AMPExtension.setPerHop	(	boolean	): Sets this amp ruleset to be "per-hop".
org.jivesoftware.smackx.amp.packet.AMPExtension.toXML	(	): Returns the XML representation of a XHTML extension according the specification.
org.jivesoftware.smackx.amp.provider.AMPExtensionProvider.parse	(	XmlPullParser	int	): Parses a AMPExtension stanza(/packet) (extension sub-packet).
org.jivesoftware.smackx.attention.packet.AttentionExtension: A PacketExtension that implements XEP-0224: Attention This extension is expected to be added to message stanzas of type 'headline.' Please refer to the XEP for more implementation guidelines.
org.jivesoftware.smackx.attention.packet.AttentionExtension.Provider: A ExtensionElementProvider for the AttentionExtension. As Attention elements have no state/information other than the element name and namespace, this implementation simply returns new instances of AttentionExtension.
org.jivesoftware.smackx.blocking.BlockingCommandManager: Blocking command manager class.
org.jivesoftware.smackx.blocking.BlockingCommandManager.blockContacts	(	List	): Block contacts.
org.jivesoftware.smackx.blocking.BlockingCommandManager.getBlockList	(	): Returns the block list.
org.jivesoftware.smackx.blocking.BlockingCommandManager.getInstanceFor	(	XMPPConnection	): Get the singleton instance of BlockingCommandManager.
org.jivesoftware.smackx.blocking.BlockingCommandManager.isSupportedByServer	(	): Returns true if Blocking Command is supported by the server.
org.jivesoftware.smackx.blocking.BlockingCommandManager.unblockAll	(	): Unblock all.
org.jivesoftware.smackx.blocking.BlockingCommandManager.unblockContacts	(	List	): Unblock contacts.
org.jivesoftware.smackx.blocking.element.BlockContactsIQ: Block contact IQ class.
org.jivesoftware.smackx.blocking.element.BlockContactsIQ.BlockContactsIQ	(	List	): Block list IQ constructor.
org.jivesoftware.smackx.blocking.element.BlockContactsIQ.getJids	(	): Get the JID.
org.jivesoftware.smackx.blocking.element.BlockListIQ: Block list IQ class.
org.jivesoftware.smackx.blocking.element.BlockListIQ.BlockListIQ	(	): Block list IQ constructor.
org.jivesoftware.smackx.blocking.element.BlockListIQ.BlockListIQ	(	List	): Block list IQ constructor.
org.jivesoftware.smackx.blocking.element.BlockListIQ.getBlockedJids	(	): Get the JIDs as unmodifiable list.
org.jivesoftware.smackx.blocking.element.BlockListIQ.getBlockedJidsCopy	(	): Get a copy of the blocked list JIDs. This copy is modifiable.
org.jivesoftware.smackx.blocking.element.BlockedErrorExtension: Blocked error extension class.
org.jivesoftware.smackx.blocking.element.BlockedErrorExtension.isInside	(	Message	): Check if a message contains a BlockedErrorExtension, which means that a message was blocked because the JID blocked the sender, and that was reflected back as an error message.
org.jivesoftware.smackx.blocking.element.UnblockContactsIQ: Unblock contact IQ class.
org.jivesoftware.smackx.blocking.element.UnblockContactsIQ.UnblockContactsIQ	(	): Constructs a new unblock IQ which will unblock all JIDs. 
org.jivesoftware.smackx.blocking.element.UnblockContactsIQ.UnblockContactsIQ	(	List	): Unblock contacts IQ constructor.
org.jivesoftware.smackx.blocking.element.UnblockContactsIQ.getJids	(	): Get the JIDs. This may return null, which means that all JIDs should be or where unblocked.
org.jivesoftware.smackx.blocking.provider.BlockContactsIQProvider: Block contact IQ provider class.
org.jivesoftware.smackx.blocking.provider.BlockListIQProvider: Block list IQ provider class.
org.jivesoftware.smackx.blocking.provider.BlockedErrorExtensionProvider: Blocked error extension class.
org.jivesoftware.smackx.blocking.provider.UnblockContactsIQProvider: Unblock contact IQ provider class.
org.jivesoftware.smackx.bob.BoBData: Bits of Binary data class.
org.jivesoftware.smackx.bob.BoBData.BoBData	(	String	byte[]	int	): BoB data constructor.
org.jivesoftware.smackx.bob.BoBData.getContent	(	): Get the content.
org.jivesoftware.smackx.bob.BoBData.getContentBase64Encoded	(	): Get the content in a Base64 encoded String.
org.jivesoftware.smackx.bob.BoBData.getMaxAge	(	): Get the max age.
org.jivesoftware.smackx.bob.BoBData.getType	(	): Get the type.
org.jivesoftware.smackx.bob.BoBData.isOfReasonableSize	(	): Check if the data is of reasonable size. XEP-0231 suggest that the size should not be more than 8 KiB.
org.jivesoftware.smackx.bob.BoBHash: Bits of Binary hash class.
org.jivesoftware.smackx.bob.BoBHash.BoBHash	(	String	String	): BoB hash constructor.
org.jivesoftware.smackx.bob.BoBHash.fromCid	(	String	): Get BoB hash from cid attribute string.
org.jivesoftware.smackx.bob.BoBHash.fromSrc	(	String	): Get BoB hash from src attribute string.
org.jivesoftware.smackx.bob.BoBHash.getCid	(	): BoB hash to cid attribute string.
org.jivesoftware.smackx.bob.BoBHash.getHash	(	): Get the hash.
org.jivesoftware.smackx.bob.BoBHash.getHashType	(	): Get the hash type.
org.jivesoftware.smackx.bob.BoBHash.toSrc	(	): BoB hash to src attribute string.
org.jivesoftware.smackx.bob.BoBManager: Bits of Binary manager class.
org.jivesoftware.smackx.bob.BoBManager.getInstanceFor	(	XMPPConnection	): Get the singleton instance of BoBManager.
org.jivesoftware.smackx.bob.BoBManager.isSupportedByServer	(	): Returns true if Bits of Binary is supported by the server.
org.jivesoftware.smackx.bob.BoBManager.requestBoB	(	Jid	BoBHash	): Request BoB data.
org.jivesoftware.smackx.bob.element.BoBExtension: Bits of Binary extension element.
org.jivesoftware.smackx.bob.element.BoBExtension.BoBExtension	(	BoBHash	String	String	): Bits of Binary extension constructor.
org.jivesoftware.smackx.bob.element.BoBExtension.getAlt	(	): Get the alt field.
org.jivesoftware.smackx.bob.element.BoBExtension.getBoBHash	(	): Get the BoB hash.
org.jivesoftware.smackx.bob.element.BoBIQ: Bits of Binary IQ class.
org.jivesoftware.smackx.bob.element.BoBIQ.BoBIQ	(	BoBHash	): Bits of Binary IQ constructor.
org.jivesoftware.smackx.bob.element.BoBIQ.BoBIQ	(	BoBHash	BoBData	): Bits of Binary IQ constructor.
org.jivesoftware.smackx.bob.element.BoBIQ.getBoBData	(	): Get the BoB data.
org.jivesoftware.smackx.bob.element.BoBIQ.getBoBHash	(	): Get the BoB hash.
org.jivesoftware.smackx.bob.provider.BoBIQProvider: Bits of Binary IQ provider class.
org.jivesoftware.smackx.bookmarks.BookmarkManager: Provides methods to manage bookmarks in accordance with XEP-0048. Methods for managing URLs and Conferences are provided.  It should be noted that some extensions have been made to the XEP. There is an attribute on URLs that marks a url as a news feed and also a sub-element can be added to either a URL or conference indicated that it is shared amongst all users on a server.
org.jivesoftware.smackx.bookmarks.BookmarkManager.BookmarkManager	(	XMPPConnection	): Default constructor. Registers the data provider with the private data manager in the storage:bookmarks namespace.
org.jivesoftware.smackx.bookmarks.BookmarkManager.addBookmarkedConference	(	String	EntityBareJid	boolean	Resourcepart	String	): Adds or updates a conference in the bookmarks.
org.jivesoftware.smackx.bookmarks.BookmarkManager.addBookmarkedURL	(	String	String	boolean	): Adds a new url or updates an already existing url in the bookmarks.
org.jivesoftware.smackx.bookmarks.BookmarkManager.getBookmarkManager	(	XMPPConnection	): Returns the BookmarkManager for a connection, if it doesn't exist it is created.
org.jivesoftware.smackx.bookmarks.BookmarkManager.getBookmarkedConferences	(	): Returns all currently bookmarked conferences.
org.jivesoftware.smackx.bookmarks.BookmarkManager.getBookmarkedURLs	(	): Returns an unmodifiable collection of all bookmarked urls.
org.jivesoftware.smackx.bookmarks.BookmarkManager.isSupported	(	): Check if the service supports bookmarks using private data.
org.jivesoftware.smackx.bookmarks.BookmarkManager.removeBookmarkedConference	(	EntityBareJid	): Removes a conference from the bookmarks.
org.jivesoftware.smackx.bookmarks.BookmarkManager.removeBookmarkedURL	(	String	): Removes a url from the bookmarks.
org.jivesoftware.smackx.bookmarks.BookmarkedConference: Respresents a Conference Room bookmarked on the server using XEP-0048 Bookmark Storage XEP.
org.jivesoftware.smackx.bookmarks.BookmarkedConference.getJid	(	): Returns the full JID of this conference room. (ex.dev@conference.jivesoftware.com)
org.jivesoftware.smackx.bookmarks.BookmarkedConference.getName	(	): Returns the display label representing the Conference room.
org.jivesoftware.smackx.bookmarks.BookmarkedConference.getNickname	(	): Returns the nickname to use when joining this conference room. This is an optional value and may return null.
org.jivesoftware.smackx.bookmarks.BookmarkedConference.getPassword	(	): Returns the password to use when joining this conference room. This is an optional value and may return null.
org.jivesoftware.smackx.bookmarks.BookmarkedConference.isAutoJoin	(	): Returns true if this conference room should be auto-joined on startup.
org.jivesoftware.smackx.bookmarks.BookmarkedURL: Respresents one instance of a URL defined using XEP-0048 Bookmark Storage XEP.
org.jivesoftware.smackx.bookmarks.BookmarkedURL.getName	(	): Returns the name representing the URL (eg. Jive Software). This can be used in as a label, or identifer in applications.
org.jivesoftware.smackx.bookmarks.BookmarkedURL.getURL	(	): Returns the URL.
org.jivesoftware.smackx.bookmarks.BookmarkedURL.isRss	(	): Returns true if this URL is a news feed.
org.jivesoftware.smackx.bookmarks.BookmarkedURL.setName	(	String	): Sets the name representing the URL.
org.jivesoftware.smackx.bookmarks.BookmarkedURL.setRss	(	boolean	): Set to true if this URL is an RSS or news feed.
org.jivesoftware.smackx.bookmarks.Bookmarks: Bookmarks is used for storing and retrieving URLS and Conference rooms. Bookmark Storage (XEP-0048) defined a protocol for the storage of bookmarks to conference rooms and other entities in a Jabber user's account. See the following code sample for saving Bookmarks:   XMPPConnection con = new XMPPTCPConnection("jabber.org"); con.login("john", "doe"); Bookmarks bookmarks = new Bookmarks();  // Bookmark a URL BookmarkedURL url = new BookmarkedURL(); url.setName("Google"); url.setURL("http://www.jivesoftware.com"); bookmarks.addURL(url); // Bookmark a Conference room. BookmarkedConference conference = new BookmarkedConference(); conference.setName("My Favorite Room"); conference.setAutoJoin("true"); conference.setJID("dev@conference.jivesoftware.com"); bookmarks.addConference(conference); // Save Bookmarks using PrivateDataManager. PrivateDataManager manager = new PrivateDataManager(con); manager.setPrivateData(bookmarks);   LastActivity activity = LastActivity.getLastActivity(con, "xray@jabber.org"); 
org.jivesoftware.smackx.bookmarks.Bookmarks.Bookmarks	(	): Required Empty Constructor to use Bookmarks.
org.jivesoftware.smackx.bookmarks.Bookmarks.Provider: The IQ Provider for BookmarkStorage.
org.jivesoftware.smackx.bookmarks.Bookmarks.Provider.Provider	(	): Empty Constructor for PrivateDataProvider.
org.jivesoftware.smackx.bookmarks.Bookmarks.addBookmarkedConference	(	BookmarkedConference	): Add a BookmarkedConference to bookmarks.
org.jivesoftware.smackx.bookmarks.Bookmarks.addBookmarkedURL	(	BookmarkedURL	): Adds a BookmarkedURL.
org.jivesoftware.smackx.bookmarks.Bookmarks.clearBookmarkedConferences	(	): Removes all BookmarkedConferences from Bookmarks.
org.jivesoftware.smackx.bookmarks.Bookmarks.clearBookmarkedURLS	(	): Removes all BookmarkedURLs from user's bookmarks.
org.jivesoftware.smackx.bookmarks.Bookmarks.getBookmarkedConferences	(	): Returns a Collection of all Bookmarked Conference for this user.
org.jivesoftware.smackx.bookmarks.Bookmarks.getBookmarkedURLS	(	): Returns a Collection of all Bookmarked URLs for this user.
org.jivesoftware.smackx.bookmarks.Bookmarks.getElementName	(	): Returns the root element name.
org.jivesoftware.smackx.bookmarks.Bookmarks.getNamespace	(	): Returns the root element XML namespace.
org.jivesoftware.smackx.bookmarks.Bookmarks.removeBookmarkedConference	(	BookmarkedConference	): Removes a BookmarkedConference.
org.jivesoftware.smackx.bookmarks.Bookmarks.removeBookmarkedURL	(	BookmarkedURL	): Removes a bookmarked bookmarkedURL.
org.jivesoftware.smackx.bookmarks.Bookmarks.toXML	(	): Returns the XML representation of the PrivateData.
org.jivesoftware.smackx.bookmarks.SharedBookmark: Interface to indicate if a bookmark is shared across the server.
org.jivesoftware.smackx.bookmarks.SharedBookmark.isShared	(	): Returns true if this bookmark is shared.
org.jivesoftware.smackx.bytestreams.BytestreamListener: BytestreamListener are notified if a remote user wants to initiate a bytestream. Implement this interface to handle incoming bytestream requests.  BytestreamListener can be registered at the Socks5BytestreamManager or the InBandBytestreamManager.  There are two ways to add this listener. See addIncomingBytestreamListener() and addIncomingBytestreamListener() for further details.  Socks5BytestreamListener or InBandBytestreamListener provide a more specific interface of the BytestreamListener.
org.jivesoftware.smackx.bytestreams.BytestreamListener.incomingBytestreamRequest	(	BytestreamRequest	): This listener is notified if a bytestream request from another user has been received.
org.jivesoftware.smackx.bytestreams.BytestreamManager: BytestreamManager provides a generic interface for bytestream managers.  There are two implementations of the interface. See Socks5BytestreamManager and InBandBytestreamManager.
org.jivesoftware.smackx.bytestreams.BytestreamManager.addIncomingBytestreamListener	(	BytestreamListener	): Adds BytestreamListener that is called for every incoming bytestream request unless there is a user specific BytestreamListener registered.  See addIncomingBytestreamListener() and addIncomingBytestreamListener() for further details.
org.jivesoftware.smackx.bytestreams.BytestreamManager.addIncomingBytestreamListener	(	BytestreamListener	Jid	): Adds BytestreamListener that is called for every incoming bytestream request unless there is a user specific BytestreamListener registered.  Use this method if you are awaiting an incoming bytestream request from a specific user.  See addIncomingBytestreamListener() and addIncomingBytestreamListener() for further details.
org.jivesoftware.smackx.bytestreams.BytestreamManager.establishSession	(	Jid	): Establishes a bytestream with the given user and returns the session to send/receive data to/from the user.  Use this method to establish bytestreams to users accepting all incoming bytestream requests since this method doesn't provide a way to tell the user something about the data to be sent.  To establish a bytestream after negotiation the kind of data to be sent (e.g. file transfer) use establishSession().  See establishSession() and establishSession() for further details.
org.jivesoftware.smackx.bytestreams.BytestreamManager.establishSession	(	Jid	String	): Establishes a bytestream with the given user and returns the session to send/receive data to/from the user.  See establishSession() and establishSession() for further details.
org.jivesoftware.smackx.bytestreams.BytestreamManager.removeIncomingBytestreamListener	(	BytestreamListener	): Removes the given listener from the list of listeners for all incoming bytestream requests.
org.jivesoftware.smackx.bytestreams.BytestreamManager.removeIncomingBytestreamListener	(	String	): Removes the listener for the given user.
org.jivesoftware.smackx.bytestreams.BytestreamRequest: BytestreamRequest provides an interface to handle incoming bytestream requests.  There are two implementations of the interface. See Socks5BytestreamRequest and InBandBytestreamRequest.
org.jivesoftware.smackx.bytestreams.BytestreamRequest.accept	(	): Accepts the bytestream open request and returns the session to send/receive data.
org.jivesoftware.smackx.bytestreams.BytestreamRequest.getFrom	(	): Returns the sender of the bytestream open request.
org.jivesoftware.smackx.bytestreams.BytestreamRequest.getSessionID	(	): Returns the session ID of the bytestream open request.
org.jivesoftware.smackx.bytestreams.BytestreamRequest.reject	(	): Rejects the bytestream request by sending a reject error to the initiator.
org.jivesoftware.smackx.bytestreams.BytestreamSession: BytestreamSession provides an interface for established bytestream sessions.  There are two implementations of the interface. See Socks5BytestreamSession and InBandBytestreamSession.
org.jivesoftware.smackx.bytestreams.BytestreamSession.close	(	): Closes the bytestream session.  Closing the session will also close the input stream and the output stream associated to this session.
org.jivesoftware.smackx.bytestreams.BytestreamSession.getInputStream	(	): Returns the InputStream associated with this session to send data.
org.jivesoftware.smackx.bytestreams.BytestreamSession.getOutputStream	(	): Returns the OutputStream associated with this session to receive data.
org.jivesoftware.smackx.bytestreams.BytestreamSession.getReadTimeout	(	): Returns the timeout for read operations of the input stream associated with this session. 0 returns implies that the option is disabled (i.e., timeout of infinity). Default is 0.
org.jivesoftware.smackx.bytestreams.BytestreamSession.setReadTimeout	(	int	): Sets the specified timeout, in milliseconds. With this option set to a non-zero timeout, a read() call on the input stream associated with this session will block for only this amount of time. If the timeout expires, a java.net.SocketTimeoutException is raised, though the session is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout. Default is 0.
org.jivesoftware.smackx.bytestreams.ibb.CloseListener: CloseListener handles all In-Band Bytestream close requests.  If a close request is received it looks if a stored In-Band Bytestream session exists and closes it. If no session with the given session ID exists an <item-not-found/> error is returned to the sender.
org.jivesoftware.smackx.bytestreams.ibb.CloseListener.CloseListener	(	InBandBytestreamManager	): Constructor.
org.jivesoftware.smackx.bytestreams.ibb.CloseListenerTest: Test for the CloseListener class.
org.jivesoftware.smackx.bytestreams.ibb.CloseListenerTest.shouldReplyErrorIfSessionIsUnknown	(	): If a close request to an unknown session is received it should be replied with an <item-not-found/> error.
org.jivesoftware.smackx.bytestreams.ibb.DataListener: DataListener handles all In-Band Bytestream IQ stanzas containing a data stanza(/packet) extension that don't belong to an existing session.  If a data stanza(/packet) is received it looks if a stored In-Band Bytestream session exists. If no session with the given session ID exists an <item-not-found/> error is returned to the sender.  Data packets belonging to a running In-Band Bytestream session are processed by more specific listeners registered when an InBandBytestreamSession is created.
org.jivesoftware.smackx.bytestreams.ibb.DataListener.DataListener	(	InBandBytestreamManager	): Constructor.
org.jivesoftware.smackx.bytestreams.ibb.DataListenerTest: Test for the CloseListener class.
org.jivesoftware.smackx.bytestreams.ibb.DataListenerTest.shouldReplyErrorIfSessionIsUnknown	(	): If a data stanza(/packet) of an unknown session is received it should be replied with an <item-not-found/> error.
org.jivesoftware.smackx.bytestreams.ibb.IBBPacketUtils: Utility methods to create packets.
org.jivesoftware.smackx.bytestreams.ibb.IBBPacketUtils.createErrorIQ	(	Jid	Jid	XMPPError.Condition	): Returns an error IQ.
org.jivesoftware.smackx.bytestreams.ibb.IBBPacketUtils.createResultIQ	(	Jid	Jid	): Returns a result IQ.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamListener: InBandBytestreamListener are informed if a remote user wants to initiate an In-Band Bytestream. Implement this interface to handle incoming In-Band Bytestream requests.  There are two ways to add this listener. See addIncomingBytestreamListener() and addIncomingBytestreamListener() for further details.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamListener.incomingBytestreamRequest	(	InBandBytestreamRequest	): This listener is notified if an In-Band Bytestream request from another user has been received.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager: The InBandBytestreamManager class handles establishing In-Band Bytestreams as specified in the XEP-0047.  The In-Band Bytestreams (IBB) enables two entities to establish a virtual bytestream over which they can exchange Base64-encoded chunks of data over XMPP itself. It is the fall-back mechanism in case the Socks5 bytestream method of transferring data is not available.  There are two ways to send data over an In-Band Bytestream. It could either use IQ stanzas to send data packets or message stanzas. If IQ stanzas are used every data stanza(/packet) is acknowledged by the receiver. This is the recommended way to avoid possible rate-limiting penalties. Message stanzas are not acknowledged because most XMPP server implementation don't support stanza flow-control method like Advanced Message Processing. To set the stanza that should be used invoke setStanza().  To establish an In-Band Bytestream invoke the establishSession() method. This will negotiate an in-band bytestream with the given target JID and return a session.  If a session ID for the In-Band Bytestream was already negotiated (e.g. while negotiating a file transfer) invoke establishSession().  To handle incoming In-Band Bytestream requests add an InBandBytestreamListener to the manager. There are two ways to add this listener. If you want to be informed about incoming In-Band Bytestreams from a specific user add the listener by invoking addIncomingBytestreamListener(). If the listener should respond to all In-Band Bytestream requests invoke addIncomingBytestreamListener().  Note that the registered InBandBytestreamListener will NOT be notified on incoming In-Band bytestream requests sent in the context of XEP-0096 file transfer. (See FileTransferManager)  If no InBandBytestreamListeners are registered, all incoming In-Band bytestream requests will be rejected by returning a <not-acceptable/> error to the initiator.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.InBandBytestreamManager	(	XMPPConnection	): Constructor.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.addIncomingBytestreamListener	(	BytestreamListener	): Adds InBandBytestreamListener that is called for every incoming in-band bytestream request unless there is a user specific InBandBytestreamListener registered.  If no listeners are registered all In-Band Bytestream request are rejected with a <not-acceptable/> error.  Note that the registered InBandBytestreamListener will NOT be notified on incoming Socks5 bytestream requests sent in the context of XEP-0096 file transfer. (See FileTransferManager)
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.addIncomingBytestreamListener	(	BytestreamListener	Jid	): Adds InBandBytestreamListener that is called for every incoming in-band bytestream request from the given user.  Use this method if you are awaiting an incoming Socks5 bytestream request from a specific user.  If no listeners are registered all In-Band Bytestream request are rejected with a <not-acceptable/> error.  Note that the registered InBandBytestreamListener will NOT be notified on incoming Socks5 bytestream requests sent in the context of XEP-0096 file transfer. (See FileTransferManager)
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.disableService	(	): Disables the InBandBytestreamManager by removing its stanza(/packet) listeners and resetting its internal status, which includes removing this instance from the managers map.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.establishSession	(	Jid	): Establishes an In-Band Bytestream with the given user and returns the session to send/receive data to/from the user.  Use this method to establish In-Band Bytestreams to users accepting all incoming In-Band Bytestream requests since this method doesn't provide a way to tell the user something about the data to be sent.  To establish an In-Band Bytestream after negotiation the kind of data to be sent (e.g. file transfer) use establishSession().
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.establishSession	(	Jid	String	): Establishes an In-Band Bytestream with the given user using the given session ID and returns the session to send/receive data to/from the user.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getAllRequestListeners	(	): Returns a list of InBandBytestreamListener that are informed if there are no listeners for a specific initiator.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getByteStreamManager	(	XMPPConnection	): Returns the InBandBytestreamManager to handle In-Band Bytestreams for a given XMPPConnection.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getConnection	(	): Returns the XMPP connection.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getDefaultBlockSize	(	): Returns the default block size that is used for all outgoing in-band bytestreams for this connection.  The recommended default block size is 4096 bytes. See XEP-0047 Section 5.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getIgnoredBytestreamRequests	(	): Returns the list of session IDs that should be ignored by the InitialtionListener
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getMaximumBlockSize	(	): Returns the maximum block size that is allowed for In-Band Bytestreams for this connection.  Incoming In-Band Bytestream open request will be rejected with an <resource-constraint/> error if the block size is greater then the maximum allowed block size.  The default maximum block size is 65535 bytes.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getNextSessionID	(	): Returns a new unique session ID.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getSessions	(	): Returns the sessions map.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getStanza	(	): Returns the stanza used to send data packets.  Default is IQ. See XEP-0047 Section 4.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.getUserListener	(	Jid	): Returns the InBandBytestreamListener that should be informed if a In-Band Bytestream request from the given initiator JID is received.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.ignoreBytestreamRequestOnce	(	String	): Use this method to ignore the next incoming In-Band Bytestream request containing the given session ID. No listeners will be notified for this request and and no error will be returned to the initiator.  This method should be used if you are awaiting an In-Band Bytestream request as a reply to another stanza(/packet) (e.g. file transfer).
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.removeIncomingBytestreamListener	(	BytestreamListener	): Removes the given listener from the list of listeners for all incoming In-Band Bytestream requests.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.removeIncomingBytestreamListener	(	String	): Removes the listener for the given user.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.replyItemNotFoundPacket	(	IQ	): Responses to the given IQ packet's sender with an XMPP error that an In-Band Bytestream session could not be found.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.replyRejectPacket	(	IQ	): Responses to the given IQ packet's sender with an XMPP error that an In-Band Bytestream is not accepted.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.replyResourceConstraintPacket	(	IQ	): Responses to the given IQ packet's sender with an XMPP error that an In-Band Bytestream open request is rejected because its block size is greater than the maximum allowed block size.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.setDefaultBlockSize	(	int	): Sets the default block size that is used for all outgoing in-band bytestreams for this connection.  The default block size must be between 1 and 65535 bytes. The recommended default block size is 4096 bytes. See XEP-0047 Section 5.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.setMaximumBlockSize	(	int	): Sets the maximum block size that is allowed for In-Band Bytestreams for this connection.  The maximum block size must be between 1 and 65535 bytes.  Incoming In-Band Bytestream open request will be rejected with an <resource-constraint/> error if the block size is greater then the maximum allowed block size.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.setStanza	(	StanzaType	): Sets the stanza used to send data packets.  The use of IQ is recommended. See XEP-0047 Section 4.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManagerTest: Test for InBandBytestreamManager.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManagerTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManagerTest.shouldFailIfTargetDoesNotSupportIBB	(	): Invoking establishSession() should throw an exception if the given target does not support in-band bytestream.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManagerTest.shouldHaveOneManagerForEveryConnection	(	): Test that getByteStreamManager() returns one bytestream manager for every connection.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest: InBandBytestreamRequest class handles incoming In-Band Bytestream requests.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest.accept	(	): Accepts the In-Band Bytestream open request and returns the session to send/receive data.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest.getFrom	(	): Returns the sender of the In-Band Bytestream open request.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest.getSessionID	(	): Returns the session ID of the In-Band Bytestream open request.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest.reject	(	): Rejects the In-Band Bytestream request by sending a reject error to the initiator.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequestTest: Test for InBandBytestreamRequest.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequestTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequestTest.shouldReplyWithErrorIfRequestIsRejected	(	): Test reject() method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequestTest.shouldReturnSessionIfRequestIsAccepted	(	): Test accept() method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession: InBandBytestreamSession class represents an In-Band Bytestream session.  In-band bytestreams are bidirectional and this session encapsulates the streams for both directions.  Note that closing the In-Band Bytestream session will close both streams. If both streams are closed individually the session will be closed automatically once the second stream is closed. Use the setCloseBothStreamsEnabled() method if both streams should be closed automatically if one of them is closed.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBDataPacketFilter: IBBDataPacketFilter class filters all packets from the remote peer of this session, containing an In-Band Bytestream data stanza(/packet) extension whose session ID matches this sessions ID.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBInputStream: IBBInputStream class is the base implementation of an In-Band Bytestream input stream. Subclasses of this input stream must provide a stanza(/packet) listener along with a stanza(/packet) filter to collect the In-Band Bytestream data packets.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBInputStream.IBBInputStream	(	): Constructor.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBInputStream.checkClosed	(	): Checks if this stream is closed and throws an IOException if necessary
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBInputStream.cleanup	(	): Invoked if the session is closed.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBInputStream.closeInternal	(	): This method sets the close flag and removes the data stanza(/packet) listener.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBInputStream.getDataPacketFilter	(	): Returns the stanza(/packet) filter that accepts In-Band Bytestream data packets.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBInputStream.getDataPacketListener	(	): Returns the stanza(/packet) listener that processes In-Band Bytestream data packets.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBInputStream.loadBuffer	(	): This method blocks until a data stanza(/packet) is received, the stream is closed or the current thread is interrupted.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBOutputStream: IBBOutputStream class is the base implementation of an In-Band Bytestream output stream. Subclasses of this output stream must provide a method to send data over XMPP stream.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBOutputStream.IBBOutputStream	(	): Constructor.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBOutputStream.closeInternal	(	boolean	): Sets the close flag and optionally flushes the stream.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBOutputStream.writeOut	(	byte[]	int	int	): Fills the buffer with the given data and sends it over the XMPP stream if the buffers capacity has been reached. This method is only called from this class so it is assured that the amount of data to send is <= buffer capacity
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IBBOutputStream.writeToXML	(	DataPacketExtension	): Writes the given data stanza(/packet) to the XMPP stream.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IQIBBInputStream: IQIBBInputStream class implements IBBInputStream to be used with IQ stanzas encapsulating the data packets.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.IQIBBOutputStream: IQIBBOutputStream class implements IBBOutputStream to be used with IQ stanzas encapsulating the data packets.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.InBandBytestreamSession	(	XMPPConnection	Open	Jid	): Constructor.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.MessageIBBInputStream: MessageIBBInputStream class implements IBBInputStream to be used with message stanzas encapsulating the data packets.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.MessageIBBOutputStream: MessageIBBOutputStream class implements IBBOutputStream to be used with message stanzas encapsulating the data packets.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.closeByLocal	(	boolean	): This method is invoked if one of the streams has been closed locally, if an error occurred locally or if the whole session should be closed.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.closeByPeer	(	Close	): This method is invoked if a request to close the In-Band Bytestream has been received.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.isCloseBothStreamsEnabled	(	): Returns whether both streams should be closed automatically if one of the streams is closed. Default is false.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.processIQPacket	(	Data	): Process IQ stanza.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession.setCloseBothStreamsEnabled	(	boolean	): Sets whether both streams should be closed automatically if one of the streams is closed. Default is false.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest: Test for InBandBytestreamSession.  Tests sending data encapsulated in message stanzas.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.shouldReadAllReceivedData1	(	): Test the input stream read(byte[], int, int) method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.shouldReadAllReceivedData2	(	): Test the input stream read() method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.shouldSendCloseRequestIfInvalidSequenceReceived	(	): If a data stanza(/packet) is received out of order the session should be closed. See XEP-0047 Section 2.2.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.shouldSendNothingOnSuccessiveCallsToFlush	(	): Test successive calls to the output stream flush() method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.shouldSendThirtyDataPackets	(	): Test the output stream flush() method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.shouldSendThreeDataPackets1	(	): Test the output stream write(byte[]) method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.shouldSendThreeDataPackets2	(	): Test the output stream write(byte) method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionMessageTest.shouldSendThreeDataPackets3	(	): Test the output stream write(byte[], int, int) method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest: Test for InBandBytestreamSession.  Tests the basic behavior of an In-Band Bytestream session along with sending data encapsulated in IQ stanzas.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldConfirmReceivedDataPacket	(	): Valid data packets should be confirmed.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldNotCloseBothStreamsIfInputStreamIsClosed	(	): If the output stream is closed the input stream should not be closed as well.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldNotCloseBothStreamsIfOutputStreamIsClosed	(	): If the input stream is closed the output stream should not be closed as well.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldNotDeadlockIfInputStreamIsClosed	(	): If the input stream is closed concurrently there should be no deadlock.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldReadAllReceivedData1	(	): Test the input stream read(byte[], int, int) method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldReadAllReceivedData2	(	): Test the input stream read() method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldReplyWithErrorIfAlreadyUsedSequenceIsReceived	(	): If the data stanza(/packet) has a sequence that is already used an 'unexpected-request' error should be returned. See XEP-0047 Section 2.2.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldReplyWithErrorIfDataIsInvalid	(	): If the data stanza(/packet) contains invalid Base64 encoding an 'bad-request' error should be returned. See XEP-0047 Section 2.2.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldSendCloseRequestIfInvalidSequenceReceived	(	): If a data stanza(/packet) is received out of order the session should be closed. See XEP-0047 Section 2.2.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldSendDataCorrectly	(	): Test that the data is correctly chunked.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldSendNothingOnSuccessiveCallsToFlush	(	): Test successive calls to the output stream flush() method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldSendThirtyDataPackets	(	): Test the output stream flush() method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldSendThreeDataPackets1	(	): Test the output stream write(byte[]) method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldSendThreeDataPackets2	(	): Test the output stream write(byte) method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSessionTest.shouldSendThreeDataPackets3	(	): Test the output stream write(byte[], int, int) method.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamTest: Test for In-Band Bytestreams with real XMPP servers.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamTest.testBiDirectionalInBandBytestream	(	): An In-Band Bytestream should be successfully established using IQ stanzas. The established session should transfer data bidirectional.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamTest.testInBandBytestreamWithIQStanzas	(	): An In-Band Bytestream should be successfully established using IQ stanzas.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamTest.testInBandBytestreamWithMessageStanzas	(	): An In-Band Bytestream should be successfully established using message stanzas.
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamTest.testRespondWithErrorOnInBandBytestreamRequest	(	): Target should respond with not-acceptable error if no listeners for incoming In-Band Bytestream requests are registered.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener: InitiationListener handles all incoming In-Band Bytestream open requests. If there are no listeners for a In-Band Bytestream request InitiationListener will always refuse the request and reply with a <not-acceptable/> error (XEP-0047 Section 2.1).  All In-Band Bytestream request having a block size greater than the maximum allowed block size for this connection are rejected with an <resource-constraint/> error. The maximum block size can be set by invoking setMaximumBlockSize().
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener.InitiationListener	(	InBandBytestreamManager	): Constructor.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener.shutdown	(	): Shuts down the listeners executor service.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest: Test for the InitiationListener class.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.shouldIgnoreInBandBytestreamRequestOnce	(	): If a request with a specific session ID should be ignored no listeners should be notified.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.shouldInvokeAllRequestsListenerIfUserListenerExists	(	): If a user specific listener and an all requests listener is registered only the all requests listener should be notified on an incoming request for another user.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.shouldInvokeListenerForAllRequests	(	): If a listener for all requests is registered it should be notified on incoming requests.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.shouldInvokeListenerForUser	(	): If a listener for a specific user in registered it should be notified on incoming requests for that user.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.shouldNotInvokeAllRequestsListenerIfUserListenerExists	(	): If a user specific listener and an all requests listener is registered only the user specific listener should be notified.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.shouldNotInvokeListenerForUser	(	): If listener for a specific user is registered it should not be notified on incoming requests from other users.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.shouldRejectRequestWithTooBigBlockSize	(	): Open request with a block size that exceeds the maximum block size should be replied with an resource-constraint error.
org.jivesoftware.smackx.bytestreams.ibb.InitiationListenerTest.shouldRespondWithError	(	): If no listeners are registered for incoming In-Band Bytestream requests, all request should be rejected with an error.
org.jivesoftware.smackx.bytestreams.ibb.packet.Close: Represents a request to close an In-Band Bytestream.
org.jivesoftware.smackx.bytestreams.ibb.packet.Close.Close	(	String	): Creates a new In-Band Bytestream close request packet.
org.jivesoftware.smackx.bytestreams.ibb.packet.Close.getSessionID	(	): Returns the unique session ID identifying this In-Band Bytestream.
org.jivesoftware.smackx.bytestreams.ibb.packet.CloseTest: Test for the Close class.
org.jivesoftware.smackx.bytestreams.ibb.packet.Data: Represents a chunk of data sent over an In-Band Bytestream encapsulated in an IQ stanza.
org.jivesoftware.smackx.bytestreams.ibb.packet.Data.Data	(	DataPacketExtension	): Constructor.
org.jivesoftware.smackx.bytestreams.ibb.packet.Data.getDataPacketExtension	(	): Returns the data stanza(/packet) extension.
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension: Represents a chunk of data of an In-Band Bytestream within an IQ stanza or a message stanza.
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension.DataPacketExtension	(	String	long	String	): Creates a new In-Band Bytestream data packet.
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension.getData	(	): Returns the data contained in this packet.
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension.getDecodedData	(	): Returns the decoded data or null if data could not be decoded.  The encoded data is invalid if it contains bad Base64 input characters or if it contains the pad ('=') character on a position other than the last character(s) of the data. See XEP-0047 Section 6.
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension.getSeq	(	): Returns the sequence of this stanza(/packet) in regard to the other data packets.
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension.getSessionID	(	): Returns the unique session ID identifying this In-Band Bytestream.
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtensionTest: Test for the DataPacketExtension class.
org.jivesoftware.smackx.bytestreams.ibb.packet.DataTest: Test for the Data class.
org.jivesoftware.smackx.bytestreams.ibb.packet.Open: Represents a request to open an In-Band Bytestream.
org.jivesoftware.smackx.bytestreams.ibb.packet.Open.Open	(	String	int	): Creates a new In-Band Bytestream open request packet.  The data sent over this In-Band Bytestream will be fragmented in blocks with the given block size. The block size should not be greater than 65535. A recommended default value is 4096.  The data will be sent using IQ stanzas.
org.jivesoftware.smackx.bytestreams.ibb.packet.Open.Open	(	String	int	StanzaType	): Creates a new In-Band Bytestream open request packet.  The data sent over this In-Band Bytestream will be fragmented in blocks with the given block size. The block size should not be greater than 65535. A recommended default value is 4096.  The data can be sent using IQ stanzas or message stanzas.
org.jivesoftware.smackx.bytestreams.ibb.packet.Open.getBlockSize	(	): Returns the block size in which the data will be fragmented.
org.jivesoftware.smackx.bytestreams.ibb.packet.Open.getSessionID	(	): Returns the unique session ID identifying this In-Band Bytestream.
org.jivesoftware.smackx.bytestreams.ibb.packet.Open.getStanza	(	): Returns the stanza type used to encapsulate the data.
org.jivesoftware.smackx.bytestreams.ibb.packet.OpenTest: Test for the Open class.
org.jivesoftware.smackx.bytestreams.ibb.provider.CloseIQProvider: Parses a close In-Band Bytestream packet.
org.jivesoftware.smackx.bytestreams.ibb.provider.DataPacketProvider: Parses an In-Band Bytestream data stanza(/packet) which can be a stanza(/packet) extension of either an IQ stanza or a message stanza.
org.jivesoftware.smackx.bytestreams.ibb.provider.OpenIQProvider: Parses an In-Band Bytestream open packet.
org.jivesoftware.smackx.bytestreams.ibb.provider.OpenIQProviderTest: Test for the OpenIQProvider class.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener: InitiationListener handles all incoming SOCKS5 Bytestream initiation requests. If there are no listeners for a SOCKS5 bytestream request InitiationListener will always refuse the request and reply with a <not-acceptable/> error (XEP-0065 Section 5.2.A2).
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener.InitiationListener	(	Socks5BytestreamManager	): Constructor
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener.shutdown	(	): Shuts down the listeners executor service.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest: Test for the InitiationListener class.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest.shouldIgnoreSocks5BytestreamRequestOnce	(	): If a request with a specific session ID should be ignored no listeners should be notified.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest.shouldInvokeAllRequestsListenerIfUserListenerExists	(	): If a user specific listener and an all requests listener is registered only the all requests listener should be notified on an incoming request for another user.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest.shouldInvokeListenerForAllRequests	(	): If a listener for all requests is registered it should be notified on incoming requests.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest.shouldInvokeListenerForUser	(	): If a listener for a specific user in registered it should be notified on incoming requests for that user.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest.shouldNotInvokeAllRequestsListenerIfUserListenerExists	(	): If a user specific listener and an all requests listener is registered only the user specific listener should be notified.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest.shouldNotInvokeListenerForUser	(	): If listener for a specific user is registered it should not be notified on incoming requests from other users.
org.jivesoftware.smackx.bytestreams.socks5.InitiationListenerTest.shouldRespondWithError	(	): If no listeners are registered for incoming SOCKS5 Bytestream requests, all request should be rejected with an error.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest: Test for Socks5BytestreamManager.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.cleanUp	(	): Stop eventually started local SOCKS5 test proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldBlacklistNonSocks5Proxies	(	): Invoking establishSession() should fail if no SOCKS5 proxy can be found. If it turns out that a proxy is not a SOCKS5 proxy it should not be queried again.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldDisableService	(	): The SOCKS5 Bytestream feature should be removed form the service discovery manager if Socks5 bytestream feature is disabled.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldFailIfInitiatorCannotConnectToSocks5Proxy	(	): Invoking establishSession() should fail if initiator can not connect to the SOCKS5 proxy used by target.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldFailIfNoSocks5ProxyFound1	(	): Invoking establishSession() should fail if XMPP server doesn't return any proxies.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldFailIfNoSocks5ProxyFound2	(	): Invoking establishSession() should fail if no proxy is a SOCKS5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldFailIfTargetDoesNotAcceptSocks5Bytestream	(	): Invoking establishSession() should fail if the target does not accept a SOCKS5 Bytestream. See XEP-0065 Section 5.2 A2
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldFailIfTargetDoesNotSupportSocks5	(	): Invoking establishSession() should throw an exception if the given target does not support SOCKS5 Bytestream.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldFailIfTargetUsesInvalidSocks5Proxy	(	): Invoking establishSession() should fail if the proxy used by target is invalid.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldHaveOneManagerForEveryConnection	(	): Test that getBytestreamManager() returns one bytestream manager for every connection.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldNegotiateSocks5BytestreamAndTransferData	(	): Invoking establishSession() should successfully negotiate and return a SOCKS5 Bytestream connection.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldNotPrioritizeSocks5ProxyIfPrioritizationDisabled	(	): Invoking establishSession() the first time should successfully negotiate a SOCKS5 Bytestream via the second SOCKS5 proxy. The second negotiation should run in the same manner if prioritization is disabled.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldPrioritizeSecondSocks5ProxyOnSecondAttempt	(	): Invoking establishSession() the first time should successfully negotiate a SOCKS5 Bytestream via the second SOCKS5 proxy and should prioritize this proxy for a second SOCKS5 Bytestream negotiation.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamManagerTest.shouldUseMultipleAddressesForLocalSocks5Proxy	(	): If multiple network addresses are added to the local SOCKS5 proxy, all of them should be contained in the SOCKS5 Bytestream request.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest: Tests for the Socks5BytestreamRequest class.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest.cleanUp	(	): Stop eventually started local SOCKS5 test proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest.shouldAcceptSocks5BytestreamRequestAndReceiveData	(	): Accepting the SOCKS5 Bytestream request should be successfully.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest.shouldBlacklistInvalidProxyAfter2Failures	(	): Target should not try to connect to SOCKS5 proxies that already failed twice.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest.shouldFailIfRequestHasInvalidStreamHosts	(	): Accepting a SOCKS5 Bytestream request should fail if target is not able to connect to any of the provided SOCKS5 proxies.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest.shouldFailIfRequestHasNoStreamHosts	(	): Accepting a SOCKS5 Bytestream request should fail if the request doesn't contain any Socks5 proxies.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest.shouldNotBlacklistInvalidProxy	(	): Target should not not blacklist any SOCKS5 proxies regardless of failing connections.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamRequestTest.shouldNotTimeoutIfFirstSocks5ProxyDoesNotRespond	(	): If the SOCKS5 Bytestream request contains multiple SOCKS5 proxies and the first one doesn't respond, the connection attempt to this proxy should not consume the whole timeout for connecting to the proxies.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamTest: Test for Socks5 bytestreams with real XMPP servers.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamTest.Socks5ByteStreamTest	(	String	): Constructor
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamTest.testBiDirectionalSocks5BytestreamWithRemoteSocks5Proxy	(	): Socks5 bytestream should be successfully established using a Socks5 proxy provided by the XMPP server. The established connection should transfer data bidirectional if the Socks5 proxy supports it.  Support for bidirectional Socks5 bytestream:  Openfire (3.6.4 and below) - no ejabberd (2.0.5 and higher) - yes   This test will fail if the XMPP server doesn't provide any Socks5 proxies or the Socks5 proxy only allows Socks5 bytestreams in the context of a file transfer (like Openfire in default configuration, see xmpp.proxy.transfer.required flag).
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamTest.testInitializationSocks5FeaturesAndListenerOnStartup	(	): Socks5 feature should be added to the service discovery on Smack startup.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamTest.testRespondWithErrorOnSocks5BytestreamRequest	(	): Target should respond with not-acceptable error if no listeners for incoming Socks5 bytestream requests are registered.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamTest.testSocks5BytestreamWithLocalSocks5Proxy	(	): Socks5 bytestream should be successfully established using the local Socks5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ByteStreamTest.testSocks5BytestreamWithRemoteSocks5Proxy	(	): Socks5 bytestream should be successfully established using a Socks5 proxy provided by the XMPP server.  This test will fail if the XMPP server doesn't provide any Socks5 proxies or the Socks5 proxy only allows Socks5 bytestreams in the context of a file transfer (like Openfire in default configuration, see xmpp.proxy.transfer.required flag).
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamListener: Socks5BytestreamListener are informed if a remote user wants to initiate a SOCKS5 Bytestream. Implement this interface to handle incoming SOCKS5 Bytestream requests.  There are two ways to add this listener. See addIncomingBytestreamListener() and addIncomingBytestreamListener() for further details.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamListener.incomingBytestreamRequest	(	Socks5BytestreamRequest	): This listener is notified if a SOCKS5 Bytestream request from another user has been received.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager: The Socks5BytestreamManager class handles establishing SOCKS5 Bytestreams as specified in the XEP-0065.  A SOCKS5 Bytestream is negotiated partly over the XMPP XML stream and partly over a separate socket. The actual transfer though takes place over a separately created socket.  A SOCKS5 Bytestream generally has three parties, the initiator, the target, and the stream host. The stream host is a specialized SOCKS5 proxy setup on a server, or, the initiator can act as the stream host.  To establish a SOCKS5 Bytestream invoke the establishSession() method. This will negotiate a SOCKS5 Bytestream with the given target JID and return a socket.  If a session ID for the SOCKS5 Bytestream was already negotiated (e.g. while negotiating a file transfer) invoke establishSession().  To handle incoming SOCKS5 Bytestream requests add an Socks5BytestreamListener to the manager. There are two ways to add this listener. If you want to be informed about incoming SOCKS5 Bytestreams from a specific user add the listener by invoking addIncomingBytestreamListener(). If the listener should respond to all SOCKS5 Bytestream requests invoke addIncomingBytestreamListener().  Note that the registered Socks5BytestreamListener will NOT be notified on incoming Socks5 bytestream requests sent in the context of XEP-0096 file transfer. (See FileTransferManager)  If no Socks5BytestreamListeners are registered, all incoming SOCKS5 Bytestream requests will be rejected by returning a <not-acceptable/> error to the initiator.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.Socks5BytestreamManager	(	XMPPConnection	): Private constructor.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.activate	(	): Activates the Socks5BytestreamManager by registering the SOCKS5 Bytestream initialization listener and enabling the SOCKS5 Bytestream feature.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.addIncomingBytestreamListener	(	BytestreamListener	): Adds BytestreamListener that is called for every incoming SOCKS5 Bytestream request unless there is a user specific BytestreamListener registered.  If no listeners are registered all SOCKS5 Bytestream request are rejected with a <not-acceptable/> error.  Note that the registered BytestreamListener will NOT be notified on incoming Socks5 bytestream requests sent in the context of XEP-0096 file transfer. (See FileTransferManager)
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.addIncomingBytestreamListener	(	BytestreamListener	Jid	): Adds BytestreamListener that is called for every incoming SOCKS5 Bytestream request from the given user.  Use this method if you are awaiting an incoming SOCKS5 Bytestream request from a specific user.  If no listeners are registered all SOCKS5 Bytestream request are rejected with a <not-acceptable/> error.  Note that the registered BytestreamListener will NOT be notified on incoming Socks5 bytestream requests sent in the context of XEP-0096 file transfer. (See FileTransferManager)
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.createBytestreamInitiation	(	String	Jid	List	): Returns a SOCKS5 Bytestream initialization request stanza(/packet) with the given session ID containing the given stream hosts for the given target JID.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.createStreamHostRequest	(	Jid	): Returns a IQ stanza(/packet) to query a SOCKS5 proxy its network settings.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.determineProxies	(	): Returns a list of JIDs of SOCKS5 proxies by querying the XMPP server. The SOCKS5 proxies are in the same order as returned by the XMPP server.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.determineStreamHostInfos	(	List	): Returns a list of stream hosts containing the IP address an the port for the given list of SOCKS5 proxy JIDs. The order of the returned list is the same as the given list of JIDs excluding all SOCKS5 proxies who's network settings could not be determined. If a local SOCKS5 proxy is running it will be the first item in the list returned.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.disableService	(	): Disables the SOCKS5 Bytestream manager by removing the SOCKS5 Bytestream feature from the service discovery, disabling the listener for SOCKS5 Bytestream initiation requests and resetting its internal state, which includes removing this instance from the managers map.  To re-enable the SOCKS5 Bytestream feature invoke getBytestreamManager(). Using the file transfer API will automatically re-enable the SOCKS5 Bytestream feature.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.enableService	(	): Adds the SOCKS5 Bytestream feature to the service discovery.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.establishSession	(	Jid	): Establishes a SOCKS5 Bytestream with the given user and returns the Socket to send/receive data to/from the user.  Use this method to establish SOCKS5 Bytestreams to users accepting all incoming Socks5 bytestream requests since this method doesn't provide a way to tell the user something about the data to be sent.  To establish a SOCKS5 Bytestream after negotiation the kind of data to be sent (e.g. file transfer) use establishSession().
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.establishSession	(	Jid	String	): Establishes a SOCKS5 Bytestream with the given user using the given session ID and returns the Socket to send/receive data to/from the user.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getAllRequestListeners	(	): Returns a list of BytestreamListener that are informed if there are no listeners for a specific initiator.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getBytestreamManager	(	XMPPConnection	): Returns the Socks5BytestreamManager to handle SOCKS5 Bytestreams for a given XMPPConnection.  If no manager exists a new is created and initialized.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getConnection	(	): Returns the XMPP connection.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getIgnoredBytestreamRequests	(	): Returns the list of session IDs that should be ignored by the InitialtionListener
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getLocalStreamHost	(	): Returns the stream host information of the local SOCKS5 proxy containing the IP address and the port or null if local SOCKS5 proxy is not running.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getNextSessionID	(	): Returns a new unique session ID.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getProxyConnectionTimeout	(	): Returns the timeout for connecting to the SOCKS5 proxy selected by the target. Default is 10000ms.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getTargetResponseTimeout	(	): Returns the timeout to wait for the response to the SOCKS5 Bytestream initialization request. Default is 10000ms.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.getUserListener	(	Jid	): Returns the BytestreamListener that should be informed if a SOCKS5 Bytestream request from the given initiator JID is received.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.ignoreBytestreamRequestOnce	(	String	): Use this method to ignore the next incoming SOCKS5 Bytestream request containing the given session ID. No listeners will be notified for this request and and no error will be returned to the initiator.  This method should be used if you are awaiting a SOCKS5 Bytestream request as a reply to another stanza(/packet) (e.g. file transfer).
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.isProxyPrioritizationEnabled	(	): Returns if the prioritization of the last working SOCKS5 proxy on successive SOCKS5 Bytestream connections is enabled. Default is true.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.removeIncomingBytestreamListener	(	BytestreamListener	): Removes the given listener from the list of listeners for all incoming SOCKS5 Bytestream requests.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.removeIncomingBytestreamListener	(	String	): Removes the listener for the given user.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.replyRejectPacket	(	IQ	): Responses to the given packet's sender with an XMPP error that a SOCKS5 Bytestream is not accepted.  Specified in XEP-65 5.3.1 (Example 13) 
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.setProxyConnectionTimeout	(	int	): Sets the timeout for connecting to the SOCKS5 proxy selected by the target. Default is 10000ms.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.setProxyPrioritizationEnabled	(	boolean	): Enable/disable the prioritization of the last working SOCKS5 proxy on successive SOCKS5 Bytestream connections.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.setTargetResponseTimeout	(	int	): Sets the timeout to wait for the response to the SOCKS5 Bytestream initialization request. Default is 10000ms.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager.supportsSocks5	(	Jid	): Returns true if the given target JID supports feature SOCKS5 Bytestream.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest: Socks5BytestreamRequest class handles incoming SOCKS5 Bytestream requests.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.Socks5BytestreamRequest	(	Socks5BytestreamManager	Bytestream	): Creates a new Socks5BytestreamRequest.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.accept	(	): Accepts the SOCKS5 Bytestream initialization request and returns the socket to send/receive data.  Before accepting the SOCKS5 Bytestream request you can set timeouts by invoking setTotalConnectTimeout() and setMinimumConnectTimeout().
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.cancelRequest	(	): Cancels the SOCKS5 Bytestream request by sending an error to the initiator and building a XMPP exception.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.createUsedHostResponse	(	StreamHost	): Returns the response to the SOCKS5 Bytestream request containing the SOCKS5 proxy used.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.getConnectFailureThreshold	(	): Returns the number of connection failures it takes for a particular SOCKS5 proxy to be blacklisted. When a proxy is blacklisted no more connection attempts will be made to it for a period of 2 hours. Default is 2.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.getConnectionFailures	(	String	): Returns how often the connection to the given address failed.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.getFrom	(	): Returns the sender of the SOCKS5 Bytestream initialization request.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.getMinimumConnectTimeout	(	): Returns the timeout to connect to one SOCKS5 proxy while accepting the SOCKS5 Bytestream request. Default is 2000ms.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.getSessionID	(	): Returns the session ID of the SOCKS5 Bytestream initialization request.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.getTotalConnectTimeout	(	): Returns the maximum timeout to connect to SOCKS5 proxies. Default is 10000ms.  When accepting a SOCKS5 Bytestream request Smack tries to connect to all SOCKS5 proxies given by the initiator until a connection is established. This timeout divided by the number of SOCKS5 proxies determines the timeout for every connection attempt.  You can set the minimum timeout for establishing a connection to one SOCKS5 proxy by invoking setMinimumConnectTimeout().
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.incrementConnectionFailures	(	String	): Increments the connection failure counter by one for the given address.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.reject	(	): Rejects the SOCKS5 Bytestream request by sending a reject error to the initiator.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.setConnectFailureThreshold	(	int	): Sets the number of connection failures it takes for a particular SOCKS5 proxy to be blacklisted. When a proxy is blacklisted no more connection attempts will be made to it for a period of 2 hours. Default is 2.  Setting the connection failure threshold to zero disables the blacklisting.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.setMinimumConnectTimeout	(	int	): Sets the timeout to connect to one SOCKS5 proxy while accepting the SOCKS5 Bytestream request. Default is 2000ms.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest.setTotalConnectTimeout	(	int	): Sets the maximum timeout to connect to SOCKS5 proxies. Default is 10000ms.  When accepting a SOCKS5 Bytestream request Smack tries to connect to all SOCKS5 proxies given by the initiator until a connection is established. This timeout divided by the number of SOCKS5 proxies determines the timeout for every connection attempt.  You can set the minimum timeout for establishing a connection to one SOCKS5 proxy by invoking setMinimumConnectTimeout().
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession: Socks5BytestreamSession class represents a SOCKS5 Bytestream session.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession.isDirect	(	): Returns true if the session is established through a direct connection between the initiator and target, false if the session is mediated over a SOCKS proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession.isMediated	(	): Returns true if the session is mediated over a SOCKS proxy, false if this session is established through a direct connection between the initiator and target.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client: The SOCKS5 client class handles establishing a connection to a SOCKS5 proxy. Connecting to a SOCKS5 proxy requires authentication. This implementation only supports the no-authentication authentication method.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client.Socks5Client	(	StreamHost	String	): Constructor for a SOCKS5 client.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client.createSocks5ConnectRequest	(	): Returns a SOCKS5 connection request message. It contains the command "connect", the address type "domain" and the digest as address.  (see RFC1928)
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client.establish	(	Socket	): Initializes the connection to the SOCKS5 proxy by negotiating authentication method and requesting a stream for the given digest. Currently only the no-authentication method is supported by the Socks5Client.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client.getSocket	(	int	): Returns the initialized socket that can be used to transfer data between peers via the SOCKS5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiator: Implementation of a SOCKS5 client used on the initiators side. This is needed because connecting to the local SOCKS5 proxy differs form the regular way to connect to a SOCKS5 proxy. Additionally a remote SOCKS5 proxy has to be activated by the initiator before data can be transferred between the peers.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiator.Socks5ClientForInitiator	(	StreamHost	String	XMPPConnection	String	Jid	): Creates a new SOCKS5 client for the initiators side.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiator.activate	(	): Activates the SOCKS5 Bytestream by sending an XMPP SOCKS5 Bytestream activation stanza(/packet) to the SOCKS5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiator.createStreamHostActivation	(	): Returns a SOCKS5 Bytestream activation packet.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiatorTest: Test for Socks5ClientForInitiator class.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiatorTest.cleanup	(	): Reset default port for local SOCKS5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiatorTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiatorTest.shouldFailIfActivateSocks5ProxyFails	(	): If the initiator can connect to a SOCKS5 proxy but activating the stream fails an exception should be thrown.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiatorTest.shouldFailIfTargetIsNotConnectedToLocalSocks5Proxy	(	): If the target is not connected to the local SOCKS5 proxy an exception should be thrown.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiatorTest.shouldSuccessfullyConnectThroughLocalSocks5Proxy	(	): Initiator and target should successfully connect to the local SOCKS5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiatorTest.shouldSuccessfullyEstablishConnectionAndActivateSocks5Proxy	(	): Target and initiator should successfully connect to a "remote" SOCKS5 proxy and the initiator activates the bytestream.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientTest: Test for Socks5Client class.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientTest.cleanup	(	): Close fake SOCKS5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientTest.setup	(	): Initialize fields used in the tests.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientTest.shouldCloseSocketIfServerDoesNotAcceptAuthenticationMethod	(	): A SOCKS5 client MUST close connection if server doesn't accept any of the given authentication methods. (See RFC1928 Section 3)
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientTest.shouldCloseSocketIfServerRepliesInUnsupportedWay	(	): The SOCKS5 client should close connection if server replies in an unsupported way.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientTest.shouldCloseSocketIfServerRepliesWithError	(	): The SOCKS5 client should close connection if server replies with an error.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientTest.shouldSuccessfullyConnectToSocks5Server	(	): The SOCKS5 client should successfully connect to the SOCKS5 server.
org.jivesoftware.smackx.bytestreams.socks5.Socks5PacketUtils: A collection of utility methods to create XMPP packets.
org.jivesoftware.smackx.bytestreams.socks5.Socks5PacketUtils.createActivationConfirmation	(	Jid	Jid	): Returns a response IQ for a activation request to the proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5PacketUtils.createBytestreamInitiation	(	Jid	Jid	String	): Returns a SOCKS5 Bytestream initialization request packet. The Request doesn't contain any SOCKS5 proxies.
org.jivesoftware.smackx.bytestreams.socks5.Socks5PacketUtils.createBytestreamResponse	(	Jid	Jid	): Returns a response to a SOCKS5 Bytestream initialization request. The stanza(/packet) doesn't contain the uses-host information.
org.jivesoftware.smackx.bytestreams.socks5.Socks5PacketUtils.createDiscoverInfo	(	Jid	Jid	): Returns a response to an info discovery request. The stanza(/packet) doesn't contain any infos.
org.jivesoftware.smackx.bytestreams.socks5.Socks5PacketUtils.createDiscoverItems	(	Jid	Jid	): Returns a response to an item discovery request. The stanza(/packet) doesn't contain any items.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy: The Socks5Proxy class represents a local SOCKS5 proxy server. It can be enabled/disabled by invoking setLocalSocks5ProxyEnabled(). The proxy is enabled by default.  The port of the local SOCKS5 proxy can be configured by invoking setLocalSocks5ProxyPort(). Default port is 7777. If you set the port to a negative value Smack tries to the absolute value and all following until it finds an open port.  If your application is running on a machine with multiple network interfaces or if you want to provide your public address in case you are behind a NAT router, invoke addLocalAddress() or replaceLocalAddresses() to modify the list of local network addresses used for outgoing SOCKS5 Bytestream requests.  The local SOCKS5 proxy server refuses all connections except the ones that are explicitly allowed in the process of establishing a SOCKS5 Bytestream ( establishSession()).  This Implementation has the following limitations:  only supports the no-authentication authentication method only supports the connect command and will not answer correctly to other commands only supports requests with the domain address type and will not correctly answer to requests with other address types  (see RFC 1928)
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.Socks5Proxy	(	): Private constructor.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.Socks5ServerProcess: Implementation of a simplified SOCKS5 proxy server.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.Socks5ServerProcess.establishConnection	(	Socket	): Negotiates a SOCKS5 connection and stores it on success.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.addLocalAddress	(	String	): Adds the given address to the list of local network addresses.  Use this method if you want to provide multiple addresses in a SOCKS5 Bytestream request. This may be necessary if your application is running on a machine with multiple network interfaces or if you want to provide your public address in case you are behind a NAT router.  The order of the addresses used is determined by the order you add addresses.  Note that the list of addresses initially contains the address returned by InetAddress.getLocalHost().getHostAddress(). You can replace the list of addresses by invoking replaceLocalAddresses().
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.addTransfer	(	String	): Add the given digest to the list of allowed transfers. Only connections for allowed transfers are stored and can be retrieved by invoking getSocket(). All connections to the local SOCKS5 proxy that don't contain an allowed digest are discarded.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.getLocalAddresses	(	): Returns an set of the local network addresses that will be used for streamhost candidates of outgoing SOCKS5 Bytestream requests.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.getLocalSocks5ProxyPort	(	): Return the port of the local Socks5 proxy. Default is 7777.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.getPort	(	): Returns the port of the local SOCKS5 proxy server. If it is not running -1 will be returned.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.getSocket	(	String	): Returns the socket for the given digest. A socket will be returned if the given digest has been in the list of allowed transfers (see addTransfer()) while the peer connected to the SOCKS5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.getSocks5Proxy	(	): Returns the local SOCKS5 proxy server.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.isLocalSocks5ProxyEnabled	(	): Returns true if the local Socks5 proxy should be started. Default is true.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.isRunning	(	): Returns true if the local SOCKS5 proxy server is running, otherwise false.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.removeLocalAddress	(	String	): Removes the given address from the list of local network addresses. This address will then no longer be used of outgoing SOCKS5 Bytestream requests.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.removeTransfer	(	String	): Removes the given digest from the list of allowed transfers. After invoking this method already stored connections with the given digest will be removed.  The digest should be removed after establishing the SOCKS5 Bytestream is finished, an error occurred while establishing the connection or if the connection is not allowed anymore.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.replaceLocalAddresses	(	Collection	): Replaces the list of local network addresses.  Use this method if you want to provide multiple addresses in a SOCKS5 Bytestream request and want to define their order. This may be necessary if your application is running on a machine with multiple network interfaces or if you want to provide your public address in case you are behind a NAT router.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.setLocalSocks5ProxyEnabled	(	boolean	): Sets if the local Socks5 proxy should be started. Default is true.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.setLocalSocks5ProxyPort	(	int	): Sets the port of the local Socks5 proxy. Default is 7777. If you set the port to a negative value Smack tries the absolute value and all following until it finds an open port.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.start	(	): Starts the local SOCKS5 proxy server. If it is already running, this method does nothing.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy.stop	(	): Stops the local SOCKS5 proxy server. If it is not running this method does nothing.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest: Test for Socks5Proxy class.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.cleanup	(	): Reset SOCKS5 proxy settings.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldBeASingleton	(	): The SOCKS5 proxy should be a singleton used by all XMPP connections.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldCloseSocketIfNoSocks5Request	(	): If the SOCKS5 proxy accepts a connection that is not a SOCKS5 connection it should close the corresponding socket.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldNotBeRunningIfDisabled	(	): The SOCKS5 proxy should not be started if disabled by configuration.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldNotReturnMultipleSameAddress	(	): Inserting the same address multiple times should not cause the proxy to return this address multiple times.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldPreserveAddressOrderOnInsertions	(	): When inserting new network addresses to the proxy the order should remain in the order they were inserted.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldPreserveAddressOrderOnReplace	(	): When replacing network addresses of the proxy the order should remain in the order if the given list.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldRespondWithErrorIfConnectionIsNotAllowed	(	): The SOCKS5 proxy should respond with an error message if the client is not allowed to connect with the proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldRespondWithErrorIfNoSupportedAuthenticationMethod	(	): The SOCKS5 proxy should reply with an error message if no supported authentication methods are given in the SOCKS5 request.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldSuccessfullyEstablishConnection	(	): A Client should successfully establish a connection to the SOCKS5 proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5ProxyTest.shouldUseFreePortOnNegativeValues	(	): The SOCKS5 proxy should use a free port above the one configured.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy: Simple SOCKS5 proxy for testing purposes. It is almost the same as the Socks5Proxy class but the port can be configured more easy and it all connections are allowed.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.Socks5ServerProcess: Implementation of a simplified SOCKS5 proxy server.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.Socks5ServerProcess.establishConnection	(	Socket	): Negotiates a SOCKS5 connection and stores it on success.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.Socks5TestProxy	(	int	): Private constructor.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.getAddress	(	): Returns the host address of the local SOCKS5 proxy server.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.getPort	(	): Returns the port of the local SOCKS5 proxy server. If it is not running -1 will be returned.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.getProxy	(	int	): Returns the local SOCKS5 proxy server.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.getSocket	(	String	): Returns the socket for the given digest.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.isRunning	(	): Returns true if the local SOCKS5 proxy server is running, otherwise false.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.start	(	): Starts the local SOCKS5 proxy server. If it is already running, this method does nothing.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.stop	(	): Stops the local SOCKS5 proxy server. If it is not running this method does nothing.
org.jivesoftware.smackx.bytestreams.socks5.Socks5TestProxy.stopProxy	(	): Stops the test proxy.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Utils: A collection of utility methods for SOcKS5 messages.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Utils.createDigest	(	String	Jid	Jid	): Returns a SHA-1 digest of the given parameters as specified in XEP-0065.
org.jivesoftware.smackx.bytestreams.socks5.Socks5Utils.receiveSocks5Message	(	DataInputStream	): Reads a SOCKS5 message from the given InputStream. The message can either be a SOCKS5 request message or a SOCKS5 response message.  (see RFC1928)
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream: A stanza(/packet) representing part of a SOCKS5 Bytestream negotiation.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.Activate: The stanza(/packet) sent by the stream initiator to the stream proxy to activate the connection.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.Activate.Activate	(	Jid	): Default constructor specifying the target of the stream.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.Activate.getTarget	(	): Returns the target of the activation.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.Bytestream	(	): The default constructor.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.Bytestream	(	String	): A constructor where the session ID can be specified.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.StreamHost: Stanza(/Packet) extension that represents a potential SOCKS5 proxy for the file transfer. Stream hosts are forwarded to the target of the file transfer who then chooses and connects to one.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.StreamHost.StreamHost	(	Jid	String	int	): Default constructor.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.StreamHost.getAddress	(	): Returns the internet address of the stream host.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.StreamHost.getJID	(	): Returns the JID of the stream host.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.StreamHost.getPort	(	): Returns the port on which the potential stream host would accept the connection.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.StreamHostUsed: After selected a SOCKS5 stream host and successfully connecting, the target of the file transfer returns a byte stream stanza(/packet) with the stream host used extension.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.StreamHostUsed.StreamHostUsed	(	Jid	): Default constructor.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.StreamHostUsed.getJID	(	): Returns the JID of the selected stream host.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.addStreamHost	(	Jid	String	): Adds a potential stream host that the remote user can connect to to receive the file.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.addStreamHost	(	Jid	String	int	): Adds a potential stream host that the remote user can connect to to receive the file.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.addStreamHost	(	StreamHost	): Adds a potential stream host that the remote user can transfer the file through.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.countStreamHosts	(	): Returns the count of stream hosts contained in this packet.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.getMode	(	): Returns the transport mode.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.getSessionID	(	): Returns the session ID related to the bytestream negotiation.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.getStreamHost	(	Jid	): Returns the stream host related to the given JID, or null if there is none.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.getStreamHosts	(	): Returns the list of stream hosts contained in the packet.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.getToActivate	(	): Returns the activate element of the stanza(/packet) sent to the proxy host to verify the identity of the initiator and match them to the appropriate stream.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.getUsedHost	(	): Returns the SOCKS5 host connected to by the remote user.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.setMode	(	Mode	): Set the transport mode. This should be put in the initiation of the interaction.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.setSessionID	(	String	): Set the session ID related to the bytestream. The session ID is a unique identifier used to differentiate between stream negotiations.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.setToActivate	(	Jid	): Upon the response from the target of the used host the activate stanza(/packet) is sent to the SOCKS5 proxy. The proxy will activate the stream or return an error after verifying the identity of the initiator, using the activate packet.
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream.setUsedHost	(	Jid	): Upon connecting to the stream host the target of the stream replies to the initiator with the JID of the SOCKS5 host that they used.
org.jivesoftware.smackx.bytestreams.socks5.provider.BytestreamsProvider: Parses a bytestream packet.
org.jivesoftware.smackx.caps.EntityCapsManager: Keeps track of entity capabilities.
org.jivesoftware.smackx.caps.EntityCapsManager.addDiscoverInfoByNode	(	String	DiscoverInfo	): Add DiscoverInfo to the database.
org.jivesoftware.smackx.caps.EntityCapsManager.areEntityCapsSupported	(	Jid	): Returns true if Entity Caps are supported by a given JID.
org.jivesoftware.smackx.caps.EntityCapsManager.areEntityCapsSupportedByServer	(	): Returns true if Entity Caps are supported by the local service/server.
org.jivesoftware.smackx.caps.EntityCapsManager.clearMemoryCache	(	): Clears the memory cache.
org.jivesoftware.smackx.caps.EntityCapsManager.generateVerificationString	(	DiscoverInfo	String	): Generates a XEP-115 Verification String
org.jivesoftware.smackx.caps.EntityCapsManager.getCapsVersionAndHash	(	): Get our own caps version. The version depends on the enabled features. A caps version looks like '66/0NaeaBKkwk85efJTGmU47vXI='
org.jivesoftware.smackx.caps.EntityCapsManager.getDiscoverInfoByUser	(	Jid	): Get the discover info given a user name. The discover info is returned if the user has a node#ver associated with it and the node#ver has a discover info associated with it.
org.jivesoftware.smackx.caps.EntityCapsManager.getDiscoveryInfoByNodeVer	(	String	): Retrieve DiscoverInfo for a specific node.
org.jivesoftware.smackx.caps.EntityCapsManager.getLocalNodeVer	(	): Returns the local entity's NodeVer (e.g. "http://www.igniterealtime.org/projects/smack/#66/0NaeaBKkwk85efJTGmU47vXI= )
org.jivesoftware.smackx.caps.EntityCapsManager.getNodeVersionByJid	(	Jid	): Get the Node version (node#ver) of a JID. Returns a String or null if EntiyCapsManager does not have any information.
org.jivesoftware.smackx.caps.EntityCapsManager.removeUserCapsNode	(	String	): Remove a record telling what entity caps node a user has.
org.jivesoftware.smackx.caps.EntityCapsManager.setDefaultEntityNode	(	String	): Set the default entity node that will be used for new EntityCapsManagers.
org.jivesoftware.smackx.caps.EntityCapsManager.setMaxsCacheSizes	(	int	int	): Sets the maximum cache sizes.
org.jivesoftware.smackx.caps.EntityCapsManager.setPersistentCache	(	EntityCapsPersistentCache	): Set the persistent cache implementation.
org.jivesoftware.smackx.caps.EntityCapsManager.updateLocalEntityCaps	(	): Updates the local user Entity Caps information with the data provided If we are connected and there was already a presence send, another presence is send to inform others about your new Entity Caps node string.
org.jivesoftware.smackx.caps.EntityCapsManager.verifyDiscoverInfoVersion	(	String	String	DiscoverInfo	): Verify DisoverInfo and Caps Node as defined in XEP-0115 5.4 Processing Method.
org.jivesoftware.smackx.caps.EntityCapsManager.verifyPacketExtensions	(	DiscoverInfo	): 
org.jivesoftware.smackx.caps.EntityCapsManagerTest.testComplexGenerationExample	(	): XEP- 0115 Complex Generation Example.
org.jivesoftware.smackx.caps.EntityCapsTest.testPreventDiscoInfo	(	): Test if entity caps actually prevent a disco info request and reply.
org.jivesoftware.smackx.caps.cache.EntityCapsPersistentCache.addDiscoverInfoByNodePersistent	(	String	DiscoverInfo	): Add an DiscoverInfo to the persistent Cache.
org.jivesoftware.smackx.caps.cache.EntityCapsPersistentCache.emptyCache	(	): Empty the Cache.
org.jivesoftware.smackx.caps.cache.EntityCapsPersistentCache.lookup	(	String	): Lookup DiscoverInfo by a Node string.
org.jivesoftware.smackx.caps.cache.SimpleDirectoryPersistentCache: Simple implementation of an EntityCapsPersistentCache that uses a directory to store the Caps information for every known node. Every node is represented by a file.
org.jivesoftware.smackx.caps.cache.SimpleDirectoryPersistentCache.SimpleDirectoryPersistentCache	(	File	): Creates a new SimpleDirectoryPersistentCache Object. Make sure that the cacheDir exists and that it's an directory.  Default filename encoder Base32, as this will work on all file systems, both case sensitive and case insensitive. It does however produce longer filenames.
org.jivesoftware.smackx.caps.cache.SimpleDirectoryPersistentCache.SimpleDirectoryPersistentCache	(	File	StringEncoder	): Creates a new SimpleDirectoryPersistentCache Object. Make sure that the cacheDir exists and that it's an directory. If your cacheDir is case insensitive then make sure to set the StringEncoder to Base32 (which is the default).
org.jivesoftware.smackx.caps.cache.SimpleDirectoryPersistentCache.restoreInfoFromFile	(	File	): Tries to restore an DiscoverInfo stanza(/packet) from a file.
org.jivesoftware.smackx.caps.cache.SimpleDirectoryPersistentCache.writeInfoToFile	(	File	DiscoverInfo	): Writes the DiscoverInfo stanza(/packet) to an file
org.jivesoftware.smackx.caps.packet.CapsExtension: A XEP-0115 Entity Capabilities extension.
org.jivesoftware.smackx.caps.packet.CapsExtension.toXML	(	): Returns the XML representation of this Element..   
org.jivesoftware.smackx.carbons.CarbonCopyReceivedListener.onCarbonCopyReceived	(	Direction	Message	Message	): Invoked when a new carbon copy was received.
org.jivesoftware.smackx.carbons.CarbonManager: Manager for XEP-0280: Message Carbons. This class implements the manager for registering CarbonExtension support, enabling and disabling message carbons, and for CarbonCopyReceivedListener.  Note that it is important to match the 'from' attribute of the message wrapping a carbon copy, as otherwise it would may be possible for others to impersonate users. Smack's CarbonManager takes care of that in CarbonCopyReceivedListeners which where registered with addCarbonCopyReceivedListener().   You should call enableCarbons() before sending your first undirected presence (aka. the "initial presence"). 
org.jivesoftware.smackx.carbons.CarbonManager.addCarbonCopyReceivedListener	(	CarbonCopyReceivedListener	): Add a carbon copy received listener.
org.jivesoftware.smackx.carbons.CarbonManager.disableCarbons	(	): Helper method to disable carbons.
org.jivesoftware.smackx.carbons.CarbonManager.disableCarbons	(	Message	): Mark a message as "private", so it will not be carbon-copied.
org.jivesoftware.smackx.carbons.CarbonManager.disableCarbonsAsync	(	ExceptionCallback	): Disable carbons asynchronously. If an error occurs as result of the attempt to disable carbons, the optional exceptionCallback will be invoked.  Note that although this method is asynchronous, it may block if the outgoing stream element queue is full (e.g. because of a slow network connection). Thus, if the thread performing this operation is interrupted while the queue is full, an InterruptedException is thrown. 
org.jivesoftware.smackx.carbons.CarbonManager.enableCarbons	(	): Helper method to enable carbons.
org.jivesoftware.smackx.carbons.CarbonManager.enableCarbonsAsync	(	ExceptionCallback	): Enable carbons asynchronously. If an error occurs as result of the attempt to enable carbons, the optional exceptionCallback will be invoked.  Note that although this method is asynchronous, it may block if the outgoing stream element queue is full (e.g. because of a slow network connection). Thus, if the thread performing this operation is interrupted while the queue is full, an InterruptedException is thrown. 
org.jivesoftware.smackx.carbons.CarbonManager.getCarbonsEnabled	(	): Check if carbons are enabled on this connection.
org.jivesoftware.smackx.carbons.CarbonManager.getInstanceFor	(	XMPPConnection	): Obtain the CarbonManager responsible for a connection.
org.jivesoftware.smackx.carbons.CarbonManager.isSupportedByServer	(	): Returns true if XMPP Carbons are supported by the server.
org.jivesoftware.smackx.carbons.CarbonManager.removeCarbonCopyReceivedListener	(	CarbonCopyReceivedListener	): Remove a carbon copy received listener.
org.jivesoftware.smackx.carbons.CarbonManager.sendCarbonsEnabled	(	boolean	): Notify server to change the carbons state. This method returns immediately and changes the variable when the reply arrives. You should first check for support using isSupportedByServer().
org.jivesoftware.smackx.carbons.CarbonManager.setCarbonsEnabled	(	boolean	): Notify server to change the carbons state. This method blocks some time until the server replies to the IQ and returns true on success. You should first check for support using isSupportedByServer().
org.jivesoftware.smackx.carbons.packet.Carbon: Carbon IQs.
org.jivesoftware.smackx.carbons.packet.CarbonExtension: Stanza(/Packet) extension for XEP-0280: Message Carbons. The extension XEP-0280 is meant to synchronize a message flow to multiple presences of a user.  It accomplishes this by wrapping a Forwarded stanza(/packet) in a sent or received element
org.jivesoftware.smackx.carbons.packet.CarbonExtension.CarbonExtension	(	Direction	Forwarded	): Construct a Carbon message extension.
org.jivesoftware.smackx.carbons.packet.CarbonExtension.Private: Stanza(/Packet) extension indicating that a message may not be carbon-copied. Adding this extension to any message will disallow that message from being copied. 
org.jivesoftware.smackx.carbons.packet.CarbonExtension.Private.addTo	(	Message	): Marks a message "private", so that it will not be carbon-copied, by adding private packet extension to the message.
org.jivesoftware.smackx.carbons.packet.CarbonExtension.from	(	Message	): Obtain a Carbon from a message, if available.  Only Message instances can contain a Carbon extensions. 
org.jivesoftware.smackx.carbons.packet.CarbonExtension.getDirection	(	): Get the direction (sent or received) of the carbon.
org.jivesoftware.smackx.carbons.packet.CarbonExtension.getForwarded	(	): Get the forwarded packet.
org.jivesoftware.smackx.carbons.packet.CarbonExtension.getFrom	(	Message	): Obtain a Carbon from a message, if available.  Only Message instances can contain a Carbon extensions. 
org.jivesoftware.smackx.carbons.provider.CarbonManagerProvider: This class implements the ExtensionElementProvider to parse carbon copied messages from a packet. It will return a CarbonExtension stanza(/packet) extension.
org.jivesoftware.smackx.chat_markers.ChatMarkersManager: Chat Markers Manager class (XEP-0333).
org.jivesoftware.smackx.chat_markers.ChatMarkersManager.getInstanceFor	(	XMPPConnection	): Get the singleton instance of ChatMarkersManager.
org.jivesoftware.smackx.chat_markers.ChatMarkersManager.isSupportedByServer	(	): Returns true if Chat Markers is supported by the server.
org.jivesoftware.smackx.chat_markers.element.ChatMarkersElements: Chat Markers elements (XEP-0333).
org.jivesoftware.smackx.chat_markers.element.ChatMarkersElements.AcknowledgedExtension: Acknowledged extension class.
org.jivesoftware.smackx.chat_markers.element.ChatMarkersElements.AcknowledgedExtension.getId	(	): Get the id.
org.jivesoftware.smackx.chat_markers.element.ChatMarkersElements.DisplayedExtension: Displayed extension class.
org.jivesoftware.smackx.chat_markers.element.ChatMarkersElements.DisplayedExtension.getId	(	): Get the id.
org.jivesoftware.smackx.chat_markers.element.ChatMarkersElements.MarkableExtension: Markable extension class.
org.jivesoftware.smackx.chat_markers.element.ChatMarkersElements.ReceivedExtension: Received extension class.
org.jivesoftware.smackx.chat_markers.element.ChatMarkersElements.ReceivedExtension.getId	(	): Get the id.
org.jivesoftware.smackx.chat_markers.provider.AcknowledgedProvider: Acknowledged extension provider class (XEP-0333).
org.jivesoftware.smackx.chat_markers.provider.DisplayedProvider: Displayed extension provider class (XEP-0333).
org.jivesoftware.smackx.chat_markers.provider.MarkableProvider: Markable extension provider class (XEP-0333).
org.jivesoftware.smackx.chat_markers.provider.ReceivedProvider: Received extension provider class (XEP-0333).
org.jivesoftware.smackx.chatstates.ChatStateListener: Events for when the state of a user in a chat changes.
org.jivesoftware.smackx.chatstates.ChatStateListener.stateChanged	(	org.jivesoftware.smack.chat.Chat	ChatState	Message	): Fired when the state of a chat with another user changes.
org.jivesoftware.smackx.chatstates.ChatStateManager: Handles chat state for all chats on a particular XMPPConnection. This class manages both the stanza(/packet) extensions and the disco response necessary for compliance with XEP-0085. NOTE: getInstance() needs to be called in order for the listeners to be registered appropriately with the connection. If this does not occur you will not receive the update notifications.
org.jivesoftware.smackx.chatstates.ChatStateManager.getInstance	(	XMPPConnection	): Returns the ChatStateManager related to the XMPPConnection and it will create one if it does not yet exist.
org.jivesoftware.smackx.chatstates.ChatStateManager.setCurrentState	(	ChatState	org.jivesoftware.smack.chat.Chat	): Sets the current state of the provided chat. This method will send an empty bodied Message stanza(/packet) with the state attached as a org.jivesoftware.smack.packet.ExtensionElement, if and only if the new chat state is different than the last state.
org.jivesoftware.smackx.chatstates.packet.ChatStateExtension: Represents a chat state which is an extension to message packets which is used to indicate the current status of a chat participant.
org.jivesoftware.smackx.chatstates.packet.ChatStateExtension.ChatStateExtension	(	ChatState	): Default constructor. The argument provided is the state that the extension will represent.
org.jivesoftware.smackx.commands.AdHocCommand: An ad-hoc command is responsible for executing the provided service and storing the result of the execution. Each new request will create a new instance of the command, allowing information related to executions to be stored in it. For example suppose that a command that retrieves the list of users on a server is implemented. When the command is executed it gets that list and the result is stored as a form in the command instance, i.e. the getForm method retrieves a form with all the users.  Each command has a node that should be unique within a given JID.  Commands may have zero or more stages. Each stage is usually used for gathering information required for the command execution. Users are able to move forward or backward across the different stages. Commands may not be cancelled while they are being executed. However, users may request the "cancel" action when submitting a stage response indicating that the command execution should be aborted. Thus, releasing any collected information. Commands that require user interaction (i.e. have more than one stage) will have to provide the data forms the user must complete in each stage and the allowed actions the user might perform during each stage (e.g. go to the previous stage or go to the next stage).  All the actions may throw an XMPPException if there is a problem executing them. The XMPPError of that exception may have some specific information about the problem. The possible extensions are: malformed-action. Extension of a bad-request error. bad-action. Extension of a bad-request error. bad-locale. Extension of a bad-request error. bad-payload. Extension of a bad-request error. bad-sessionid. Extension of a bad-request error. session-expired. Extension of a not-allowed error.  See the SpecificErrorCondition class for detailed description of each one.  Use the getSpecificErrorConditionFrom to obtain the specific information from an XMPPError.
org.jivesoftware.smackx.commands.AdHocCommand.addActionAvailable	(	Action	): Add an action to the current stage available actions. This should be used when creating a response.
org.jivesoftware.smackx.commands.AdHocCommand.addNote	(	AdHocCommandNote	): Adds a note to the current stage. This should be used when setting a response to the execution of an action. All the notes added here are returned by the getNotes method during the current stage. Once the stage changes all the notes are discarded.
org.jivesoftware.smackx.commands.AdHocCommand.cancel	(	): Cancels the execution of the command. This can be invoked on any stage of the execution. If there is a problem executing the command it throws an XMPPException.
org.jivesoftware.smackx.commands.AdHocCommand.complete	(	Form	): Completes the command execution with the information provided in the response. This form must be the answer form of the previous stage. This method will be only invoked for commands that have one or more stages. If there is a problem executing the command it throws an XMPPException.
org.jivesoftware.smackx.commands.AdHocCommand.execute	(	): Executes the command. This is invoked only on the first stage of the command. It is invoked on every command. If there is a problem executing the command it throws an XMPPException.
org.jivesoftware.smackx.commands.AdHocCommand.getActions	(	): Returns a collection with the allowed actions based on the current stage. Possible actions are: prev, next and complete. This method will be only invoked for commands that have one or more stages.
org.jivesoftware.smackx.commands.AdHocCommand.getData	(	): Gets the data of the current stage. This should not used.
org.jivesoftware.smackx.commands.AdHocCommand.getExecuteAction	(	): Returns the action available for the current stage which is considered the equivalent to "execute". When the requester sends his reply, if no action was defined in the command then the action will be assumed "execute" thus assuming the action returned by this method. This method will never be invoked for commands that have no stages.
org.jivesoftware.smackx.commands.AdHocCommand.getForm	(	): Returns the form of the current stage. Usually it is the form that must be answered to execute the next action. If that is the case it should be used by the requester to fill all the information that the executor needs to continue to the next stage. It can also be the result of the execution.
org.jivesoftware.smackx.commands.AdHocCommand.getName	(	): Returns the human readable name of the command.
org.jivesoftware.smackx.commands.AdHocCommand.getNode	(	): Returns the unique identifier of the command. It is unique for the OwnerJID.
org.jivesoftware.smackx.commands.AdHocCommand.getNotes	(	): Returns the notes that the command has at the current stage.
org.jivesoftware.smackx.commands.AdHocCommand.getOwnerJID	(	): Returns the full JID of the owner of this command. This JID is the "to" of a execution request.
org.jivesoftware.smackx.commands.AdHocCommand.getSpecificErrorCondition	(	XMPPError	): Returns the specific condition of the error or null if the error doesn't have any.
org.jivesoftware.smackx.commands.AdHocCommand.getStatus	(	): Returns the status of the current stage.
org.jivesoftware.smackx.commands.AdHocCommand.isCompleted	(	): Check if this command has been completed successfully.
org.jivesoftware.smackx.commands.AdHocCommand.isValidAction	(	Action	): Returns true if the action is available in the current stage. The cancel action is always allowed. To define the available actions use the addActionAvailable method.
org.jivesoftware.smackx.commands.AdHocCommand.next	(	Form	): Executes the next action of the command with the information provided in the response. This form must be the answer form of the previous stage. This method will be only invoked for commands that have one or more stages. If there is a problem executing the command it throws an XMPPException.
org.jivesoftware.smackx.commands.AdHocCommand.prev	(	): Goes to the previous stage. The requester is asking to re-send the information of the previous stage. The command must change it state to the previous one. If there is a problem executing the command it throws an XMPPException.
org.jivesoftware.smackx.commands.AdHocCommand.setData	(	AdHocCommandData	): Sets the data of the current stage. This should not used.
org.jivesoftware.smackx.commands.AdHocCommand.setExecuteAction	(	Action	): Sets which of the actions available for the current stage is considered the equivalent to "execute". This should be used when setting a response. When the requester sends his reply, if no action was defined in the command then the action will be assumed "execute" thus assuming the action returned by this method.
org.jivesoftware.smackx.commands.AdHocCommand.setForm	(	Form	): Sets the form of the current stage. This should be used when setting a response. It could be a form to fill out the information needed to go to the next stage or the result of an execution.
org.jivesoftware.smackx.commands.AdHocCommand.setName	(	String	): Set the the human readable name of the command, usually used for displaying in a UI.
org.jivesoftware.smackx.commands.AdHocCommand.setNode	(	String	): Sets the unique identifier of the command. This value must be unique for the OwnerJID.
org.jivesoftware.smackx.commands.AdHocCommandDiscoTest: AdHocCommand tests.
org.jivesoftware.smackx.commands.AdHocCommandDiscoTest.AdHocCommandDiscoTest	(	String	): Constructor for test.
org.jivesoftware.smackx.commands.AdHocCommandManager: An AdHocCommandManager is responsible for keeping the list of available commands offered by a service and for processing commands requests. Pass in an XMPPConnection instance to getAddHocCommandsManager() in order to get an instance of this class. 
org.jivesoftware.smackx.commands.AdHocCommandManager.AdHocCommandInfo: Stores ad-hoc command information.
org.jivesoftware.smackx.commands.AdHocCommandManager.discoverCommands	(	Jid	): Discover the commands of an specific JID. The jid is a full JID.
org.jivesoftware.smackx.commands.AdHocCommandManager.getAddHocCommandsManager	(	XMPPConnection	): Returns the AdHocCommandManager related to the connection.
org.jivesoftware.smackx.commands.AdHocCommandManager.getRegisteredCommands	(	): Returns the registered commands of this command manager, which is related to a connection.
org.jivesoftware.smackx.commands.AdHocCommandManager.getRemoteCommand	(	Jid	String	): Returns a command that represents an instance of a command in a remote host. It is used to execute remote commands. The concept is similar to RMI. Every invocation on this command is equivalent to an invocation in the remote command.
org.jivesoftware.smackx.commands.AdHocCommandManager.newInstanceOfCmd	(	String	String	): Creates a new instance of a command to be used by a new execution request
org.jivesoftware.smackx.commands.AdHocCommandManager.processAdHocCommand	(	AdHocCommandData	): Process the AdHoc-Command stanza(/packet) that request the execution of some action of a command. If this is the first request, this method checks, before executing the command, if:  The requested command exists The requester has permissions to execute it The command has more than one stage, if so, it saves the command and session ID for further use    If this is not the first request, this method checks, before executing the command, if:  The session ID of the request was stored The session life do not exceed the time out The action to execute is one of the available actions 
org.jivesoftware.smackx.commands.AdHocCommandManager.publishCommands	(	Jid	): Publish the commands to an specific JID.
org.jivesoftware.smackx.commands.AdHocCommandManager.registerCommand	(	String	String	Class	): Registers a new command with this command manager, which is related to a connection. The node is an unique identifier of that command for the connection related to this command manager. The name is the human readable name of the command. The class is the class of the command, which must extend LocalCommand and have a default constructor.
org.jivesoftware.smackx.commands.AdHocCommandManager.registerCommand	(	String	String	LocalCommandFactory	): Registers a new command with this command manager, which is related to a connection. The node is an unique identifier of that command for the connection related to this command manager. The name is the human readeale name of the command. The factory generates new instances of the command.
org.jivesoftware.smackx.commands.AdHocCommandManager.respondError	(	AdHocCommandData	XMPPError.Builder	): Responds an error with an specific error.
org.jivesoftware.smackx.commands.AdHocCommandManager.respondError	(	AdHocCommandData	XMPPError.Condition	): Responds an error with an specific condition.
org.jivesoftware.smackx.commands.AdHocCommandManager.respondError	(	AdHocCommandData	XMPPError.Condition	AdHocCommand.SpecificErrorCondition	): Responds an error with an specific condition.
org.jivesoftware.smackx.commands.AdHocCommandNote: Notes can be added to a command execution response. A note has a type and value.
org.jivesoftware.smackx.commands.AdHocCommandNote.AdHocCommandNote	(	Type	String	): Creates a new adhoc command note with the specified type and value.
org.jivesoftware.smackx.commands.AdHocCommandNote.getType	(	): Return the type of the note.
org.jivesoftware.smackx.commands.AdHocCommandNote.getValue	(	): Returns the value or message of the note.
org.jivesoftware.smackx.commands.LocalCommand: Represents a command that can be executed locally from a remote location. This class must be extended to implement an specific ad-hoc command. This class provides some useful tools: Node Name Session ID Current Stage Available actions Default action  To implement a new command extend this class and implement all the abstract methods. When implementing the actions remember that they could be invoked several times, and that you must use the current stage number to know what to do.
org.jivesoftware.smackx.commands.LocalCommand.decrementStage	(	): Decrease the current stage number. This is automatically handled and should not be called.
org.jivesoftware.smackx.commands.LocalCommand.getCreationDate	(	): Returns the date the command was created.
org.jivesoftware.smackx.commands.LocalCommand.getCurrentStage	(	): Returns the currently executing stage number. The first stage number is 0. During the execution of the first action this method will answer 0.
org.jivesoftware.smackx.commands.LocalCommand.getSessionID	(	): Returns the session ID of this execution.
org.jivesoftware.smackx.commands.LocalCommand.hasPermission	(	Jid	): Returns true if the specified requester has permission to execute all the stages of this action. This is checked when the first request is received, if the permission is grant then the requester will be able to execute all the stages of the command. It is not checked again during the execution.
org.jivesoftware.smackx.commands.LocalCommand.incrementStage	(	): Increase the current stage number. This is automatically handled and should not be called.
org.jivesoftware.smackx.commands.LocalCommand.isLastStage	(	): Returns true if the current stage is the last one. If it is then the execution of some action will complete the execution of the command. Commands that don't have multiple stages can always return true.
org.jivesoftware.smackx.commands.LocalCommand.setOwnerJID	(	Jid	): Sets the JID of the command host. This is automatically handled and should not be called.
org.jivesoftware.smackx.commands.LocalCommand.setSessionID	(	String	): The sessionID is an unique identifier of an execution request. This is automatically handled and should not be called.
org.jivesoftware.smackx.commands.LocalCommandFactory: A factory for creating local commands. It's useful in cases where instantiation of a command is more complicated than just using the default constructor. For example, when arguments must be passed into the constructor or when using a dependency injection framework. When a LocalCommandFactory isn't used, you can provide the AdHocCommandManager a Class object instead. For more details, see registerCommand(). 
org.jivesoftware.smackx.commands.LocalCommandFactory.getInstance	(	): Returns an instance of a LocalCommand.
org.jivesoftware.smackx.commands.RemoteCommand: Represents a command that is in a remote location. Invoking one of the execute, next, prev, cancel or complete actions results in executing that action in the remote location. In response to that action the internal state of the this command instance will change. For example, if the command is a single stage command, then invoking the execute action will execute this action in the remote location. After that the local instance will have a state of "completed" and a form or notes that applies.
org.jivesoftware.smackx.commands.RemoteCommand.RemoteCommand	(	XMPPConnection	String	Jid	): Creates a new RemoteCommand that uses an specific connection to execute a command identified by node in the host identified by jid
org.jivesoftware.smackx.commands.RemoteCommand.execute	(	Form	): Executes the default action of the command with the information provided in the Form. This form must be the answer form of the previous stage. If there is a problem executing the command it throws an XMPPException.
org.jivesoftware.smackx.commands.RemoteCommand.executeAction	(	Action	Form	): Executes the action with the form. The action could be any of the available actions. The form must be the answer of the previous stage. It can be null if it is the first stage.
org.jivesoftware.smackx.commands.packet.AdHocCommandData: Represents the state and the request of the execution of an adhoc command.
org.jivesoftware.smackx.commands.packet.AdHocCommandData.getAction	(	): Returns the action to execute. The action is set only on a request.
org.jivesoftware.smackx.commands.packet.AdHocCommandData.getForm	(	): Returns the form of the command.
org.jivesoftware.smackx.commands.packet.AdHocCommandData.getId	(	): Returns the JID of the command host.
org.jivesoftware.smackx.commands.packet.AdHocCommandData.getName	(	): Returns the human name of the command.
org.jivesoftware.smackx.commands.packet.AdHocCommandData.getNode	(	): Returns the identifier of the command.
org.jivesoftware.smackx.commands.packet.AdHocCommandData.getNotes	(	): Returns the list of notes that the command has.
org.jivesoftware.smackx.commands.packet.AdHocCommandData.getStatus	(	): Returns the status of the execution.
org.jivesoftware.smackx.commands.packet.AdHocCommandData.setSessionID	(	String	): Set the 'sessionid' attribute of the command.  This value can be null or empty for the first command, but MUST be set for subsequent commands. See also XEP-0050 § 3.3 Session Lifetime. 
org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider: The AdHocCommandDataProvider parses AdHocCommandData packets.
org.jivesoftware.smackx.csi.ClientStateIndicationManager: Manager for Client State Indication.
org.jivesoftware.smackx.csi.packet.ClientStateIndication: Client State Indication.
org.jivesoftware.smackx.debugger.EnhancedDebugger: The EnhancedDebugger is a debugger that allows to debug sent, received and interpreted messages but also provides the ability to send ad-hoc messages composed by the user.  A new EnhancedDebugger will be created for each connection to debug. All the EnhancedDebuggers will be shown in the same debug window provided by the class EnhancedDebuggerWindow.
org.jivesoftware.smackx.debugger.EnhancedDebugger.AdHocPacket: An ad-hoc stanza(/packet) is like any regular stanza(/packet) but with the exception that it's intention is to be used only to send packets.  The whole text to send must be passed to the constructor. This implies that the client of this class is responsible for sending a valid text to the constructor.
org.jivesoftware.smackx.debugger.EnhancedDebugger.AdHocPacket.AdHocPacket	(	String	): Create a new AdHocPacket with the text to send. The passed text must be a valid text to send to the server, no validation will be done on the passed text.
org.jivesoftware.smackx.debugger.EnhancedDebugger.PopupListener: Listens for debug window popup dialog events.
org.jivesoftware.smackx.debugger.EnhancedDebugger.addReadPacketToTable	(	SimpleDateFormat	Stanza	): Adds the received stanza(/packet) detail to the messages table.
org.jivesoftware.smackx.debugger.EnhancedDebugger.addSentPacketToTable	(	SimpleDateFormat	Stanza	): Adds the sent stanza(/packet) detail to the messages table.
org.jivesoftware.smackx.debugger.EnhancedDebugger.cancel	(	): Stops debugging the connection. Removes any listener on the connection.
org.jivesoftware.smackx.debugger.EnhancedDebugger.createDebug	(	): Creates the debug process, which is a GUI window that displays XML traffic.
org.jivesoftware.smackx.debugger.EnhancedDebugger.isConnectionActive	(	): Returns true if the debugger's connection with the server is up and running.
org.jivesoftware.smackx.debugger.EnhancedDebugger.updateStatistics	(	): Updates the statistics table
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow: The EnhancedDebuggerWindow is the main debug window that will show all the EnhancedDebuggers. For each connection to debug there will be an EnhancedDebugger that will be shown in the EnhancedDebuggerWindow.  This class also provides information about Smack like for example the Smack version and the installed providers.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.PopupListener: Listens for debug window popup dialog events.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.addDebugger	(	EnhancedDebugger	): Adds the new specified debugger to the list of debuggers to show in the main window.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.connectionClosed	(	EnhancedDebugger	): Notification that the connection was properly closed.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.connectionClosedOnError	(	EnhancedDebugger	Exception	): Notification that the connection was closed due to an exception.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.createDebug	(	): Creates the main debug window that provides information about Smack and also shows a tab panel for each connection that is being debugged.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.getInstance	(	): Returns the unique EnhancedDebuggerWindow instance available in the system.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.rootWindowClosing	(	WindowEvent	): Notification that the root window is closing. Stop listening for received and transmitted packets in all the debugged connections.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.showNewDebugger	(	EnhancedDebugger	): Shows the new debugger in the debug window.
org.jivesoftware.smackx.debugger.EnhancedDebuggerWindow.userHasLogged	(	EnhancedDebugger	String	): Notification that a user has logged in to the server. A new title will be set to the tab of the given debugger.
org.jivesoftware.smackx.debugger.LiteDebugger: The LiteDebugger is a very simple debugger that allows to debug sent, received and interpreted messages.
org.jivesoftware.smackx.debugger.LiteDebugger.PopupListener: Listens for debug window popup dialog events.
org.jivesoftware.smackx.debugger.LiteDebugger.createDebug	(	): Creates the debug process, which is a GUI window that displays XML traffic.
org.jivesoftware.smackx.debugger.LiteDebugger.rootWindowClosing	(	WindowEvent	): Notification that the root window is closing. Stop listening for received and transmitted packets.
org.jivesoftware.smackx.debugger.android.AndroidDebugger: Very simple debugger that prints to the android log the sent and received stanzas.  Only use this debugger if really required, Android has a good java.util.logging implementation, therefore org.jivesoftware.smack.debugger.JulDebugger is preferred.  It is possible to not only print the raw sent and received stanzas but also the interpreted packets by Smack. By default interpreted packets won't be printed. To enable this feature just change the printInterpreted static variable to true.
org.jivesoftware.smackx.debugger.slf4j.SLF4JDebuggerFactory: Implementation of SmackDebuggerFactory which always creates instance of SLF4JSmackDebugger.
org.jivesoftware.smackx.debugger.slf4j.SLF4JSmackDebugger: Implementation of SmackDebugger that writes log messages using SLF4J API. Use in conjunction with your SLF4J bindings of choice. See SLF4J manual for more details about bindings usage.
org.jivesoftware.smackx.debugger.slf4j.SLF4JSmackDebugger.SLF4JSmackDebugger	(	XMPPConnection	Writer	Reader	): Create new SLF4J Smack Debugger instance.
org.jivesoftware.smackx.debugger.slf4j.SLF4JSmackDebugger.enable	(	): Makes Smack use this Debugger.
org.jivesoftware.smackx.debugger.slf4j.Validate: This is package-level helper class to validate dependencies while initialization is in progress
org.jivesoftware.smackx.delay.DelayInformationManager: Delayed Delivery (XEP-203).
org.jivesoftware.smackx.delay.DelayInformationManager.getDelayInformation	(	Stanza	): Get Delayed Delivery information. This method first looks for a PacketExtension with the XEP-203 namespace and falls back to the XEP-91 namespace.
org.jivesoftware.smackx.delay.DelayInformationManager.getDelayTimestamp	(	Stanza	): Get the Delayed Delivery timestamp or null.
org.jivesoftware.smackx.delay.DelayInformationManager.getLegacyDelayInformation	(	Stanza	): Get Delayed Delivery information as defined in XEP-91  Prefer getDelayInformation() over this method for backwards compatibility. 
org.jivesoftware.smackx.delay.DelayInformationManager.getXep203DelayInformation	(	Stanza	): Get Delayed Delivery information as defined in XEP-203  Prefer getDelayInformation() over this method for backwards compatibility. 
org.jivesoftware.smackx.delay.DelayInformationManager.isDelayedStanza	(	Stanza	): Check if the given stanza is a delayed stanza as of XEP-203.
org.jivesoftware.smackx.delay.filter.DelayedStanzaFilter: Filters stanza with delay information, ie. stanzas that got delayed for some reason
org.jivesoftware.smackx.delay.packet.DelayInformation: Represents timestamp information about data stored for later delivery. A DelayInformation will always includes the timestamp when the stanza(/packet) was originally sent and may include more information such as the JID of the entity that originally sent the stanza(/packet) as well as the reason for the delay. For more information see XEP-0091 and XEP-0203.
org.jivesoftware.smackx.delay.packet.DelayInformation.DelayInformation	(	Date	String	String	): Creates a new instance with the specified timestamp. 
org.jivesoftware.smackx.delay.packet.DelayInformation.from	(	Stanza	): Return delay information from the given stanza.
org.jivesoftware.smackx.delay.packet.DelayInformation.getFrom	(	): Returns the JID of the entity that originally sent the stanza(/packet) or that delayed the delivery of the stanza(/packet) or null if this information is not available.
org.jivesoftware.smackx.delay.packet.DelayInformation.getFrom	(	Stanza	): Return delay information from the given stanza.
org.jivesoftware.smackx.delay.packet.DelayInformation.getReason	(	): Returns a natural-language description of the reason for the delay or null if this information is not available.
org.jivesoftware.smackx.delay.packet.DelayInformation.getStamp	(	): Returns the timestamp when the stanza(/packet) was originally sent. The returned Date is be understood as UTC.
org.jivesoftware.smackx.delay.provider.DelayInformationProvider: The DelayInformationProvider parses DelayInformation packets.
org.jivesoftware.smackx.delay.provider.LegacyDelayInformationProvider: The DelayInformationProvider parses DelayInformation packets.
org.jivesoftware.smackx.disco.Feature: Utility class for Features.
org.jivesoftware.smackx.disco.NodeInformationProvider: The NodeInformationProvider is responsible for providing supported indentities, features and hosted items (i.e. DiscoverItems.Item) about a given node. This information will be requested each time this XMPPP client receives a disco info or items requests on the given node. each time this XMPPP client receives a disco info or items requests on the given node.
org.jivesoftware.smackx.disco.NodeInformationProvider.getNodeFeatures	(	): Returns a list of the features defined in the node. For example, the entity caps protocol specifies that an XMPP client should answer with each feature supported by the client version or extension.
org.jivesoftware.smackx.disco.NodeInformationProvider.getNodeIdentities	(	): Returns a list of the indentites defined in the node. For example, the x-command protocol must provide an identity of category automation and type command-node for each command.
org.jivesoftware.smackx.disco.NodeInformationProvider.getNodeItems	(	): Returns a list of the Items org.jivesoftware.smackx.disco.packet.DiscoverItems.Item defined in the node. For example, the MUC protocol specifies that an XMPP client should answer an Item for each joined room when asked for the rooms where the use has joined.
org.jivesoftware.smackx.disco.NodeInformationProvider.getNodePacketExtensions	(	): Returns a list of the stanza(/packet) extensions defined in the node.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager: Manages discovery of services in XMPP entities. This class provides:  A registry of supported features in this XMPP entity. Automatic response when this XMPP entity is queried for information. Ability to discover items and information of remote XMPP entities. Ability to publish publicly available items.  
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.ServiceDiscoveryManager	(	XMPPConnection	): Creates a new ServiceDiscoveryManager for a given XMPPConnection. This means that the service manager will respond to any service discovery request that the connection may receive. 
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.addDiscoverInfoTo	(	DiscoverInfo	): Add discover info response data.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.addFeature	(	String	): Registers that a new feature is supported by this XMPP entity. When this client is queried for its information the registered features will be answered. Since no stanza(/packet) is actually sent to the server it is safe to perform this operation before logging to the server. In fact, you may want to configure the supported features before logging to the server so that the information is already available if it is required upon login.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.addIdentity	(	DiscoverInfo.Identity	): Add an further identity to the client.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.canPublishItems	(	DiscoverInfo	): Returns true if the server supports publishing of items. A client may wish to publish items to the server so that the server can provide items associated to the client. These items will be returned by the server whenever the server receives a disco request targeted to the bare address of the client (i.e. user@host.com).
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.canPublishItems	(	Jid	): Returns true if the server supports publishing of items. A client may wish to publish items to the server so that the server can provide items associated to the client. These items will be returned by the server whenever the server receives a disco request targeted to the bare address of the client (i.e. user@host.com).
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.discoverInfo	(	Jid	): Returns the discovered information of a given XMPP entity addressed by its JID. Use null as entityID to query the server
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.discoverInfo	(	Jid	String	): Returns the discovered information of a given XMPP entity addressed by its JID and note attribute. Use this message only when trying to query information which is not directly addressable.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.discoverItems	(	Jid	): Returns the discovered items of a given XMPP entity addressed by its JID.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.discoverItems	(	Jid	String	): Returns the discovered items of a given XMPP entity addressed by its JID and note attribute. Use this message only when trying to query information which is not directly addressable.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.findServices	(	String	boolean	boolean	): Find all services under the users service that provide a given feature.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.findServicesDiscoverInfo	(	String	boolean	boolean	): Find all services under the users service that provide a given feature.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getExtendedInfo	(	): Returns the data form that is set as extended information for this Service Discovery instance (XEP-0128).
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getExtendedInfoAsList	(	): Returns the data form as List of PacketExtensions, or null if no data form is set. This representation is needed by some classes (e.g. EntityCapsManager, NodeInformationProvider)
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getFeatures	(	): Returns the supported features by this XMPP entity.  The result is a copied modifiable list of the original features. 
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getIdentities	(	): Returns all identities of this client as unmodifiable Collection.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getIdentity	(	): Return the default identity of the client.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getIdentityName	(	): Returns the name of the client that will be returned when asked for the client identity in a disco request. The name could be any value you need to identity this client.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getIdentityType	(	): Returns the type of client that will be returned when asked for the client identity in a disco request. The valid types are defined by the category client. Follow this link to learn the possible types: Jabber::Registrar.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getInstanceFor	(	XMPPConnection	): Returns the ServiceDiscoveryManager instance associated with a given XMPPConnection.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.getNodeInformationProvider	(	String	): Returns the NodeInformationProvider responsible for providing information (ie items) related to a given node or null if none. In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.includesFeature	(	String	): Returns true if the specified feature is registered in the ServiceDiscoveryManager.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.publishItems	(	Jid	DiscoverItems	): Publishes new items to a parent entity. The item elements to publish MUST have at least a 'jid' attribute specifying the Entity ID of the item, and an action attribute which specifies the action being taken for that item. Possible action values are: "update" and "remove".
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.publishItems	(	Jid	String	DiscoverItems	): Publishes new items to a parent entity and node. The item elements to publish MUST have at least a 'jid' attribute specifying the Entity ID of the item, and an action attribute which specifies the action being taken for that item. Possible action values are: "update" and "remove".
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.removeExtendedInfo	(	): Removes the data form containing extended service discovery information from the information returned by this XMPP entity. Since no stanza(/packet) is actually sent to the server it is safe to perform this operation before logging to the server.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.removeFeature	(	String	): Removes the specified feature from the supported features by this XMPP entity. Since no stanza(/packet) is actually sent to the server it is safe to perform this operation before logging to the server.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.removeIdentity	(	DiscoverInfo.Identity	): Remove an identity from the client. Note that the client needs at least one identity, the default identity, which can not be removed.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.removeNodeInformationProvider	(	String	): Removes the NodeInformationProvider responsible for providing information (ie items) related to a given node. This means that no more information will be available for the specified node. In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined. 
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.renewEntityCapsVersion	(	): Updates the Entity Capabilities Verification String if EntityCaps is enabled.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.serverSupportsFeature	(	CharSequence	): Returns true if the server supports the given feature.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.setDefaultIdentity	(	DiscoverInfo.Identity	): Set the default identity all new connections will have. If unchanged the default identity is an identity where category is set to 'client', type is set to 'pc' and name is set to 'Smack'.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.setEntityCapsManager	(	EntityCapsManager	): Loads the ServiceDiscoveryManager with an EntityCapsManger that speeds up certain lookups.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.setExtendedInfo	(	DataForm	): Registers extended discovery information of this XMPP entity. When this client is queried for its information this data form will be returned as specified by XEP-0128.  Since no stanza(/packet) is actually sent to the server it is safe to perform this operation before logging to the server. In fact, you may want to configure the extended info before logging to the server so that the information is already available if it is required upon login.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.setIdentity	(	Identity	): Sets the default identity the client will report.
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.setNodeInformationProvider	(	String	NodeInformationProvider	): Sets the NodeInformationProvider responsible for providing information (ie items) related to a given node. Every time this client receives a disco request regarding the items of a given node, the provider associated to that node will be the responsible for providing the requested information. In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined. 
org.jivesoftware.smackx.disco.ServiceDiscoveryManager.supportsFeature	(	Jid	CharSequence	): Queries the remote entity for it's features and returns true if the given feature is found.
org.jivesoftware.smackx.disco.packet.DiscoverInfo: A DiscoverInfo IQ packet, which is used by XMPP clients to request and receive information to/from other XMPP entities. The received information may contain one or more identities of the requested XMPP entity, and a list of supported features by the requested XMPP entity.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.DiscoverInfo	(	DiscoverInfo	): Copy constructor.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Feature: Represents the features offered by the item. This information helps requestors determine what actions are possible with regard to this item (registration, search, join, etc.) as well as specific feature types of interest, if any (e.g., for the purpose of feature negotiation).
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Feature.Feature	(	String	): Creates a new feature offered by an XMPP entity or item.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Feature.getVar	(	): Returns the feature's variable.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity: Represents the identity of a given XMPP entity. An entity may have many identities but all the identities SHOULD have the same name. Refer to Jabber::Registrar in order to get the official registry of values for the category and type attributes.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.Identity	(	String	String	): Creates a new identity for an XMPP entity.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.Identity	(	String	String	String	): Creates a new identity for an XMPP entity. 'category' and 'type' are required by XEP-30 XML Schemas
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.Identity	(	String	String	String	String	): Creates a new identity for an XMPP entity. 'category' and 'type' are required by XEP-30 XML Schemas
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.compareTo	(	DiscoverInfo.Identity	): Compares this identity with another one. The comparison order is: Category, Type, Lang. If all three are identical the other Identity is considered equal. Name is not used for comparison, as defined by XEP-0115
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.equals	(	Object	): Check equality for Identity for category, type, lang and name in that order as defined by XEP-0015 5.4 Processing Method (Step 3.3).
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.getCategory	(	): Returns the entity's category. To get the official registry of values for the 'category' attribute refer to Jabber::Registrar 
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.getLanguage	(	): Returns the identities natural language if one is set.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.getName	(	): Returns the identity's name.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.getType	(	): Returns the entity's type. To get the official registry of values for the 'type' attribute refer to Jabber::Registrar 
org.jivesoftware.smackx.disco.packet.DiscoverInfo.Identity.isOfCategoryAndType	(	String	String	): Returns true if this identity is of the given category and type.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.addFeature	(	String	): Adds a new feature to the discovered information.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.addFeatures	(	Collection	): Adds a collection of features to the packet. Does noting if featuresToAdd is null.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.addIdentities	(	Collection	): Adds identities to the DiscoverInfo stanza.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.addIdentity	(	Identity	): Adds a new identity of the requested entity to the discovered information.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.containsDuplicateFeatures	(	): Test if a DiscoverInfo response contains duplicate features.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.containsDuplicateIdentities	(	): Test if a DiscoverInfo response contains duplicate identities.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.containsFeature	(	CharSequence	): Returns true if the specified feature is part of the discovered information.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.getFeatures	(	): Returns the discovered features of an XMPP entity.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.getIdentities	(	): Returns the discovered identities of an XMPP entity.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.getIdentities	(	String	String	): Returns all Identities of the given category and type of this DiscoverInfo.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.getNode	(	): Returns the node attribute that supplements the 'jid' attribute. A node is merely something that is associated with a JID and for which the JID can provide information. Node attributes SHOULD be used only when trying to provide or query information which is not directly addressable.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.hasIdentity	(	String	String	): Returns true if this DiscoverInfo contains at least one Identity of the given category and type.
org.jivesoftware.smackx.disco.packet.DiscoverInfo.setNode	(	String	): Sets the node attribute that supplements the 'jid' attribute. A node is merely something that is associated with a JID and for which the JID can provide information. Node attributes SHOULD be used only when trying to provide or query information which is not directly addressable.
org.jivesoftware.smackx.disco.packet.DiscoverItems: A DiscoverItems IQ packet, which is used by XMPP clients to request and receive items associated with XMPP entities. The items could also be queried in order to discover if they contain items inside. Some items may be addressable by its JID and others may require to be addressed by a JID and a node name.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item: An item is associated with an XMPP Entity, usually thought of a children of the parent entity and normally are addressable as a JID. An item associated with an entity may not be addressable as a JID. In order to handle such items, Service Discovery uses an optional 'node' attribute that supplements the 'jid' attribute.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item.Item	(	Jid	): Create a new Item associated with a given entity.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item.getAction	(	): Returns the action that specifies the action being taken for this item. Possible action values are: "update" and "remove". Update should either create a new entry if the node and jid combination does not already exist, or simply update an existing entry. If "remove" is used as the action, the item should be removed from persistent storage.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item.getEntityID	(	): Returns the entity's ID.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item.getName	(	): Returns the entity's name.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item.getNode	(	): Returns the node attribute that supplements the 'jid' attribute. A node is merely something that is associated with a JID and for which the JID can provide information. Node attributes SHOULD be used only when trying to provide or query information which is not directly addressable.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item.setAction	(	String	): Sets the action that specifies the action being taken for this item. Possible action values are: "update" and "remove". Update should either create a new entry if the node and jid combination does not already exist, or simply update an existing entry. If "remove" is used as the action, the item should be removed from persistent storage.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item.setName	(	String	): Sets the entity's name.
org.jivesoftware.smackx.disco.packet.DiscoverItems.Item.setNode	(	String	): Sets the node attribute that supplements the 'jid' attribute. A node is merely something that is associated with a JID and for which the JID can provide information. Node attributes SHOULD be used only when trying to provide or query information which is not directly addressable.
org.jivesoftware.smackx.disco.packet.DiscoverItems.addItem	(	Item	): Adds a new item to the discovered information.
org.jivesoftware.smackx.disco.packet.DiscoverItems.addItems	(	Collection	): Adds a collection of items to the discovered information. Does nothing if itemsToAdd is null
org.jivesoftware.smackx.disco.packet.DiscoverItems.getItems	(	): Returns the discovered items of the queried XMPP entity. 
org.jivesoftware.smackx.disco.packet.DiscoverItems.getNode	(	): Returns the node attribute that supplements the 'jid' attribute. A node is merely something that is associated with a JID and for which the JID can provide information. Node attributes SHOULD be used only when trying to provide or query information which is not directly addressable.
org.jivesoftware.smackx.disco.packet.DiscoverItems.setNode	(	String	): Sets the node attribute that supplements the 'jid' attribute. A node is merely something that is associated with a JID and for which the JID can provide information. Node attributes SHOULD be used only when trying to provide or query information which is not directly addressable.
org.jivesoftware.smackx.disco.provider.DiscoverInfoProvider: The DiscoverInfoProvider parses Service Discovery information packets.
org.jivesoftware.smackx.disco.provider.DiscoverItemsProvider: The DiscoverInfoProvider parses Service Discovery items packets.
org.jivesoftware.smackx.eme.element.ExplicitMessageEncryptionElement.getName	(	): Get the optional name of the encryption method.
org.jivesoftware.smackx.filetransfer.FaultTolerantNegotiator: The fault tolerant negotiator takes two stream negotiators, the primary and the secondary negotiator. If the primary negotiator fails during the stream negotiation process, the second negotiator is used.
org.jivesoftware.smackx.filetransfer.FileTransfer: Contains the generic file information and progress related to a particular file transfer.
org.jivesoftware.smackx.filetransfer.FileTransfer.cancel	(	): Cancels the file transfer.
org.jivesoftware.smackx.filetransfer.FileTransfer.getAmountWritten	(	): Return the length of bytes written out to the stream.
org.jivesoftware.smackx.filetransfer.FileTransfer.getError	(	): When getStatus() returns that there was an error during the transfer, the type of error can be retrieved through this method.
org.jivesoftware.smackx.filetransfer.FileTransfer.getException	(	): If an exception occurs asynchronously it will be stored for later retrieval. If there is an error there maybe an exception set.
org.jivesoftware.smackx.filetransfer.FileTransfer.getFileName	(	): Returns the name of the file being transferred.
org.jivesoftware.smackx.filetransfer.FileTransfer.getFilePath	(	): Returns the local path of the file.
org.jivesoftware.smackx.filetransfer.FileTransfer.getFileSize	(	): Returns the size of the file being transferred.
org.jivesoftware.smackx.filetransfer.FileTransfer.getPeer	(	): Returns the JID of the peer for this file transfer.
org.jivesoftware.smackx.filetransfer.FileTransfer.getProgress	(	): Returns the progress of the file transfer as a number between 0 and 1.
org.jivesoftware.smackx.filetransfer.FileTransfer.getStatus	(	): Returns the current status of the file transfer.
org.jivesoftware.smackx.filetransfer.FileTransfer.isDone	(	): Returns true if the transfer has been cancelled, if it has stopped because of a an error, or the transfer completed successfully.
org.jivesoftware.smackx.filetransfer.FileTransferListener: File transfers can cause several events to be raised. These events can be monitored through this interface.
org.jivesoftware.smackx.filetransfer.FileTransferListener.fileTransferRequest	(	FileTransferRequest	): A request to send a file has been received from another user.
org.jivesoftware.smackx.filetransfer.FileTransferManager: The file transfer manager class handles the sending and receiving of files. To send a file invoke the createOutgoingFileTransfer() method.  And to receive a file add a file transfer listener to the manager. The listener will notify you when there is a new file transfer request. To create the IncomingFileTransfer object accept the transfer, or, if the transfer is not desirable reject it.
org.jivesoftware.smackx.filetransfer.FileTransferManager.FileTransferManager	(	XMPPConnection	): Creates a file transfer manager to initiate and receive file transfers.
org.jivesoftware.smackx.filetransfer.FileTransferManager.addFileTransferListener	(	FileTransferListener	): Add a file transfer listener to listen to incoming file transfer requests.
org.jivesoftware.smackx.filetransfer.FileTransferManager.createIncomingFileTransfer	(	FileTransferRequest	): When the file transfer request is acceptable, this method should be invoked. It will create an IncomingFileTransfer which allows the transmission of the file to proceed.
org.jivesoftware.smackx.filetransfer.FileTransferManager.createOutgoingFileTransfer	(	EntityFullJid	): Creates an OutgoingFileTransfer to send a file to another user.
org.jivesoftware.smackx.filetransfer.FileTransferManager.rejectIncomingFileTransfer	(	FileTransferRequest	): Reject an incoming file transfer.  Specified in XEP-95 4.2 and 3.2 Example 8 
org.jivesoftware.smackx.filetransfer.FileTransferManager.removeFileTransferListener	(	FileTransferListener	): Removes a file transfer listener.
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator: Manages the negotiation of file transfers according to XEP-0096. If a file is being sent the remote user chooses the type of stream under which the file will be sent.
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator.getInstanceFor	(	XMPPConnection	): Returns the file transfer negotiator related to a particular connection. When this class is requested on a particular connection the file transfer service is automatically enabled.
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator.getNextStreamID	(	): Returns a new, unique, stream ID to identify a file transfer.
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator.getSupportedProtocols	(	): Returns a collection of the supported transfer protocols.
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator.isServiceEnabled	(	XMPPConnection	): Checks to see if all file transfer related services are enabled on the connection.
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator.negotiateOutgoingTransfer	(	Jid	String	String	long	String	int	): Send a request to another user to send them a file. The other user has the option of, accepting, rejecting, or not responding to a received file transfer request.  If they accept, the stanza(/packet) will contain the other user's chosen stream type to send the file across. The two choices this implementation provides to the other user for file transfer are SOCKS5 Bytestreams, which is the preferred method of transfer, and In-Band Bytestreams, which is the fallback mechanism.  The other user may choose to decline the file request if they do not desire the file, their client does not support XEP-0096, or if there are no acceptable means to transfer the file.  Finally, if the other user does not respond this method will return null after the specified timeout.
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator.selectStreamNegotiator	(	FileTransferRequest	): Selects an appropriate stream negotiator after examining the incoming file transfer request.
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator.setServiceEnabled	(	XMPPConnection	boolean	): Enable the Jabber services related to file transfer on the particular connection.
org.jivesoftware.smackx.filetransfer.FileTransferRequest: A request to send a file received from another user.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.FileTransferRequest	(	FileTransferManager	StreamInitiation	): A receive request is constructed from the Stream Initiation request received from the initiator.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.accept	(	): Accepts this file transfer and creates the incoming file transfer.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.getDescription	(	): Returns the description of the file provided by the requester.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.getFileName	(	): Returns the name of the file.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.getFileSize	(	): Returns the size in bytes of the file.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.getMimeType	(	): Returns the mime-type of the file.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.getRequestor	(	): Returns the fully-qualified jabber ID of the user that requested this file transfer.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.getStreamID	(	): Returns the stream ID that uniquely identifies this file transfer.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.getStreamInitiation	(	): Returns the stream initiation stanza(/packet) that was sent by the requester which contains the parameters of the file transfer being transfer and also the methods available to transfer the file.
org.jivesoftware.smackx.filetransfer.FileTransferRequest.reject	(	): Rejects the file transfer request.
org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator: The In-Band Bytestream file transfer method, or IBB for short, transfers the file over the same XML Stream used by XMPP. It is the fall-back mechanism in case the SOCKS5 bytestream method of transferring files is not available.
org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator.ByteStreamRequest: Derive from InBandBytestreamRequest to access protected constructor.
org.jivesoftware.smackx.filetransfer.IBBTransferNegotiator.IBBTransferNegotiator	(	XMPPConnection	): The default constructor for the In-Band Bytestream Negotiator.
org.jivesoftware.smackx.filetransfer.IncomingFileTransfer: An incoming file transfer is created when the createIncomingFileTransfer() method is invoked. It is a file being sent to the local user from another user on the jabber network. There are two stages of the file transfer to be concerned with and they can be handled in different ways depending upon the method that is invoked on this class.  The first way that a file is received is by calling the receiveFile() method. This method, negotiates the appropriate stream method and then returns the InputStream to read the file data from.  The second way that a file can be received through this class is by invoking the receiveFile() method. This method returns immediately and takes as its parameter a file on the local file system where the file recieved from the transfer will be put.
org.jivesoftware.smackx.filetransfer.IncomingFileTransfer.receiveFile	(	): Negotiates the stream method to transfer the file over and then returns the negotiated stream.
org.jivesoftware.smackx.filetransfer.IncomingFileTransfer.receiveFile	(	File	): This method negotiates the stream and then transfer's the file over the negotiated stream. The transferred file will be saved at the provided location.  This method will return immediately, file transfer progress can be monitored through several methods:   getStatus() getProgress() isDone() 
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer: Handles the sending of a file to another user. File transfer's in jabber have several steps and there are several methods in this class that handle these steps differently.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.NegotiationProgress: A callback class to retrieve the status of an outgoing transfer negotiation process.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.NegotiationProgress.errorEstablishingStream	(	Exception	): Called when an exception occurs during the negotiation progress.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.NegotiationProgress.outputStreamEstablished	(	OutputStream	): Once the negotiation process is completed the output stream can be retrieved.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.NegotiationProgress.statusUpdated	(	Status	Status	): Called when the status changes.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.getBytesSent	(	): Returns the amount of bytes that have been sent for the file transfer. Or -1 if the file transfer has not started.  Note: This method is only useful when the sendFile() method is called, as it is the only method that actually transmits the file.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.getOutputStream	(	): Returns the output stream connected to the peer to transfer the file. It is only available after it has been successfully negotiated by the StreamNegotiator.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.getResponseTimeout	(	): Returns the time in milliseconds after which the file transfer negotiation process will timeout if the other user has not responded.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.sendFile	(	File	String	): This method handles the stream negotiation process and transmits the file to the remote user. It returns immediately and the progress of the file transfer can be monitored through several methods:  getStatus() getProgress() isDone() 
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.sendFile	(	String	long	String	): This method handles the negotiation of the file transfer and the stream, it only returns the created stream after the negotiation has been completed.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.sendFile	(	String	long	String	NegotiationProgress	): This methods handles the transfer and stream negotiation process. It returns immediately and its progress will be updated through the NegotiationProgress callback.
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.sendStream	(	InputStream	String	long	String	): This method handles the stream negotiation process and transmits the file to the remote user. It returns immediately and the progress of the file transfer can be monitored through several methods:  getStatus() getProgress() isDone() 
org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer.setResponseTimeout	(	int	): Sets the time in milliseconds after which the file transfer negotiation process will timeout if the other user has not responded.
org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator: Negotiates a SOCKS5 Bytestream to be used for file transfers. The implementation is based on the Socks5BytestreamManager and the Socks5BytestreamRequest.
org.jivesoftware.smackx.filetransfer.Socks5TransferNegotiator.ByteStreamRequest: Derive from Socks5BytestreamRequest to access protected constructor.
org.jivesoftware.smackx.filetransfer.StreamNegotiator: After the file transfer negotiation process is completed according to XEP-0096, the negotiation process is passed off to a particular stream negotiator. The stream negotiator will then negotiate the chosen stream and return the stream to transfer the file.
org.jivesoftware.smackx.filetransfer.StreamNegotiator.createIncomingStream	(	StreamInitiation	): This method handles the file stream download negotiation process. The appropriate stream negotiator's initiate incoming stream is called after an appropriate file transfer method is selected. The manager will respond to the initiator with the selected means of transfer, then it will handle any negotiation specific to the particular transfer method. This method returns the InputStream, ready to transfer the file.
org.jivesoftware.smackx.filetransfer.StreamNegotiator.createInitiationAccept	(	StreamInitiation	String[]	): Creates the initiation acceptance stanza(/packet) to forward to the stream initiator.
org.jivesoftware.smackx.filetransfer.StreamNegotiator.createOutgoingStream	(	String	Jid	Jid	): This method handles the file upload stream negotiation process. The particular stream negotiator is determined during the file transfer negotiation process. This method returns the OutputStream to transmit the file to the remote user.
org.jivesoftware.smackx.filetransfer.StreamNegotiator.getNamespaces	(	): Returns the XMPP namespace reserved for this particular type of file transfer.
org.jivesoftware.smackx.filetransfer.StreamNegotiator.newStreamInitiation	(	Jid	String	): Signal that a new stream initiation arrived. The negotiator may needs to prepare for it.
org.jivesoftware.smackx.forward.packet.Forwarded: Stanza(/Packet) extension for >XEP-0297: Stanza Forwarding.
org.jivesoftware.smackx.forward.packet.Forwarded.Forwarded	(	DelayInformation	Stanza	): Creates a new Forwarded stanza(/packet) extension.
org.jivesoftware.smackx.forward.packet.Forwarded.Forwarded	(	Stanza	): Creates a new Forwarded stanza(/packet) extension.
org.jivesoftware.smackx.forward.packet.Forwarded.from	(	Stanza	): Get the forwarded extension.
org.jivesoftware.smackx.forward.packet.Forwarded.getDelayInformation	(	): get the timestamp of the forwarded packet.
org.jivesoftware.smackx.forward.packet.Forwarded.getForwardedPacket	(	): get the stanza(/packet) forwarded by this stanza.
org.jivesoftware.smackx.forward.packet.Forwarded.getForwardedStanza	(	): Get the forwarded Stanza found in this extension.
org.jivesoftware.smackx.forward.provider.ForwardedProvider: This class implements the ExtensionElementProvider to parse forwarded messages from a packet. It will return a Forwarded stanza(/packet) extension.
org.jivesoftware.smackx.gcm.packet.GcmPacketExtension: XMPP extension elements as used by Google's GCM Cloud Connection Server (XMPP).  This extension is semantically the same as org.jivesoftware.smackx.json.packet.JsonPacketExtension, but with a different element and namespace. It is used to exchange message stanzas with a JSON payload as extension element. 
org.jivesoftware.smackx.gcm.packet.GcmPacketExtension.from	(	Stanza	): Retrieve the GCM stanza(/packet) extension from the packet.
org.jivesoftware.smackx.geoloc.GeoLocationManager.getInstanceFor	(	XMPPConnection	): Retrieves a GeoLocationManager for the specified XMPPConnection, creating one if it doesn't already exist.
org.jivesoftware.smackx.geoloc.GeoLocationManager.isGeoLocationMessage	(	Message	): Returns true if the message contains a GeoLocation extension.
org.jivesoftware.smackx.geoloc.packet.GeoLocation: A GeoLocation Extension packet, which is used by the XMPP clients to exchange their respective geographic locations.
org.jivesoftware.smackx.geoloc.packet.GeoLocationTest: Unit tests for GeoLocation.
org.jivesoftware.smackx.hashes.HashElementTest: Test toXML and parse of HashElement and HashElementProvider.
org.jivesoftware.smackx.hashes.HashManager: Manager that can be used to determine support for hash functions.
org.jivesoftware.smackx.hashes.HashManager.HashManager	(	XMPPConnection	): Constructor of the HashManager. By default the Manager announces support for XEP-0300, as well as for the RECOMMENDED set of hash algorithms. Those contain SHA256, SHA384, SHA512, SHA3-256, SHA3-384, SHA3-512, BLAKE2B256, BLAKE2B384 and BLAKE2B512. Those algorithms got recommended here: https://xmpp.org/extensions/xep-0300.html#recommendations
org.jivesoftware.smackx.hashes.HashManager.addAlgorithmsToFeatures	(	List	): Announce support for the given list of algorithms.
org.jivesoftware.smackx.hashes.HashManager.asFeature	(	ALGORITHM	): Return the feature name of the given algorithm.
org.jivesoftware.smackx.hashes.HashManager.getInstanceFor	(	XMPPConnection	): Get an instance of the HashManager for the given connection.
org.jivesoftware.smackx.hashes.HashManager.hash	(	ALGORITHM	byte[]	): Calculate the hash sum of data using algorithm.
org.jivesoftware.smackx.hashes.HashManager.hex	(	byte[]	): Encode a byte array in HEX.
org.jivesoftware.smackx.hashes.HashTest: Test HashManager functionality. The test sums got calculated using 'echo "Hello World!" | { md5sum, sha1sum, sha224sum, sha256sum, sha384sum, sha512sum, sha3-224sum -l, sha3-256sum -l, sha3-384sum -l, sha3-512sum -l, b2sum -l 160, b2sum -l 256, b2sum -l 384, b2sum -l 512 }
org.jivesoftware.smackx.hashes.element.HashElement: Represent a hash element.
org.jivesoftware.smackx.hashes.element.HashElement.HashElement	(	HashManager.ALGORITHM	String	): Create a HashElement from pre-calculated values.
org.jivesoftware.smackx.hashes.element.HashElement.HashElement	(	HashManager.ALGORITHM	byte[]	): Create a HashElement from pre-calculated values.
org.jivesoftware.smackx.hashes.element.HashElement.getAlgorithm	(	): Return the hash algorithm used in this HashElement.
org.jivesoftware.smackx.hashes.element.HashElement.getHash	(	): Return the checksum as a byte array.
org.jivesoftware.smackx.hashes.element.HashElement.getHashB64	(	): Return the checksum as a base16 (hex) string.
org.jivesoftware.smackx.hashes.provider.HashElementProvider: Provider for HashElements.
org.jivesoftware.smackx.hints.element.NoCopyHint: A "no copy" hint. Messages with this hint should not be copied to addresses other than the one to which it is addressed. 
org.jivesoftware.smackx.hints.element.NoPermanentStoreHint: A "no permanent store" hint. Messages with this hint should not be stored in permanent stores or archives.
org.jivesoftware.smackx.hints.element.NoStoreHint: A "no store" hint. Messages with this hint should not be stored in stores or archives. XEP-0334 § 4.2 No store
org.jivesoftware.smackx.hints.element.StoreHint: A "store" hint. Messages with this hint should be stored in permanent stores or archives.
org.jivesoftware.smackx.hoxt.HOXTManager: Manager for HTTP ove XMPP transport (XEP-0332) extension.
org.jivesoftware.smackx.hoxt.HOXTManager.isSupported	(	Jid	XMPPConnection	): Returns true if the given entity understands the HTTP ove XMPP transport format and allows the exchange of such.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp: Abstract parent for Req and Resp IQ packets.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Base64: Representation of Base64 element.  This class is immutable.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Base64.Base64	(	String	): Creates this element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Base64.getText	(	): Returns text of this element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Builder: A builder for XMPP connection configurations.  See ConnectionConfiguration Buidler for more details. 
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Builder.setData	(	Data	): Sets Data element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Builder.setHeaders	(	HeadersExtension	): Sets Headers element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Builder.setVersion	(	String	): Sets version attribute.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.ChunkedBase64: Representation of ChunkedBase64 element.  This class is immutable.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.ChunkedBase64.ChunkedBase64	(	String	): Creates ChunkedBase86 element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.ChunkedBase64.getStreamId	(	): Returns streamId attribute.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Data: Representation of Data element.  This class is immutable.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Data.Data	(	NamedElement	): Creates Data element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Data.getChild	(	): Returns element nested by Data.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Data.toXML	(	): Returns string containing xml representation of this object.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Ibb: Representation of Ibb element.  This class is immutable.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Ibb.Ibb	(	String	): Creates Ibb element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Ibb.getSid	(	): Returns sid attribute.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Text: Representation of Text element.  This class is immutable.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Text.Text	(	String	): Creates this element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Text.getText	(	): Returns text of this element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Xml: Representation of Xml element.  This class is immutable.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Xml.Xml	(	String	): Creates this element.builder.toString().
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.Xml.getText	(	): Returns text of this element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.getData	(	): Returns Data element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.getHeaders	(	): Returns Headers element.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.getIQHoxtChildElementBuilder	(	IQChildElementXmlStringBuilder	): Returns start tag.
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp.getVersion	(	): Returns version attribute.
org.jivesoftware.smackx.hoxt.packet.Base64BinaryChunk: Stanza(/Packet) extension for base64 binary chunks. This class is immutable.
org.jivesoftware.smackx.hoxt.packet.Base64BinaryChunk.Base64BinaryChunk	(	String	String	int	): Creates the extension. Last attribute will be initialized with default value (false).
org.jivesoftware.smackx.hoxt.packet.Base64BinaryChunk.Base64BinaryChunk	(	String	String	int	boolean	): Creates the extension.
org.jivesoftware.smackx.hoxt.packet.Base64BinaryChunk.getNr	(	): Returns nr attribute.
org.jivesoftware.smackx.hoxt.packet.Base64BinaryChunk.getStreamId	(	): Returns streamId attribute.
org.jivesoftware.smackx.hoxt.packet.Base64BinaryChunk.getText	(	): Returns text attribute.
org.jivesoftware.smackx.hoxt.packet.Base64BinaryChunk.isLast	(	): Returns last attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq: Represents Req IQ packet.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.Builder: A configuration builder for HttpOverXmppReq. Use builder() to obtain a new instance and build to build the configuration.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.Builder.setIbb	(	boolean	): Sets ibb attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.Builder.setJingle	(	boolean	): Sets jingle attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.Builder.setMaxChunkSize	(	int	): Sets maxChunkSize attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.Builder.setMethod	(	HttpMethod	): Sets method attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.Builder.setResource	(	String	): Sets resource attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.Builder.setSipub	(	boolean	): Sets sipub attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.getMaxChunkSize	(	): Returns maxChunkSize attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.getMethod	(	): Returns method attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.getResource	(	): Returns resource attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.isIbb	(	): Returns ibb attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.isJingle	(	): Returns jingle attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq.isSipub	(	): Returns sipub attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp: Represents Resp IQ packet.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp.Builder: A configuration builder for HttpOverXmppReq. Use builder() to obtain a new instance and build to build the configuration.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp.Builder.setStatusCode	(	int	): Sets statusCode attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp.Builder.setStatusMessage	(	String	): Sets statusMessage attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp.getStatusCode	(	): Returns statusCode attribute.
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp.getStatusMessage	(	): Returns statusMessage attribute.
org.jivesoftware.smackx.hoxt.provider.AbstractHttpOverXmppProvider: Abstract parent for Req and Resp stanza(/packet) providers.
org.jivesoftware.smackx.hoxt.provider.AbstractHttpOverXmppProvider.parseData	(	XmlPullParser	): Parses Data element if any.
org.jivesoftware.smackx.hoxt.provider.AbstractHttpOverXmppProvider.parseHeaders	(	XmlPullParser	): Parses HeadersExtension element if any.
org.jivesoftware.smackx.hoxt.provider.AbstractHttpOverXmppProviderTest: Tests correct headers and data parsing in 'req' and 'resp' elements.
org.jivesoftware.smackx.hoxt.provider.Base64BinaryChunkProvider: Stanza(/Packet) provider for base64 binary chunks.
org.jivesoftware.smackx.hoxt.provider.Base64BinaryChunkProviderTest: Tests correct parsing of 'chunk' elements in Message stanza.
org.jivesoftware.smackx.hoxt.provider.HttpOverXmppReqProvider: Req stanza(/packet) provider.
org.jivesoftware.smackx.hoxt.provider.HttpOverXmppRespProvider: Resp stanza(/packet) provider.
org.jivesoftware.smackx.hoxt.provider.HttpOverXmppRespProviderTest: Tests correct attribute parsing in 'resp' element.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager: A manager for XEP-0363: HTTP File Upload.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.discoverUploadService	(	): Discover upload service. Called automatically when connection is authenticated. Note that this is a synchronous call -- Smack must wait for the server response.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.getDefaultUploadService	(	): Get default upload service if it was discovered.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.getInstanceFor	(	XMPPConnection	): Obtain the HttpFileUploadManager responsible for a connection.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.isUploadServiceDiscovered	(	): Check if upload service was discovered.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.requestSlot	(	String	long	): Request a new upload slot from default upload service (if discovered). When you get slot you should upload file to PUT URL and share GET URL. Note that this is a synchronous call -- Smack must wait for the server response.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.requestSlot	(	String	long	String	): Request a new upload slot with optional content type from default upload service (if discovered). When you get slot you should upload file to PUT URL and share GET URL. Note that this is a synchronous call -- Smack must wait for the server response.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.requestSlot	(	String	long	String	DomainBareJid	): Request a new upload slot with optional content type from custom upload service. When you get slot you should upload file to PUT URL and share GET URL. Note that this is a synchronous call -- Smack must wait for the server response.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.uploadFile	(	File	): Request slot and uploaded file to HTTP file upload service. You don't need to request slot and upload file separately, this method will do both. Note that this is a synchronous call -- Smack must wait for the server response.
org.jivesoftware.smackx.httpfileupload.HttpFileUploadManager.uploadFile	(	File	UploadProgressListener	): Request slot and uploaded file to HTTP file upload service with progress callback. You don't need to request slot and upload file separately, this method will do both. Note that this is a synchronous call -- Smack must wait for the server response.
org.jivesoftware.smackx.httpfileupload.UploadProgressListener: Callback interface to get upload progress.
org.jivesoftware.smackx.httpfileupload.UploadProgressListener.onUploadProgress	(	long	long	): Callback for displaying upload progress.
org.jivesoftware.smackx.httpfileupload.element.FileTooLargeError: File Too Large error extension.
org.jivesoftware.smackx.httpfileupload.element.Slot: Slot responded by upload service.
org.jivesoftware.smackx.httpfileupload.element.SlotRequest: Upload slot request.
org.jivesoftware.smackx.httpfileupload.element.SlotRequest.SlotRequest	(	DomainBareJid	String	long	String	): Create new slot request.
org.jivesoftware.smackx.httpfileupload.element.SlotRequest_V0_2.SlotRequest_V0_2	(	DomainBareJid	String	long	String	): Create new slot request.
org.jivesoftware.smackx.httpfileupload.provider.FileTooLargeErrorProvider: Provider for File Too Large error extension.
org.jivesoftware.smackx.httpfileupload.provider.SlotProvider: Provider for Slot.
org.jivesoftware.smackx.iot.IoTControlIntegrationTest.controlTest	(	): Connection one provides a thing, which is controlled by connection two.
org.jivesoftware.smackx.iot.IoTDataIntegrationTest.dataTest	(	): Connection one provides a thing, which momentary value is read out by connection two.
org.jivesoftware.smackx.iot.IoTManager.setAllowNonFriends	(	boolean	): Set whether or not non friends should be able to use the services provided by this manager. Those non-friend entities still need to know the full JID for IQ based requests.
org.jivesoftware.smackx.iot.control.IoTControlManager: A manger for XEP-0325: Internet of Things - Control.
org.jivesoftware.smackx.iot.control.IoTControlManager.getInstanceFor	(	XMPPConnection	): Get the manger instance responsible for the given connection.
org.jivesoftware.smackx.iot.control.IoTControlManager.installThing	(	Thing	): Install a thing in the manager. Activates control functionality (if provided by the thing).
org.jivesoftware.smackx.iot.control.IoTControlManager.setUsingIq	(	FullJid	Collection	): Control a thing by sending a collection of SetData instructions.
org.jivesoftware.smackx.iot.control.IoTControlManager.setUsingIq	(	FullJid	SetData	): Control a thing by sending a collection of SetData instructions.
org.jivesoftware.smackx.iot.control.element.SetData.getElementName	(	): Returns the root element name.
org.jivesoftware.smackx.iot.control.element.SetData.toXML	(	): Returns the XML representation of this Element.
org.jivesoftware.smackx.iot.data.IoTDataManager: A manager for XEP-0323: Internet of Things - Sensor Data.
org.jivesoftware.smackx.iot.data.IoTDataManager.getInstanceFor	(	XMPPConnection	): Get the manger instance responsible for the given connection.
org.jivesoftware.smackx.iot.data.IoTDataManager.installThing	(	Thing	): Install a thing in the manager. Activates data read out functionality (if provided by the thing).
org.jivesoftware.smackx.iot.data.IoTDataManager.requestMomentaryValuesReadOut	(	EntityFullJid	): Try to read out a things momentary values.
org.jivesoftware.smackx.iot.discovery.IoTDiscoveryManager: A manager for XEP-0347: Internet of Things - Discovery. Used to register and discover things.
org.jivesoftware.smackx.iot.discovery.IoTDiscoveryManager.claimThing	(	Jid	Collection	boolean	): Claim a thing by providing a collection of meta tags. If the claim was successful, then a IoTClaimed instance will be returned, which contains the XMPP address of the thing. Use getJid() to retrieve this address.
org.jivesoftware.smackx.iot.discovery.IoTDiscoveryManager.findRegistry	(	): Try to find an XMPP IoT registry.
org.jivesoftware.smackx.iot.discovery.IoTDiscoveryManager.getInstanceFor	(	XMPPConnection	): Get the manger instance responsible for the given connection.
org.jivesoftware.smackx.iot.element.NodeInfo.NodeInfo	(	): The internal constructor for the EMPTY node info marker class.
org.jivesoftware.smackx.iot.provisioning.IoTProvisioningManager: A manager for XEP-0324: Internet of Things - Provisioning.
org.jivesoftware.smackx.iot.provisioning.IoTProvisioningManager.findProvisioningServerComponent	(	): Try to find a provisioning server component.
org.jivesoftware.smackx.iot.provisioning.IoTProvisioningManager.getInstanceFor	(	XMPPConnection	): Get the manger instance responsible for the given connection.
org.jivesoftware.smackx.iot.provisioning.IoTProvisioningManager.isFriend	(	Jid	BareJid	): As the given provisioning server is the given JID is a friend.
org.jivesoftware.smackx.iot.provisioning.IoTProvisioningManager.setConfiguredProvisioningServer	(	Jid	): Set the configured provisioning server. Use null as provisioningServer to use automatic discovery of the provisioning server (the default behavior).
org.jivesoftware.smackx.iqlast.LastActivityManager: A last activity manager for handling information about the last activity associated with a Jabber ID. A manager handles incoming LastActivity requests of existing Connections. It also allows to request last activity information of other users.  LastActivity (XEP-0012) based on the sending JID's type allows for retrieval of:  How long a particular user has been idle How long a particular user has been logged-out and the message the specified when doing so. How long a host has been up.   For example to get the idle time of a user logged in a resource, simple send the LastActivity stanza(/packet) to them, as in the following code:   XMPPConnection con = new XMPPTCPConnection("jabber.org"); con.login("john", "doe"); LastActivity activity = LastActivity.getLastActivity(con, "xray@jabber.org/Smack");  To get the lapsed time since the last user logout is the same as above but with out the resource:  LastActivity activity = LastActivity.getLastActivity(con, "xray@jabber.org");  To get the uptime of a host, you simple send the LastActivity stanza(/packet) to it, as in the following code example:   LastActivity activity = LastActivity.getLastActivity(con, "jabber.org"); 
org.jivesoftware.smackx.iqlast.LastActivityManager.LastActivityManager	(	XMPPConnection	): Creates a last activity manager to response last activity requests.
org.jivesoftware.smackx.iqlast.LastActivityManager.getIdleTime	(	): The idle time is the lapsed time between the last message sent and now.
org.jivesoftware.smackx.iqlast.LastActivityManager.getLastActivity	(	Jid	): Returns the last activity of a particular jid. If the jid is a full JID (i.e., a JID of the form of 'user@host/resource') then the last activity is the idle time of that connected resource. On the other hand, when the jid is a bare JID (e.g. 'user@host') then the last activity is the lapsed time since the last logout or 0 if the user is currently logged in. Moreover, when the jid is a server or component (e.g., a JID of the form 'host') the last activity is the uptime.
org.jivesoftware.smackx.iqlast.LastActivityManager.isLastActivitySupported	(	Jid	): Returns true if Last Activity (XEP-0012) is supported by a given JID.
org.jivesoftware.smackx.iqlast.LastActivityManager.resetIdleTime	(	): Resets the idle time to 0, this should be invoked when a new message is sent.
org.jivesoftware.smackx.iqlast.LastActivityManager.setEnabledPerDefault	(	boolean	): Enable or disable Last Activity for new XMPPConnections.
org.jivesoftware.smackx.iqlast.packet.LastActivity: A last activity IQ for retrieving information about the last activity associated with a Jabber ID. LastActivity (XEP-0012) allows for retrieval of how long a particular user has been idle and the message the specified when doing so. Use org.jivesoftware.smackx.iqlast.LastActivityManager to get the last activity of a user.
org.jivesoftware.smackx.iqlast.packet.LastActivity.Provider: The IQ Provider for LastActivity.
org.jivesoftware.smackx.iqlast.packet.LastActivity.getIdleTime	(	): Returns number of seconds that have passed since the user last logged out. If the user is offline, 0 will be returned.
org.jivesoftware.smackx.iqlast.packet.LastActivity.getStatusMessage	(	): Returns the status message of the last unavailable presence received from the user.
org.jivesoftware.smackx.iqprivate.PrivateDataManager: Manages private data, which is a mechanism to allow users to store arbitrary XML data on an XMPP server. Each private data chunk is defined by a element name and XML namespace. Example private data:  <color xmlns="http://example.com/xmpp/color"> <favorite>blue</blue> <leastFavorite>puce</leastFavorite> </color>  PrivateDataProvider instances are responsible for translating the XML into objects. If no PrivateDataProvider is registered for a given element name and namespace, then a DefaultPrivateData instance will be returned. Warning: this is an non-standard protocol documented by XEP-49. Because this is a non-standard protocol, it is subject to change.
org.jivesoftware.smackx.iqprivate.PrivateDataManager.PrivateDataIQProvider: An IQ provider to parse IQ results containing private data.
org.jivesoftware.smackx.iqprivate.PrivateDataManager.PrivateDataManager	(	XMPPConnection	): Creates a new private data manager.
org.jivesoftware.smackx.iqprivate.PrivateDataManager.addPrivateDataProvider	(	String	String	PrivateDataProvider	): Adds a private data provider with the specified element name and name space. The provider will override any providers loaded through the classpath.
org.jivesoftware.smackx.iqprivate.PrivateDataManager.getPrivateData	(	String	String	): Returns the private data specified by the given element name and namespace. Each chunk of private data is uniquely identified by an element name and namespace pair. If a PrivateDataProvider is registered for the specified element name/namespace pair then that provider will determine the specific object type that is returned. If no provider is registered, a DefaultPrivateData instance will be returned.
org.jivesoftware.smackx.iqprivate.PrivateDataManager.getPrivateDataProvider	(	String	String	): Returns the private data provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "prefs" and the namespace "http://www.xmppclient.com/prefs", then the following stanza(/packet) would trigger the provider:  <iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'> <query xmlns='jabber:iq:private'> <prefs xmlns='http://www.xmppclient.com/prefs'> <value1>ABC</value1> <value2>XYZ</value2> </prefs> </query> </iq> Note: this method is generally only called by the internal Smack classes.
org.jivesoftware.smackx.iqprivate.PrivateDataManager.isSupported	(	): Check if the service supports private data.
org.jivesoftware.smackx.iqprivate.PrivateDataManager.removePrivateDataProvider	(	String	String	): Removes a private data provider with the specified element name and namespace.
org.jivesoftware.smackx.iqprivate.PrivateDataManager.setPrivateData	(	PrivateData	): Sets a private data value. Each chunk of private data is uniquely identified by an element name and namespace pair. If private data has already been set with the element name and namespace, then the new private data will overwrite the old value.
org.jivesoftware.smackx.iqprivate.packet.DefaultPrivateData: Default implementation of the PrivateData interface. Unless a PrivateDataProvider is registered with the PrivateDataManager class, instances of this class will be returned when getting private data. This class provides a very simple representation of an XML sub-document. Each element is a key in a Map with its CDATA being the value. For example, given the following XML sub-document:  <foo xmlns="http://bar.com"> <color>blue</color> <food>pizza</food> </foo> In this case, getValue("color") would return "blue", and getValue("food") would return "pizza". This parsing mechanism mechanism is very simplistic and will not work as desired in all cases (for example, if some of the elements have attributes. In those cases, a custom org.jivesoftware.smackx.iqprivate.provider.PrivateDataProvider should be used.
org.jivesoftware.smackx.iqprivate.packet.DefaultPrivateData.DefaultPrivateData	(	String	String	): Creates a new generic private data object.
org.jivesoftware.smackx.iqprivate.packet.DefaultPrivateData.getElementName	(	): Returns the XML element name of the private data sub-packet root element.
org.jivesoftware.smackx.iqprivate.packet.DefaultPrivateData.getNames	(	): Returns a Set of the names that can be used to get values of the private data.
org.jivesoftware.smackx.iqprivate.packet.DefaultPrivateData.getNamespace	(	): Returns the XML namespace of the private data sub-packet root element.
org.jivesoftware.smackx.iqprivate.packet.DefaultPrivateData.getValue	(	String	): Returns a value given a name.
org.jivesoftware.smackx.iqprivate.packet.DefaultPrivateData.setValue	(	String	String	): Sets a value given the name.
org.jivesoftware.smackx.iqprivate.packet.PrivateData: Interface to represent private data. Each private data chunk is an XML sub-document with a root element name and namespace.
org.jivesoftware.smackx.iqprivate.packet.PrivateData.getElementName	(	): Returns the root element name.
org.jivesoftware.smackx.iqprivate.packet.PrivateData.getNamespace	(	): Returns the root element XML namespace.
org.jivesoftware.smackx.iqprivate.packet.PrivateData.toXML	(	): Returns the XML reppresentation of the PrivateData.
org.jivesoftware.smackx.iqprivate.provider.PrivateDataProvider: An interface for parsing custom private data. Each PrivateDataProvider must be registered with the PrivateDataManager class for it to be used. Every implementation of this interface must have a public, no-argument constructor.
org.jivesoftware.smackx.iqprivate.provider.PrivateDataProvider.parsePrivateData	(	XmlPullParser	): Parse the private data sub-document and create a PrivateData instance. At the beginning of the method call, the xml parser will be positioned at the opening tag of the private data child element. At the end of the method call, the parser must be positioned on the closing tag of the child element.
org.jivesoftware.smackx.iqregister.AccountManager: Allows creation and management of accounts on an XMPP server.
org.jivesoftware.smackx.iqregister.AccountManager.AccountManager	(	XMPPConnection	): Creates a new AccountManager instance.
org.jivesoftware.smackx.iqregister.AccountManager.changePassword	(	String	): Changes the password of the currently logged-in account. This operation can only be performed after a successful login operation has been completed. Not all servers support changing passwords; an XMPPException will be thrown when that is the case.
org.jivesoftware.smackx.iqregister.AccountManager.createAccount	(	Localpart	String	): Creates a new account using the specified username and password. The server may require a number of extra account attributes such as an email address and phone number. In that case, Smack will attempt to automatically set all required attributes with blank values, which may or may not be accepted by the server. Therefore, it's recommended to check the required account attributes and to let the end-user populate them with real values instead.
org.jivesoftware.smackx.iqregister.AccountManager.createAccount	(	Localpart	String	Map	): Creates a new account using the specified username, password and account attributes. The attributes Map must contain only String name/value pairs and must also have values for all required attributes.
org.jivesoftware.smackx.iqregister.AccountManager.deleteAccount	(	): Deletes the currently logged-in account from the server. This operation can only be performed after a successful login operation has been completed. Not all servers support deleting accounts; an XMPPException will be thrown when that is the case.
org.jivesoftware.smackx.iqregister.AccountManager.getAccountAttribute	(	String	): Returns the value of a given account attribute or null if the account attribute wasn't found.
org.jivesoftware.smackx.iqregister.AccountManager.getAccountAttributes	(	): Returns an unmodifiable collection of the names of the required account attributes. All attributes must be set when creating new accounts. The standard set of possible attributes are as follows:  name -- the user's name. first -- the user's first name. last -- the user's last name. email -- the user's email address. city -- the user's city. state -- the user's state. zip -- the user's ZIP code. phone -- the user's phone number. url -- the user's website. date -- the date the registration took place. misc -- other miscellaneous information to associate with the account. text -- textual information to associate with the account. remove -- empty flag to remove account.  Typically, servers require no attributes when creating new accounts, or just the user's email address.
org.jivesoftware.smackx.iqregister.AccountManager.getAccountInstructions	(	): Returns the instructions for creating a new account, or null if there are no instructions. If present, instructions should be displayed to the end-user that will complete the registration process.
org.jivesoftware.smackx.iqregister.AccountManager.getInstance	(	XMPPConnection	): Returns the AccountManager instance associated with a given XMPPConnection.
org.jivesoftware.smackx.iqregister.AccountManager.getRegistrationInfo	(	): Gets the account registration info from the server.
org.jivesoftware.smackx.iqregister.AccountManager.sensitiveOperationOverInsecureConnection	(	boolean	): Set to true to allow sensitive operation over insecure connection.  Set to true to allow sensitive operations like account creation or password changes over an insecure (e.g. unencrypted) connections. 
org.jivesoftware.smackx.iqregister.AccountManager.sensitiveOperationOverInsecureConnectionDefault	(	boolean	): The default value used by new account managers for allowSensitiveOperationOverInsecureConnection.
org.jivesoftware.smackx.iqregister.AccountManager.setSupportsAccountCreation	(	boolean	): Sets whether the server supports In-Band Registration. In-Band Registration may be advertised as a stream feature. If no stream feature was advertised from the server then try sending an IQ stanza(/packet) to discover if In-Band Registration is available.
org.jivesoftware.smackx.iqregister.AccountManager.supportsAccountCreation	(	): Returns true if the server supports creating new accounts. Many servers require that you not be currently authenticated when creating new accounts, so the safest behavior is to only create new accounts before having logged in to a server.
org.jivesoftware.smackx.iqregister.packet.Registration: Represents registration packets. An empty GET query will cause the server to return information about it's registration support. SET queries can be used to create accounts or update existing account information. XMPP servers may require a number of attributes to be set when creating a new account. The standard account attributes are as follows:  name -- the user's name. first -- the user's first name. last -- the user's last name. email -- the user's email address. city -- the user's city. state -- the user's state. zip -- the user's ZIP code. phone -- the user's phone number. url -- the user's website. date -- the date the registration took place. misc -- other miscellaneous information to associate with the account. text -- textual information to associate with the account. remove -- empty flag to remove account. 
org.jivesoftware.smackx.iqregister.packet.Registration.getAttributes	(	): Returns the map of String key/value pairs of account attributes.
org.jivesoftware.smackx.iqregister.packet.Registration.getInstructions	(	): Returns the registration instructions, or null if no instructions have been set. If present, instructions should be displayed to the end-user that will complete the registration process.
org.jivesoftware.smackx.iqversion.VersionManager: A Version Manager that automatically responds to version IQs with a predetermined reply.  The VersionManager takes care of handling incoming version request IQs, according to XEP-0092 (Software Version). You can configure the version reply for a given connection by running the following code:   Version MY_VERSION = new Version("My Little XMPP Application", "v1.23", "OS/2 32-bit"); VersionManager.getInstanceFor(mConnection).setVersion(MY_VERSION); 
org.jivesoftware.smackx.iqversion.VersionManager.getVersion	(	Jid	): Request version information from a given JID.
org.jivesoftware.smackx.iqversion.packet.Version: A Version IQ packet, which is used by XMPP clients to discover version information about the software running at another entity's JID.
org.jivesoftware.smackx.iqversion.packet.Version.Version	(	Jid	): Request version IQ.
org.jivesoftware.smackx.iqversion.packet.Version.Version	(	String	String	String	): Creates a new Version object with given details.
org.jivesoftware.smackx.iqversion.packet.Version.getName	(	): Returns the natural-language name of the software. This property will always be present in a result.
org.jivesoftware.smackx.iqversion.packet.Version.getOs	(	): Returns the operating system of the queried entity. This property will always be present in a result.
org.jivesoftware.smackx.iqversion.packet.Version.getVersion	(	): Returns the specific version of the software. This property will always be present in a result.
org.jivesoftware.smackx.iqversion.packet.Version.setOs	(	String	): Sets the operating system of the queried entity. This message should only be invoked when parsing the XML and setting the property to a Version instance.
org.jivesoftware.smackx.jingle.FullJidAndSessionId: Pair of jid and sessionId.
org.jivesoftware.smackx.jingle.JingleActionTest: Test the JingleAction class.
org.jivesoftware.smackx.jingle.JingleContentProviderManagerTest: Tests for the JingleContentProviderManager.
org.jivesoftware.smackx.jingle.JingleContentTest: Test the JingleContent class.
org.jivesoftware.smackx.jingle.JingleErrorTest: Test the JingleError class.
org.jivesoftware.smackx.jingle.JingleManagerTest: Test the Jingle extension using the high level API 
org.jivesoftware.smackx.jingle.JingleManagerTest.IQfake: Simple class for testing an IQ...
org.jivesoftware.smackx.jingle.JingleManagerTest.JingleManagerTest	(	String	): Constructor for JingleManagerTest.
org.jivesoftware.smackx.jingle.JingleManagerTest.getMaxConnections	(	): This is a simple test where the user_2 rejects the Jingle session.
org.jivesoftware.smackx.jingle.JingleManagerTest.getTestPayloads1	(	): Generate a list of payload types
org.jivesoftware.smackx.jingle.JingleManagerTest.testAcceptJingleSession	(	): High level API test. This is a simple test to use with an XMPP client and check if the client receives the message 1. User_1 will send an invitation to user_2.
org.jivesoftware.smackx.jingle.JingleManagerTest.testEqualPayloadsSetSession	(	): This is a simple test where both endpoints have exactly the same payloads and the session is accepted.
org.jivesoftware.smackx.jingle.JingleManagerTest.testFullTest	(	): This is a full test in the Jingle API.
org.jivesoftware.smackx.jingle.JingleManagerTest.testInitJingleSessionRequestListeners	(	): Test for the session request detection. Here, we use the same filter we use in the JingleManager...
org.jivesoftware.smackx.jingle.JingleManagerTest.testMediaManager	(	): This is a full test in the Jingle API.
org.jivesoftware.smackx.jingle.JingleManagerTest.testRTPBridge	(	): RTP Bridge Test
org.jivesoftware.smackx.jingle.JingleManagerTest.testRejectSession	(	): This is a simple test where the user_2 rejects the Jingle session.
org.jivesoftware.smackx.jingle.JingleManagerTest.testSendSimpleMessage	(	): High level API test. This is a simple test to use with an XMPP client and check if the client receives the message 1. User_1 will send an invitation to user_2.
org.jivesoftware.smackx.jingle.JingleManagerTest.testStagesSession	(	): This is a simple test where the user_2 rejects the Jingle session.
org.jivesoftware.smackx.jingle.JingleMediaTest: Test the Jingle Media using the high level API 
org.jivesoftware.smackx.jingle.JingleReasonTest: Test JingleReason functionality.
org.jivesoftware.smackx.jingle.JingleSupportTests: Test suite that runs all the Jingle support tests
org.jivesoftware.smackx.jingle.JingleTest: Test the Jingle class.
org.jivesoftware.smackx.jingle.JingleTransportMethodManager: Manager where TransportMethods are registered.
org.jivesoftware.smackx.jingle.JingleUtil: Util to quickly create and send jingle stanzas.
org.jivesoftware.smackx.jingle.JingleUtilTest: Test the JingleUtil class.
org.jivesoftware.smackx.jingle.PayloadTypeTest.testDifference	(	): Test for the difference of payloads.
org.jivesoftware.smackx.jingle.PayloadTypeTest.testDifferenceSameSet	(	): Test for the difference of payloads when we are handling the same sets.
org.jivesoftware.smackx.jingle.element.Jingle: The Jingle element.
org.jivesoftware.smackx.jingle.element.Jingle.getAction	(	): Get the action specified in the jingle IQ.
org.jivesoftware.smackx.jingle.element.Jingle.getContents	(	): Get a List of the contents.
org.jivesoftware.smackx.jingle.element.Jingle.getInitiator	(	): Get the initiator. The initiator will be the full JID of the entity that has initiated the flow (which may be different to the "from" address in the IQ)
org.jivesoftware.smackx.jingle.element.Jingle.getResponder	(	): Get the responder. The responder is the full JID of the entity that has replied to the initiation (which may be different to the "to" addresss in the IQ).
org.jivesoftware.smackx.jingle.element.Jingle.getSid	(	): Returns the session ID related to the session. The session ID is a unique identifier generated by the initiator. This should match the XML Nmtoken production so that XML character escaping is not needed for characters such as &.
org.jivesoftware.smackx.jingle.element.Jingle.getSoleContentOrThrow	(	): Get the only jingle content if one exists, or null. This method will throw an IllegalStateException if there is more than one jingle content.
org.jivesoftware.smackx.jingle.element.JingleContent: Jingle content element.
org.jivesoftware.smackx.jingle.element.JingleContent.JingleContent	(	Creator	String	String	Senders	JingleContentDescription	JingleContentTransport	): Creates a content description..
org.jivesoftware.smackx.jingle.element.JingleContent.getDescription	(	): Gets the description for this Jingle content.
org.jivesoftware.smackx.jingle.element.JingleContent.getJingleTransport	(	): Returns an Iterator for the JingleTransports in the packet.
org.jivesoftware.smackx.jingle.element.JingleContentDescription: Jingle content description.
org.jivesoftware.smackx.jingle.element.JingleContentDescriptionChildElement: An element found usually in 'description' elements.
org.jivesoftware.smackx.jingle.element.JingleContentTransport: A jingle transport extension.
org.jivesoftware.smackx.jingle.element.JingleContentTransportCandidate: An element found usually in Jingle 'transport' elements.
org.jivesoftware.smackx.jingle.element.JingleContentTransportInfo: Abstract JingleContentTransportInfo element.
org.jivesoftware.smackx.jingle.element.JingleError.JingleError	(	String	): Creates a new error with the specified code and errorName.
org.jivesoftware.smackx.jingle.element.JingleError.fromString	(	String	): Returns a Action instance associated with the String value.
org.jivesoftware.smackx.jingle.element.JingleError.getMessage	(	): Returns the name of the Jingle error.
org.jivesoftware.smackx.jingle.element.JingleReason: The Jingle 'reason' element.
org.jivesoftware.smackx.jingle.mediaimpl.demo.Demo: Jingle Demo Application. It register in an XMPP Server and let users place calls using a full JID and auto-receive calls. Parameters: Server User Pass.
org.jivesoftware.smackx.jingle.nat.STUNResolverTest: Test the STUN IP resolver.
org.jivesoftware.smackx.jingle.nat.STUNResolverTest.getTestPayloads1	(	): Generate a list of payload types
org.jivesoftware.smackx.jingle.nat.STUNResolverTest.testGetPreferredCandidate	(	): Test for getPreferredCandidate()
org.jivesoftware.smackx.jingle.nat.STUNResolverTest.testGetPreferredCandidateICE	(	): Test for getPreferredCandidate()
org.jivesoftware.smackx.jingle.nat.STUNResolverTest.testICEPriority	(	): Test priority generated by STUN lib
org.jivesoftware.smackx.jingle.nat.STUNResolverTest.testLoadSTUNServers	(	): Test for loadSTUNServers()
org.jivesoftware.smackx.jingle.nat.STUNResolverTest.testResolve	(	): Test for resolve()
org.jivesoftware.smackx.jingle.nat.STUNResolverTest.testSTUNJingleSession	(	): This is a simple test where the user_2 rejects the Jingle session.
org.jivesoftware.smackx.jingle.nat.TransportCandidateTest.testCompareTo	(	): Test for compareTo()
org.jivesoftware.smackx.jingle.nat.TransportCandidateTest.testEqualsObject	(	): Test for equals()
org.jivesoftware.smackx.jingle.provider.JingleProviderTest.IQfake: Simple class for testing an IQ...
org.jivesoftware.smackx.jingle.provider.JingleProviderTest.testParseIQSimple	(	): Test for parsing a Jingle
org.jivesoftware.smackx.jingle.transports.JingleTransportInitiationCallback: Callback for bytestream session creation of TransportManagers.
org.jivesoftware.smackx.jingle.transports.JingleTransportInitiationException: Created by vanitas on 25.06.17.
org.jivesoftware.smackx.jingle.transports.JingleTransportManager: Manager for a JingleTransport method.
org.jivesoftware.smackx.jingle.transports.JingleTransportSession: Created by vanitas on 20.06.17.
org.jivesoftware.smackx.jingle.transports.jingle_ibb.JingleIBBTransportManager: Manager for Jingle InBandBytestream transports (XEP-0261).
org.jivesoftware.smackx.jingle.transports.jingle_ibb.JingleIBBTransportTest: Test JingleIBBTransport provider and element.
org.jivesoftware.smackx.jingle.transports.jingle_ibb.element.JingleIBBTransport: Transport Element for JingleInBandBytestream transports.
org.jivesoftware.smackx.jingle.transports.jingle_ibb.provider.JingleIBBTransportProvider: Parse JingleByteStreamTransport elements.
org.jivesoftware.smackx.jingle.transports.jingle_s5b.JingleS5BTransportManager: Manager for Jingle SOCKS5 Bytestream transports (XEP-0261).
org.jivesoftware.smackx.jingle.transports.jingle_s5b.JingleS5BTransportSession: Handler that handles Jingle Socks5Bytestream transports (XEP-0260).
org.jivesoftware.smackx.jingle.transports.jingle_s5b.JingleS5BTransportSession.connectIfReady	(	): Determine, which candidate (ours/theirs) is the nominated one. Connect to this candidate. If it is a proxy and it is ours, activate it and connect. If its a proxy and it is theirs, wait for activation. If it is not a proxy, just connect.
org.jivesoftware.smackx.jingle.transports.jingle_s5b.JingleS5BTransportTest: Test Provider and serialization.
org.jivesoftware.smackx.jingle.transports.jingle_s5b.elements.JingleS5BTransport: Socks5Bytestream transport element.
org.jivesoftware.smackx.jingle.transports.jingle_s5b.elements.JingleS5BTransportCandidate: TransportCandidate for Jingle Socks5Bytestream transports.
org.jivesoftware.smackx.jingle.transports.jingle_s5b.elements.JingleS5BTransportInfo: Class representing possible SOCKS5 TransportInfo elements.
org.jivesoftware.smackx.jingle.transports.jingle_s5b.provider.JingleS5BTransportProvider: Provider for JingleSocks5BytestreamTransport elements.
org.jivesoftware.smackx.jingle_filetransfer.JingleFileTransferManager: Manager for JingleFileTransfer (XEP-0234).
org.jivesoftware.smackx.jingle_filetransfer.element.Checksum: Checksum element.
org.jivesoftware.smackx.jingle_filetransfer.element.JingleFileTransfer: File element.
org.jivesoftware.smackx.jingle_filetransfer.element.JingleFileTransferChild: Content of type File.
org.jivesoftware.smackx.jingle_filetransfer.element.Range: RangeElement which specifies, which range of a file shall be transferred.
org.jivesoftware.smackx.jingle_filetransfer.element.Range.Range	(	): Create a Range element with default values.
org.jivesoftware.smackx.jingle_filetransfer.element.Range.Range	(	int	): Create a Range element with specified length.
org.jivesoftware.smackx.jingle_filetransfer.element.Range.Range	(	int	int	): Create a Range element with specified offset and length.
org.jivesoftware.smackx.jingle_filetransfer.element.Range.Range	(	int	int	HashElement	): Create a Range element with specified offset, length and hash.
org.jivesoftware.smackx.jingle_filetransfer.element.Range.getHash	(	): Return the hash element that contains a checksum of the bytes specified in the range.
org.jivesoftware.smackx.jingle_filetransfer.element.Range.getLength	(	): Return the length of the range.
org.jivesoftware.smackx.jingle_filetransfer.element.Range.getOffset	(	): Return the index of the offset. This marks the begin of the specified range.
org.jivesoftware.smackx.jingle_filetransfer.provider.ChecksumProvider: Provider for the Checksum element.
org.jivesoftware.smackx.jingle_filetransfer.provider.JingleFileTransferProvider: Provider for JingleContentDescriptionFileTransfer elements.
org.jivesoftware.smackx.jingleold.ContentNegotiator: Content negotiator.
org.jivesoftware.smackx.jingleold.ContentNegotiator.close	(	): Prepare to close the media manager.
org.jivesoftware.smackx.jingleold.ContentNegotiator.destroyMediaNegotiator	(	): Destroy the jmf negotiator.
org.jivesoftware.smackx.jingleold.ContentNegotiator.destroyTransportNegotiator	(	): Destroy the transport negotiator.
org.jivesoftware.smackx.jingleold.ContentNegotiator.doStart	(	): Called from above when starting a new session.
org.jivesoftware.smackx.jingleold.ContentNegotiator.getJingleMediaSession	(	): Get the JingleMediaSession of this Jingle Session.
org.jivesoftware.smackx.jingleold.ContentNegotiator.getMediaNegotiator	(	): Obtain the description negotiator for this session.
org.jivesoftware.smackx.jingleold.ContentNegotiator.getNegotiatorState	(	): The negotiator state for the ContentNegotiators is a special case. It is a roll-up of the sub-negotiator states.
org.jivesoftware.smackx.jingleold.ContentNegotiator.getTransportManager	(	): Get jingle transport manager.
org.jivesoftware.smackx.jingleold.ContentNegotiator.getTransportNegotiator	(	): Obtain the transport negotiator for this session.
org.jivesoftware.smackx.jingleold.ContentNegotiator.isFullyEstablished	(	): Return true if the transport and content negotiators have finished.
org.jivesoftware.smackx.jingleold.ContentNegotiator.setJingleTransportManager	(	JingleTransportManager	): Set jingle transport manager.
org.jivesoftware.smackx.jingleold.ContentNegotiator.setMediaNegotiator	(	MediaNegotiator	): Set the jmf negotiator.
org.jivesoftware.smackx.jingleold.ContentNegotiator.setTransportNegotiator	(	TransportNegotiator	): Set TransportNegociator
org.jivesoftware.smackx.jingleold.ContentNegotiator.stopJingleMediaSession	(	): Stop a Jingle media session.
org.jivesoftware.smackx.jingleold.ContentNegotiator.triggerContentEstablished	(	PayloadType	TransportCandidate	TransportCandidate	): Trigger a session established event.
org.jivesoftware.smackx.jingleold.JingleException: A Jingle exception.
org.jivesoftware.smackx.jingleold.JingleException.JingleException	(	): Default constructor.
org.jivesoftware.smackx.jingleold.JingleException.JingleException	(	JingleError	): Constructor with an error response.
org.jivesoftware.smackx.jingleold.JingleException.JingleException	(	String	): Constructor with an error message.
org.jivesoftware.smackx.jingleold.JingleException.getError	(	): Return the error message.
org.jivesoftware.smackx.jingleold.JingleManager: Jingle is a session establishment protocol defined in (XEP-0166). It defines a framework for negotiating and managing out-of-band ( data that is send and receive through other connection than XMPP connection) data sessions over XMPP. With this protocol you can setup VOIP Calls, Video Streaming, File transfers and whatever out-of-band session based transmission.  To create a Jingle Session you need a Transport method and a Payload type.  A transport method is how it will trasmit and receive network packets. Transport MUST have one or more candidates. A transport candidate is an IP Address with a defined port, that other party must send data to.  A supported payload type, is the data encoding format that the jmf will be transmitted. For instance an Audio Payload "GSM".  A Jingle session negociates a payload type and a pair of transport candidates. Which means that when a Jingle Session is establhished you will have two defined transport candidates with addresses and a defined Payload type. In other words, you will have two IP address with their respective ports, and a Codec type defined.  The JingleManager is a facade built upon Jabber Jingle (XEP-166) to allow the use of Jingle. This implementation allows the user to simply use this class for setting the Jingle parameters, create and receive Jingle Sessions.  In order to use the Jingle, the user must provide a TransportManager that will handle the resolution of potential IP addresses taht can be used to transport the streaming (jmf). This TransportManager can be initialized with several default resolvers, including a fixed solver that can be used when the address and port are know in advance. This API have ready to use Transport Managers, for instance: BasicTransportManager, STUNTransportManager, BridgedTransportManager.  You should also especify a JingleMediaManager if you want that JingleManager assume Media control Using a JingleMediaManager implementation is the easier way to implement a Jingle Application.  Otherwise before creating an outgoing connection, the user must create jingle session listeners that will be called when different events happen. The most important event is sessionEstablished(), that will be called when all the negotiations are finished, providing the payload type for the transmission as well as the remote and local addresses and ports for the communication. See JingleSessionListener for a complete list of events that can be observed.  This is an example of how to use the JingleManager: This example implements a Jingle VOIP Call between two users.    To wait for an Incoming Jingle Session:  try {  // Connect to an XMPP Server XMPPConnection x1 = new XMPPTCPConnection("xmpp.com"); x1.connect(); x1.login("juliet", "juliet");  // Create a JingleManager using a BasicResolver final JingleManager jm1 = new JingleManager( x1, new BasicTransportManager());  // Create a JingleMediaManager. In this case using Jingle Audio Media API JingleMediaManager jingleMediaManager = new AudioMediaManager();  // Set the JingleMediaManager jm1.setMediaManager(jingleMediaManager);  // Listen for incoming calls jm1.addJingleSessionRequestListener(new JingleSessionRequestListener() { public void sessionRequested(JingleSessionRequest request) {  try { // Accept the call IncomingJingleSession session = request.accept();   // Start the call session.start(); } catch (XMPPException e) { LOGGER.log(Level.WARNING, "exception", e); }  } });  Thread.sleep(15000);  } catch (Exception e) { LOGGER.log(Level.WARNING, "exception", e); }  To create an Outgoing Jingle Session:  try {  // Connect to an XMPP Server XMPPConnection x0 = new XMPPTCPConnection("xmpp.com"); x0.connect(); x0.login("romeo", "romeo");  // Create a JingleManager using a BasicResolver final JingleManager jm0 = new JingleManager( x0, new BasicTransportManager());  // Create a JingleMediaManager. In this case using Jingle Audio Media API JingleMediaManager jingleMediaManager = new AudioMediaManager(); // Using Jingle Media API  // Set the JingleMediaManager jm0.setMediaManager(jingleMediaManager);  // Create a new Jingle Call with a full JID OutgoingJingleSession js0 = jm0.createOutgoingJingleSession("juliet@xmpp.com/Smack");  // Start the call js0.start();  Thread.sleep(10000); js0.terminate();  Thread.sleep(3000);  } catch (Exception e) { LOGGER.log(Level.WARNING, "exception", e); } 
org.jivesoftware.smackx.jingleold.JingleManager.JingleManager	(	XMPPConnection	List	): Default constructor with a defined XMPPConnection, Transport Resolver and a Media Manager. If a fully implemented JingleMediaSession is entered, JingleManager manage Jingle signalling and jmf
org.jivesoftware.smackx.jingleold.JingleManager.addCreationListener	(	CreatedJingleSessionListener	): Adds a CreatedJingleSessionListener. This listener will be called when a session is created by the JingleManager instance.
org.jivesoftware.smackx.jingleold.JingleManager.addJingleSessionRequestListener	(	JingleSessionRequestListener	): Add a Jingle session request listenerJingle to listen to incoming session requests.
org.jivesoftware.smackx.jingleold.JingleManager.createIncomingJingleSession	(	JingleSessionRequest	): When the session request is acceptable, this method should be invoked. It will create an JingleSession which allows the negotiation to procede.
org.jivesoftware.smackx.jingleold.JingleManager.createOutgoingJingleSession	(	EntityFullJid	): Creates an Jingle session to start a communication with another user.
org.jivesoftware.smackx.jingleold.JingleManager.disconnectAllSessions	(	): Disconnect all Jingle Sessions.
org.jivesoftware.smackx.jingleold.JingleManager.getMediaManagers	(	): Get the Media Managers of this Jingle Manager.
org.jivesoftware.smackx.jingleold.JingleManager.getSession	(	String	): Get a session with the informed JID. If no session is found, return null.
org.jivesoftware.smackx.jingleold.JingleManager.initJingleSessionRequestListeners	(	): Register the listenerJingles, waiting for a Jingle stanza(/packet) that tries to establish a new session.
org.jivesoftware.smackx.jingleold.JingleManager.isServiceEnabled	(	XMPPConnection	): Returns true if the Jingle support is enabled for the given connection.
org.jivesoftware.smackx.jingleold.JingleManager.isServiceEnabled	(	XMPPConnection	Jid	): Returns true if the specified user handles Jingle messages.
org.jivesoftware.smackx.jingleold.JingleManager.removeCreationListener	(	CreatedJingleSessionListener	): Removes a CreatedJingleSessionListener. This listener will be called when a session is created by the JingleManager instance.
org.jivesoftware.smackx.jingleold.JingleManager.removeJingleSessionRequestListener	(	JingleSessionRequestListener	): Removes a Jingle session listenerJingle.
org.jivesoftware.smackx.jingleold.JingleManager.setJingleServiceEnabled	(	): Setup the jingle system to let the remote clients know we support Jingle. (This used to be a static part of construction. The problem is a remote client might attempt a Jingle connection to us after we've created an XMPPConnection, but before we've setup an instance of a JingleManager. We will appear to not support Jingle. With the new method you just call it once and all new connections will report Jingle support.)
org.jivesoftware.smackx.jingleold.JingleManager.setMediaManagers	(	List	): Set the Media Managers of this Jingle Manager.
org.jivesoftware.smackx.jingleold.JingleManager.setServiceEnabled	(	XMPPConnection	boolean	): Enables or disables the Jingle support on a given connection.   Before starting any Jingle jmf session, check that the user can handle it. Enable the Jingle support to indicate that this client handles Jingle messages.
org.jivesoftware.smackx.jingleold.JingleManager.triggerSessionCreated	(	JingleSession	): Trigger CreatedJingleSessionListeners that a session was created.
org.jivesoftware.smackx.jingleold.JingleManager.triggerSessionRequested	(	Jingle	): Activates the listenerJingles on a Jingle session request.
org.jivesoftware.smackx.jingleold.JingleNegotiator: Basic Jingle negotiator.    JingleNegotiator implements some basic behavior for every Jingle negotiation. It implements a "state" pattern: each stage should process Jingle packets and act depending on the current state in the negotiation...  
org.jivesoftware.smackx.jingleold.JingleNegotiator.JingleNegotiator	(	): Default constructor.
org.jivesoftware.smackx.jingleold.JingleNegotiator.JingleNegotiator	(	JingleSession	): Default constructor with a Connection.
org.jivesoftware.smackx.jingleold.JingleNegotiator.addExpectedId	(	String	): Add expected ID.
org.jivesoftware.smackx.jingleold.JingleNegotiator.addListener	(	JingleListener	): Add a Jingle session listener to listen to incoming session requests.
org.jivesoftware.smackx.jingleold.JingleNegotiator.close	(	): Close the negotiation.
org.jivesoftware.smackx.jingleold.JingleNegotiator.dispatchIncomingPacket	(	IQ	String	): Dispatch an incoming packet. The negotiators form a tree relationship that roughly matches the Jingle stanza(/packet) format: JingleSession Content Negotiator Media Negotiator Transport Negotiator Content Negotiator Media Negotiator Transport Negotiator        This way, each segment of a Jingle stanza(/packet) has a corresponding negotiator that know how to deal with that part of the Jingle packet. It also allows us to support Jingle packets of arbitraty complexity. Each parent calls dispatchIncomingPacket for each of its children. The children then pass back a List<> of results that will get sent when we reach the top level negotiator (JingleSession).
org.jivesoftware.smackx.jingleold.JingleNegotiator.doStart	(	): Each of the negotiators has their individual behavior when they start.
org.jivesoftware.smackx.jingleold.JingleNegotiator.getListenersList	(	): Get a copy of the listeners
org.jivesoftware.smackx.jingleold.JingleNegotiator.getSession	(	): Get the XMPP connection associated with this negotiation.
org.jivesoftware.smackx.jingleold.JingleNegotiator.isExpectedId	(	String	): Check if the passed ID is the expected ID.
org.jivesoftware.smackx.jingleold.JingleNegotiator.removeExpectedId	(	String	): Remove and expected ID.
org.jivesoftware.smackx.jingleold.JingleNegotiator.removeListener	(	JingleListener	): Removes a Jingle session listener.
org.jivesoftware.smackx.jingleold.JingleNegotiator.setSession	(	JingleSession	): Set the XMPP connection associated.
org.jivesoftware.smackx.jingleold.JingleSession: An abstract Jingle session.  This class contains some basic properties of every Jingle session. However, the concrete implementation can be found in subclasses.
org.jivesoftware.smackx.jingleold.JingleSession.JingleSession	(	XMPPConnection	Jid	Jid	String	List	): Full featured JingleSession constructor.
org.jivesoftware.smackx.jingleold.JingleSession.JingleSession	(	XMPPConnection	JingleSessionRequest	Jid	Jid	List	): JingleSession constructor (for an outgoing Jingle session).
org.jivesoftware.smackx.jingleold.JingleSession.addContentNegotiator	(	ContentNegotiator	): Add a new content negotiator on behalf of a  section received.
org.jivesoftware.smackx.jingleold.JingleSession.addJingleMediaSession	(	String	JingleMediaSession	): The jingle session may have one or more media managers that are trying to establish media sessions. When the media manager succeeds in creating a media session is registers it with the session by the media manager's static name. This routine is where the media manager does the registering.
org.jivesoftware.smackx.jingleold.JingleSession.addMediaListener	(	JingleMediaListener	): Add a listener for jmf negotiation events.
org.jivesoftware.smackx.jingleold.JingleSession.addTransportListener	(	JingleTransportListener	): Add a listener for transport negotiation events.
org.jivesoftware.smackx.jingleold.JingleSession.close	(	): Terminate negotiations.
org.jivesoftware.smackx.jingleold.JingleSession.createAck	(	IQ	): Acknowledge a IQ packet.
org.jivesoftware.smackx.jingleold.JingleSession.createJingleError	(	IQ	JingleError	): Complete and send an error. Complete all the null fields in an IQ error reponse, using the sesssion information we have or some info from the incoming packet.
org.jivesoftware.smackx.jingleold.JingleSession.dispatchIncomingPacket	(	IQ	String	): Dispatch an incoming packet. The method is responsible for recognizing the stanza(/packet) type and, depending on the current state, delivering the stanza(/packet) to the right event handler and wait for a response.
org.jivesoftware.smackx.jingleold.JingleSession.generateSessionId	(	): Generate a unique session ID.
org.jivesoftware.smackx.jingleold.JingleSession.getInitiator	(	): Get the session initiator.
org.jivesoftware.smackx.jingleold.JingleSession.getInstanceFor	(	XMPPConnection	): Returns the JingleSession related to a particular connection.
org.jivesoftware.smackx.jingleold.JingleSession.getMediaManagers	(	): Get the Media Manager of this Jingle Session.
org.jivesoftware.smackx.jingleold.JingleSession.getMediaSession	(	String	): The jingle session may have one or more media managers that are trying to establish media sessions. When the media manager succeeds in creating a media session is registers it with the session by the media manager's static name. This routine is where other objects can access the registered media sessions. NB: If the media manager has not succeeded in establishing a media session then this could return null.
org.jivesoftware.smackx.jingleold.JingleSession.getResponder	(	): Get the session responder.
org.jivesoftware.smackx.jingleold.JingleSession.getSid	(	): Get the session ID.
org.jivesoftware.smackx.jingleold.JingleSession.hashCode	(	): Send a content info message.
org.jivesoftware.smackx.jingleold.JingleSession.installConnectionListeners	(	XMPPConnection	): Configure a session, setting some action listeners...
org.jivesoftware.smackx.jingleold.JingleSession.isFullyEstablished	(	): Return true if all of the media managers have finished.
org.jivesoftware.smackx.jingleold.JingleSession.mediaReceived	(	String	): Called when new Media is received.
org.jivesoftware.smackx.jingleold.JingleSession.receivePacketAndRespond	(	IQ	): Process and respond to an incoming packet.  This method is called from the stanza(/packet) listener dispatcher when a new stanza(/packet) has arrived. The method is responsible for recognizing the stanza(/packet) type and, depending on the current state, delivering it to the right event handler and wait for a response. The response will be another Jingle stanza(/packet) that will be sent to the other end point.
org.jivesoftware.smackx.jingleold.JingleSession.registerInstance	(	): Register this instance.
org.jivesoftware.smackx.jingleold.JingleSession.removeAsyncPacketListener	(	): Remove the stanza(/packet) listener used for processing packet.
org.jivesoftware.smackx.jingleold.JingleSession.removeMediaListener	(	JingleMediaListener	): Remove a listener for jmf negotiation events.
org.jivesoftware.smackx.jingleold.JingleSession.removeTransportListener	(	JingleTransportListener	): Remove a listener for transport negotiation events.
org.jivesoftware.smackx.jingleold.JingleSession.sendFormattedJingle	(	IQ	Jingle	): Complete and send a packet. Complete all the null fields in a Jingle reponse, using the session information we have or some info from the incoming packet.
org.jivesoftware.smackx.jingleold.JingleSession.sendFormattedJingle	(	Jingle	): Complete and send a packet. Complete all the null fields in a Jingle reponse, using the session information we have.
org.jivesoftware.smackx.jingleold.JingleSession.setInitiator	(	Jid	): Set the session initiator.
org.jivesoftware.smackx.jingleold.JingleSession.setMediaManagers	(	List	): Set the Media Manager of this Jingle Session.
org.jivesoftware.smackx.jingleold.JingleSession.setResponder	(	Jid	): Set the session responder.
org.jivesoftware.smackx.jingleold.JingleSession.setSessionState	(	JingleSessionState	): Validate the state changes.
org.jivesoftware.smackx.jingleold.JingleSession.setSid	(	String	): Set the session ID
org.jivesoftware.smackx.jingleold.JingleSession.setupListeners	(	): Setup the listeners that act on events coming from the lower level negotiators.
org.jivesoftware.smackx.jingleold.JingleSession.startIncoming	(	): This is the starting point for responding to a new session.
org.jivesoftware.smackx.jingleold.JingleSession.startNegotiators	(	): When we initiate a session we need to start a bunch of negotiators right after we receive the result stanza(/packet) for our session-initiate. This is where we start them.
org.jivesoftware.smackx.jingleold.JingleSession.startOutgoing	(	): This is the starting point for intitiating a new session.
org.jivesoftware.smackx.jingleold.JingleSession.terminate	(	): Terminates the session with default reason.
org.jivesoftware.smackx.jingleold.JingleSession.terminate	(	String	): Terminates the session with a custom reason.
org.jivesoftware.smackx.jingleold.JingleSession.triggerMediaReceived	(	String	): Trigger a media received event.
org.jivesoftware.smackx.jingleold.JingleSession.triggerSessionClosed	(	String	): Trigger a session closed event.
org.jivesoftware.smackx.jingleold.JingleSession.triggerSessionClosedOnError	(	XMPPException	): Trigger a session closed event due to an error.
org.jivesoftware.smackx.jingleold.JingleSession.unregisterInstanceFor	(	XMPPConnection	): Clean a session from the list.
org.jivesoftware.smackx.jingleold.JingleSession.updatePacketListener	(	): Install the stanza(/packet) listener. The listener is responsible for responding to any stanza(/packet) that we receive...
org.jivesoftware.smackx.jingleold.JingleSessionRequest: A Jingle session request.  This class is a facade of a received Jingle request. The user can have direct access to the Jingle stanza(/packet) (JingleSessionRequest.getJingle() ) of the request or can use the convencience methods provided by this class.
org.jivesoftware.smackx.jingleold.JingleSessionRequest.JingleSessionRequest	(	JingleManager	Jingle	): A recieve request is constructed from the Jingle Initiation request received from the initator.
org.jivesoftware.smackx.jingleold.JingleSessionRequest.accept	(	): Accepts this request and creates the incoming Jingle session.
org.jivesoftware.smackx.jingleold.JingleSessionRequest.getFrom	(	): Returns the fully-qualified jabber ID of the user that requested this session.
org.jivesoftware.smackx.jingleold.JingleSessionRequest.getJingle	(	): Returns the Jingle stanza(/packet) that was sent by the requester which contains the parameters of the session.
org.jivesoftware.smackx.jingleold.JingleSessionRequest.getSessionID	(	): Returns the session ID that uniquely identifies this session.
org.jivesoftware.smackx.jingleold.JingleSessionRequest.reject	(	): Rejects the session request.
org.jivesoftware.smackx.jingleold.JingleSessionState: Implement the Jingle Session state using the State Behavioral pattern. (From the book Design Patterns, AKA GoF.) These classes also employ the Flyweight and Singleton patterns as recommended for the State pattern by GoF. There seems to be three ways to go with the State pattern in Java: interface, abstract class and enums. Most of the accepted models use abstract classes. It wasn't clear to me that any of the three models was superior, so I went with the most common example.
org.jivesoftware.smackx.jingleold.JingleSessionState.enter	(	): Called when entering the state.
org.jivesoftware.smackx.jingleold.JingleSessionState.exit	(	): Called when exiting the state.
org.jivesoftware.smackx.jingleold.JingleSessionState.getInstance	(	): Called when entering the state.
org.jivesoftware.smackx.jingleold.JingleSessionState.processJingle	(	JingleSession	Jingle	JingleActionEnum	): Process an incoming Jingle Packet. When you look at the GoF State pattern this method roughly corresponds to example on p310: ProcessOctect().
org.jivesoftware.smackx.jingleold.JingleSessionState.toString	(	): For debugging just emit the short name of the class.
org.jivesoftware.smackx.jingleold.JingleSessionStateActive: Jingle. 
org.jivesoftware.smackx.jingleold.JingleSessionStateActive.getInstance	(	): A thread-safe means of getting the one instance of this class.
org.jivesoftware.smackx.jingleold.JingleSessionStateActive.receiveSessionTerminateAction	(	JingleSession	Jingle	): Receive and process the  action.
org.jivesoftware.smackx.jingleold.JingleSessionStateEnded: Jingle. 
org.jivesoftware.smackx.jingleold.JingleSessionStateEnded.getInstance	(	): A thread-safe means of getting the one instance of this class.
org.jivesoftware.smackx.jingleold.JingleSessionStateEnded.processJingle	(	JingleSession	Jingle	JingleActionEnum	): Pretty much nothing is valid for receiving once we've ended the session.
org.jivesoftware.smackx.jingleold.JingleSessionStatePending: Jingle. 
org.jivesoftware.smackx.jingleold.JingleSessionStatePending.getInstance	(	): A thread-safe means of getting the one instance of this class.
org.jivesoftware.smackx.jingleold.JingleSessionStatePending.receiveContentAcceptAction	(	Jingle	): Receive and process the  action.
org.jivesoftware.smackx.jingleold.JingleSessionStatePending.receiveSessionAcceptAction	(	JingleSession	Jingle	): Receive and process the  action.
org.jivesoftware.smackx.jingleold.JingleSessionStatePending.receiveSessionTerminateAction	(	JingleSession	Jingle	): Receive and process the  action.
org.jivesoftware.smackx.jingleold.JingleSessionStateUnknown: Jingle. 
org.jivesoftware.smackx.jingleold.JingleSessionStateUnknown.getInstance	(	): A thread-safe means of getting the one instance of this class.
org.jivesoftware.smackx.jingleold.JingleSessionStateUnknown.receiveSessionInitiateAction	(	JingleSession	Jingle	): In the UNKNOWN state we received a  action. This method processes that action.
org.jivesoftware.smackx.jingleold.JingleSessionStateUnknown.receiveSessionTerminateAction	(	JingleSession	Jingle	): Receive and process the  action.
org.jivesoftware.smackx.jingleold.listeners.CreatedJingleSessionListener: Inteface used to dispatch a event when a Jingle session is created.
org.jivesoftware.smackx.jingleold.listeners.JingleListener: Jingle listeners interface. This is the list of events that can be observed from a JingleSession and some sub negotiators. This listeners can be added to different elements of the Jingle model. For example, a JingleManager can notify any SessionRequestListenerListener listener when a new session request is received. In this case, the sessionRequested() of the listener will be executed, and the listener will be able to accept() or decline() the invitation.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaInfoListener: Interface for listening to jmf info events.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaInfoListener.mediaInfoBusy	(	): The other end is busy.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaInfoListener.mediaInfoHold	(	): We are on hold.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaInfoListener.mediaInfoMute	(	): The jmf is muted.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaInfoListener.mediaInfoQueued	(	): We are queued.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaInfoListener.mediaInfoRinging	(	): We are ringing.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaListener: Interface for listening to jmf events.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaListener.mediaClosed	(	PayloadType	): Notification that a payload type must be cancelled.
org.jivesoftware.smackx.jingleold.listeners.JingleMediaListener.mediaEstablished	(	PayloadType	): Notification that the jmf has been negotiated and established.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionListener: Interface for listening for session events.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionListener.sessionClosed	(	String	JingleSession	): Notification that the session was closed normally.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionListener.sessionClosedOnError	(	XMPPException	JingleSession	): Notification that the session was closed due to an exception.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionListener.sessionDeclined	(	String	JingleSession	): Notification that the session was declined.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionListener.sessionEstablished	(	PayloadType	TransportCandidate	TransportCandidate	JingleSession	): Notification that the session has been established. Arguments specify the payload type and transport to use.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionListener.sessionMediaReceived	(	JingleSession	String	): Notification that the Media has arrived for this session.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionListener.sessionRedirected	(	String	JingleSession	): Notification that the session was redirected.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionRequestListener: Interface to listener Jingle session requests.
org.jivesoftware.smackx.jingleold.listeners.JingleSessionRequestListener.sessionRequested	(	JingleSessionRequest	): A request to start a session has been recieved from another user.
org.jivesoftware.smackx.jingleold.listeners.JingleTransportListener: Interface for listening to transport events.
org.jivesoftware.smackx.jingleold.listeners.JingleTransportListener.transportClosed	(	TransportCandidate	): Notification that a transport must be cancelled.
org.jivesoftware.smackx.jingleold.listeners.JingleTransportListener.transportClosedOnError	(	XMPPException	): Notification that the transport was closed due to an exception.
org.jivesoftware.smackx.jingleold.listeners.JingleTransportListener.transportEstablished	(	TransportCandidate	TransportCandidate	): Notification that the transport has been established.
org.jivesoftware.smackx.jingleold.media.ContentInfo: Content info. Content info messages are complementary messages that can be transmitted for informing of events like "busy", "ringtone", etc.
org.jivesoftware.smackx.jingleold.media.ContentInfo.Audio: Audio content info messages.
org.jivesoftware.smackx.jingleold.media.ContentInfo.Audio.fromString	(	String	): Returns the MediaInfo constant associated with the String value.
org.jivesoftware.smackx.jingleold.media.JingleMediaManager: This class provides necessary Jingle Session jmf methods and behavior.  The goal of this class is to provide a flexible way to make JingleManager control jmf streaming APIs without implement them. For instance you can implement a file transfer using java sockets or a VOIP Media Manager using JMF. You can implement many JingleMediaManager according to you necessity.
org.jivesoftware.smackx.jingleold.media.JingleMediaManager.createMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	JingleSession	): Create a Media Session Implementation.
org.jivesoftware.smackx.jingleold.media.JingleMediaManager.getPayloads	(	): Return all supported Payloads for this Manager.
org.jivesoftware.smackx.jingleold.media.JingleMediaManager.getPreferredPayloadType	(	): Returns the Preferred PayloadType of the Media Manager.
org.jivesoftware.smackx.jingleold.media.JingleMediaManager.getTransportManager	(	): Return The transport manager that goes with this media manager.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession: Public Abstract Class provides a clear interface between Media Session and Jingle API.  When a Jingle Session is fully stablished, we will have a Payload Type and two transport candidates defined for it. Smack Jingle API don't implement Media Transmit and Receive methods. But provides an interface to let the user implements it using another API. For instance: JMF.  The Class that implements this one, must have the support to transmit and receive the jmf. This interface let the user choose his own jmf API.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.JingleMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	String	JingleSession	): Creates a new JingleMediaSession Instance to handle Media methods.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.addMediaReceivedListener	(	MediaReceivedListener	): Adds a Media Received Listener.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.getJingleSession	(	): Gets associated JingleSession.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.getLocal	(	): Returns the Media Session local Candidate.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.getMediaLocator	(	): Return the media locator or null if not defined.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.getPayloadType	(	): Returns the PayloadType of the Media Session.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.getRemote	(	): Returns the Media Session remote Candidate.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.initialize	(	): Initialize the RTP Channel preparing to transmit and receive.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.mediaReceived	(	String	): Called when new Media is received.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.removeAllMediaReceivedListener	(	): Removes all Media Received Listeners.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.removeMediaReceivedListener	(	MediaReceivedListener	): Removes a Media Received Listener.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.setMediaLocator	(	String	): Set the media locator.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.setTrasmit	(	boolean	): Set transmit activity. If the active is true, the instance should trasmit. If it is set to false, the instance should pause transmit.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.startReceive	(	): Starts a RTP / UDP / TCP Receiver from the remote Candidate to local Candidate.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.startTrasmit	(	): Starts a RTP / UDP / TCP Transmission to the remote Candidate.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.stopReceive	(	): Stops a RTP / UDP / TCP Receiver from the remote Candidate to local Candidate.
org.jivesoftware.smackx.jingleold.media.JingleMediaSession.stopTrasmit	(	): Stops a RTP / UDP / TCP Transmission to the remote Candidate.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator: Manager for jmf descriptor negotiation.   This class is responsible for managing the descriptor negotiation process, handling all the xmpp packets interchange and the stage control. handling all the xmpp packets interchange and the stage control.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.MediaNegotiator	(	JingleSession	JingleMediaManager	List	ContentNegotiator	): Default constructor. The constructor establishes some basic parameters, but it does not start the negotiation. For starting the negotiation, call startNegotiation.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.addRemoteAudioPayloadType	(	PayloadType.Audio	): Adds a payload type to the list of remote payloads.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.close	(	): Terminate the jmf negotiator.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.dispatchIncomingPacket	(	IQ	String	): Dispatch an incoming packet. The method is responsible for recognizing the stanza(/packet) type and, depending on the current state, delivering the stanza(/packet) to the right event handler and wait for a response.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.doStart	(	): Called from above when starting a new session.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.getBestCommonAudioPt	(	): Get the best common codec between both parts.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.getJingleDescription	(	): Create a JingleDescription that matches this negotiator.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.getMediaManager	(	): Return The media manager for this negotiator.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.isEstablished	(	): Return true if the content is negotiated.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.isFullyEstablished	(	): Return true if the content is fully negotiated.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.receiveContentAcceptAction	(	Jingle	JingleDescription	): The other side has sent us a content-accept. The payload types in that message may not match with what we sent, but XEP-167 says that the other side should retain the order of the payload types we first sent. This means we can walk through our list, in order, until we find one from their list that matches. This will be the best payload type to use.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.receiveResult	(	IQ	): Process the ACK of our list of codecs (our offer).
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.receiveSessionAcceptAction	(	Jingle	JingleDescription	): A jmf description has been accepted. In this case, we must save the accepted payload type and notify any listener...
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.receiveSessionInfoAction	(	Jingle	JingleDescription	): A content info has been received. This is done for publishing the list of payload types...
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.receiveSessionInitiateAction	(	Jingle	JingleDescription	): Receive a session-initiate packet.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.triggerMediaClosed	(	PayloadType	): Trigger a jmf closed event.
org.jivesoftware.smackx.jingleold.media.MediaNegotiator.triggerMediaEstablished	(	PayloadType	): Trigger a session established event.
org.jivesoftware.smackx.jingleold.media.MediaReceivedListener: Listener for new Incoming Media Streams.
org.jivesoftware.smackx.jingleold.media.MediaReceivedListener.mediaReceived	(	String	): Called when new Media is received.
org.jivesoftware.smackx.jingleold.media.PayloadType: Represents a payload type.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio: Audio payload type.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio.Audio	(	): Empty constructor.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio.Audio	(	PayloadType	): Copy constructor.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio.Audio	(	PayloadType.Audio	): Copy constructor.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio.Audio	(	int	String	): Constructor with Id and name.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio.Audio	(	int	String	int	): Constructor with all the attributes of an Audio payload type.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio.Audio	(	int	String	int	int	): Constructor with all the attributes of an Audio payload type.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio.getClockRate	(	): Get the sampling clockRate for a payload type.
org.jivesoftware.smackx.jingleold.media.PayloadType.Audio.setClockRate	(	int	): Set tha sampling clockRate for a playload type.
org.jivesoftware.smackx.jingleold.media.PayloadType.PayloadType	(	): Default constructor.
org.jivesoftware.smackx.jingleold.media.PayloadType.PayloadType	(	PayloadType	): Copy constructor.
org.jivesoftware.smackx.jingleold.media.PayloadType.PayloadType	(	int	String	): Constructor with Id and name.
org.jivesoftware.smackx.jingleold.media.PayloadType.PayloadType	(	int	String	int	): Constructor with Id, name and number of channels.
org.jivesoftware.smackx.jingleold.media.PayloadType.getChannels	(	): Get the number of channels used by this payload type.
org.jivesoftware.smackx.jingleold.media.PayloadType.getElementName	(	): Returns the XML element name of the element.
org.jivesoftware.smackx.jingleold.media.PayloadType.getId	(	): Get the ID.
org.jivesoftware.smackx.jingleold.media.PayloadType.getName	(	): Get the printable name.
org.jivesoftware.smackx.jingleold.media.PayloadType.isNull	(	): Return true if the Payload type is not valid.
org.jivesoftware.smackx.jingleold.media.PayloadType.setChannels	(	int	): Set the numer of channels for a payload type.
org.jivesoftware.smackx.jingleold.media.PayloadType.setId	(	int	): Set the ID.
org.jivesoftware.smackx.jingleold.media.PayloadType.setName	(	String	): Set the printable name.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioChannel: An Easy to use Audio Channel implemented using JMF. It sends and receives jmf for and from desired IPs and ports. Also has a rport Symetric behavior for better NAT Traversal. It send data from a defined port and receive data in the same port, making NAT binds easier.  Send from portA to portB and receive from portB in portA.  Sending portA ---> portB  Receiving portB ---> portA  Transmit and Receive are interdependents. To receive you MUST trasmit. 
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioChannel.AudioChannel	(	MediaLocator	String	String	int	int	Format	JingleMediaSession	): Creates an Audio Channel for a desired jmf locator. For instance: new MediaLocator("dsound://")
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioChannel.StateListener: * Inner Classes *
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioChannel.createTransmitter	(	): Use the RTPManager API to create sessions for each jmf track of the processor.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioChannel.getPacketSize	(	Format	int	): Get the best stanza(/packet) size for a given codec and a codec rate
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioChannel.setTrasmit	(	boolean	): Set transmit activity. If the active is true, the instance should trasmit. If it is set to false, the instance should pause transmit.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioChannel.start	(	): Starts the transmission. Returns null if transmission started ok. Otherwise it returns a string with the reason why the setup failed. Starts receive also.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioChannel.stop	(	): Stops the transmission if already started. Stops the receiver also.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioFormatUtils: Audio Format Utils.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioFormatUtils.getAudioFormat	(	PayloadType	): Return a JMF AudioFormat for a given Jingle Payload type. Return null if the payload is not supported by this jmf API.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession: This Class implements a complete JingleMediaSession. It sould be used to transmit and receive audio captured from the Mic. This Class should be automaticly controlled by JingleSession. But you could also use in any VOIP application. For better NAT Traversal support this implementation don't support only receive or only transmit. To receive you MUST transmit. So the only implemented and functionally methods are startTransmit() and stopTransmit()
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession.AudioMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	String	JingleSession	): Creates a org.jivesoftware.jingleaudio.jmf.AudioMediaSession with defined payload type, remote and local candidates.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession.getFreePort	(	): Obtain a free port we can use.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession.initialize	(	): Initialize the Audio Channel to make it able to send and receive audio.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession.setTrasmit	(	boolean	): Set transmit activity. If the active is true, the instance should trasmit. If it is set to false, the instance should pause transmit.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession.startReceive	(	): For NAT Reasons this method does nothing. Use startTransmit() to start transmit and receive jmf
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession.startTrasmit	(	): Starts transmission and for NAT Traversal reasons start receiving also.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession.stopReceive	(	): For NAT Reasons this method does nothing. Use startTransmit() to start transmit and receive jmf
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioMediaSession.stopTrasmit	(	): Stops transmission and for NAT Traversal reasons stop receiving also.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioReceiver: This class implements receive methods and listeners to be used in AudioChannel.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioReceiver.controllerUpdate	(	ControllerEvent	): ControllerListener for the Players.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioReceiver.update	(	ReceiveStreamEvent	): ReceiveStreamListener.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.AudioReceiver.update	(	SessionEvent	): JingleSessionListener.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager: Implements a jingleMediaManager using JMF based API. It supports GSM and G723 codecs. This API only currently works on windows and Mac.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager.JmfMediaManager	(	JingleTransportManager	): Creates a Media Manager instance.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager.JmfMediaManager	(	String	JingleTransportManager	): Creates a Media Manager instance.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager.createMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	JingleSession	): Returns a new jingleMediaSession.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager.getMediaLocator	(	): Return the media locator or null if not defined.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager.getPayloads	(	): Return all supported Payloads for this Manager.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager.setMediaLocator	(	String	): Set the media locator.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager.setupJMF	(	): Runs JMFInit the first time the application is started so that capture devices are properly detected and initialized by JMF.
org.jivesoftware.smackx.jingleold.mediaimpl.jmf.JmfMediaManager.setupPayloads	(	): Setup API supported Payloads
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession: This Class implements a complete JingleMediaSession. It sould be used to transmit and receive audio captured from the Mic. This Class should be automaticly controlled by JingleSession. But you could also use in any VOIP application. For better NAT Traversal support this implementation don't support only receive or only transmit. To receive you MUST transmit. So the only implemented and functionally methods are startTransmit() and stopTransmit()
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.AudioMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	String	JingleSession	): Creates a org.jivesoftware.jingleaudio.jspeex.AudioMediaSession with defined payload type, remote and local candidates.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.createSession	(	String	int	String	int	MediaSessionListener	int	boolean	boolean	): Create a Session using Speex Codec.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.getFreePort	(	): Obtain a free port we can use.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.initialize	(	): Initialize the Audio Channel to make it able to send and receive audio.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.setTrasmit	(	boolean	): Set transmit activity. If the active is true, the instance should trasmit. If it is set to false, the instance should pause transmit.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.startReceive	(	): For NAT Reasons this method does nothing. Use startTransmit() to start transmit and receive jmf
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.startTrasmit	(	): Starts transmission and for NAT Traversal reasons start receiving also.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.stopReceive	(	): For NAT Reasons this method does nothing. Use startTransmit() to start transmit and receive jmf
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.AudioMediaSession.stopTrasmit	(	): Stops transmission and for NAT Traversal reasons stop receiving also.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.SpeexMediaManager: Implements a jingleMediaManager using JMF based API and JSpeex. It supports Speex codec. This API only currently works on windows.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.SpeexMediaManager.createMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	JingleSession	): Returns a new jingleMediaSession.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.SpeexMediaManager.getPayloads	(	): Return all supported Payloads for this Manager.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.SpeexMediaManager.setupJMF	(	): Runs JMFInit the first time the application is started so that capture devices are properly detected and initialized by JMF.
org.jivesoftware.smackx.jingleold.mediaimpl.jspeex.SpeexMediaManager.setupPayloads	(	): Setup API supported Payloads
org.jivesoftware.smackx.jingleold.mediaimpl.multi.MultiMediaManager: Implements a MultiMediaManager using other JingleMediaManager implementations. It supports every Codecs that JingleMediaManagers added has.
org.jivesoftware.smackx.jingleold.mediaimpl.multi.MultiMediaManager.createMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	JingleSession	): Returns a new JingleMediaSession.
org.jivesoftware.smackx.jingleold.mediaimpl.multi.MultiMediaManager.getPayloads	(	): Return all supported Payloads for this Manager.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareMediaManager: Implements a JingleMediaManager for ScreenSharing. It currently uses an Audio payload Type. Which needs to be fixed in the next version.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareMediaManager.createMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	JingleSession	): Returns a new JingleMediaSession.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareMediaManager.getPayloads	(	): Return all supported Payloads for this Manager.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareMediaManager.setupPayloads	(	): Setup API supported Payloads
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession: This Class implements a complete JingleMediaSession. It sould be used to transmit and receive captured images from the Display. This Class should be automaticly controlled by JingleSession. For better NAT Traversal support this implementation don't support only receive or only transmit. To receive you MUST transmit. So the only implemented and functionally methods are startTransmit() and stopTransmit()
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession.ScreenShareSession	(	PayloadType	TransportCandidate	TransportCandidate	String	JingleSession	): Creates a org.jivesoftware.jingleaudio.jmf.AudioMediaSession with defined payload type, remote and local candidates.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession.getFreePort	(	): Obtain a free port we can use.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession.initialize	(	): Initialize the screen share channels.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession.setTrasmit	(	boolean	): Set transmit activity. If the active is true, the instance should trasmit. If it is set to false, the instance should pause transmit.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession.startReceive	(	): For NAT Reasons this method does nothing. Use startTransmit() to start transmit and receive jmf
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession.startTrasmit	(	): Starts transmission and for NAT Traversal reasons start receiving also.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession.stopReceive	(	): For NAT Reasons this method does nothing. Use startTransmit() to start transmit and receive jmf
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.ScreenShareSession.stopTrasmit	(	): Stops transmission and for NAT Traversal reasons stop receiving also.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.AbstractBufferedImageOp: A convenience class which implements those methods of BufferedImageOp which are rarely changed.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.AbstractBufferedImageOp.getRGB	(	BufferedImage	int	int	int	int	int[]	): A convenience method for getting ARGB pixels from an image. This tries to avoid the performance penalty of BufferedImage.getRGB unmanaging the image.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.AbstractBufferedImageOp.setRGB	(	BufferedImage	int	int	int	int	int[]	): A convenience method for setting ARGB pixels in an image. This tries to avoid the performance penalty of BufferedImage.setRGB unmanaging the image.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.DefaultDecoder: Implements a default PNG decoder.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.DefaultEncoder: Implements a default PNG Encoder.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.ImageDecoder: Image Decoder Interface use this interface if you want to change the default decoder.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.ImageEncoder: Image Encoder Interface use this interface if you want to change the default encoder.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.ImageReceiver: UDP Image Receiver. It uses PNG Tiles into UDP packets.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.ImageTransmitter: UDP Image Receiver. It uses PNG Tiles into UDP packets.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.ImageTransmitter.getEncoder	(	): Get the encoder used to encode Images Tiles.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.ImageTransmitter.setEncoder	(	ImageEncoder	): Set the encoder used to encode Image Tiles.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.ImageTransmitter.setTransmit	(	boolean	): Set Transmit Enabled/Disabled.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.ImageTransmitter.stop	(	): Stops Transmitter.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.OctTreeQuantizer: An image Quantizer based on the Octree algorithm. This is a very basic implementation at present and could be much improved by picking the nodes to reduce more carefully (i.e. not completely at random) when I get the time.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.OctTreeQuantizer.OctTreeNode: An Octtree node.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.OctTreeQuantizer.OctTreeNode.list	(	PrintStream	int	): A debugging method which prints the tree out.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.OctTreeQuantizer.addPixels	(	int[]	int	int	): Add pixels to the quantizer.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.OctTreeQuantizer.buildColorTable	(	): Build the color table.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.OctTreeQuantizer.buildColorTable	(	int[]	int[]	): A quick way to use the quantizer. Just create a table the right size and pass in the pixels.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.OctTreeQuantizer.getIndexForColor	(	int	): Get the color table index for a color.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.OctTreeQuantizer.setup	(	int	): Initialize the quantizer. This should be called before adding any pixels.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.PixelUtils: Some more useful math functions for image processing. These are becoming obsolete as we move to Java2D. Use MiscComposite instead.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.PixelUtils.clamp	(	int	): Clamp a value to the range 0..255.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.QuantizeFilter: A filter which quantizes an image to a set number of colors - useful for producing images which are to be encoded using an index color model. The filter can perform Floyd-Steinberg error-diffusion dithering if required. At present, the quantization is done using an octtree algorithm but I eventually hope to add more quantization methods such as median cut. Note: at present, the filter produces an image which uses the RGB color model (because the application it was written for required it). I hope to extend it to produce an IndexColorModel by request.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.QuantizeFilter.getDither	(	): Return the dithering setting.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.QuantizeFilter.getNumColors	(	): Get the number of colors to quantize to.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.QuantizeFilter.getSerpentine	(	): Return the serpentine setting.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.QuantizeFilter.setDither	(	boolean	): Set whether to use dithering or not. If not, the image is posterized.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.QuantizeFilter.setNumColors	(	int	): Set the number of colors to quantize to.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.QuantizeFilter.setSerpentine	(	boolean	): Set whether to use a serpentine pattern for return or not. This can reduce 'avalanche' artifacts in the output.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.Quantizer: The interface for an image quantizer. The addColor method is called (repeatedly if necessary) with all the image pixels. A color table can then be returned by calling the buildColorTable method.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.Quantizer.addPixels	(	int[]	int	int	): Add pixels to the quantizer.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.Quantizer.buildColorTable	(	): Build a color table from the added pixels.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.Quantizer.getIndexForColor	(	int	): Using the previously-built color table, return the index into that table for a pixel. This is guaranteed to return a valid index - returning the index of a color closer to that requested if necessary. 
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.Quantizer.setup	(	int	): Initialize the quantizer. This should be called before adding any pixels.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.WholeImageFilter: A filter which acts as a superclass for filters which need to have the whole image in memory to do their stuff.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.WholeImageFilter.WholeImageFilter	(	): Construct a WholeImageFilter.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.WholeImageFilter.filterPixels	(	int	int	int[]	Rectangle	): Actually filter the pixels.
org.jivesoftware.smackx.jingleold.mediaimpl.sshare.api.WholeImageFilter.transformSpace	(	Rectangle	): Calculate output bounds for given input bounds.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaManager: Implements a MediaManager for test purposes.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaManager.createMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	JingleSession	): Returns a new JingleMediaSession.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaManager.getPayloads	(	): Return all supported Payloads for this Manager.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaSession: This Class implements a complete JingleMediaSession for unit testing.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaSession.TestMediaSession	(	PayloadType	TransportCandidate	TransportCandidate	String	JingleSession	): Creates a TestMediaSession with defined payload type, remote and local candidates.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaSession.initialize	(	): Initialize the screen share channels.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaSession.setTrasmit	(	boolean	): Set transmit activity. If the active is true, the instance should trasmit. If it is set to false, the instance should pause transmit.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaSession.startReceive	(	): For NAT Reasons this method does nothing. Use startTransmit() to start transmit and receive jmf
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaSession.startTrasmit	(	): Starts transmission and for NAT Traversal reasons start receiving also.
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaSession.stopReceive	(	): For NAT Reasons this method does nothing. Use startTransmit() to start transmit and receive jmf
org.jivesoftware.smackx.jingleold.mediaimpl.test.TestMediaSession.stopTrasmit	(	): Stops transmission and for NAT Traversal reasons stop receiving also.
org.jivesoftware.smackx.jingleold.nat.BasicResolver: Basic Resolver takes all IP addresses of the interfaces and uses the first non-loopback address. A very simple and easy to use resolver.
org.jivesoftware.smackx.jingleold.nat.BasicResolver.BasicResolver	(	): Constructor.
org.jivesoftware.smackx.jingleold.nat.BasicResolver.resolve	(	JingleSession	): Resolve the IP address.  The BasicResolver takes the IP addresses of the interfaces and uses the first non-loopback, non-linklocal and non-sitelocal address.
org.jivesoftware.smackx.jingleold.nat.BasicTransportManager: A Basic Jingle Transport Manager implementation.
org.jivesoftware.smackx.jingleold.nat.BridgedResolver: Bridged Resolver use a RTPBridge Service to add a relayed candidate. A very reliable solution for NAT Traversal.  The resolver verify is the XMPP Server that the client is connected offer this service. If the server supports, a candidate is requested from the service. The resolver adds this candidate
org.jivesoftware.smackx.jingleold.nat.BridgedResolver.BridgedResolver	(	XMPPConnection	): Constructor. A Bridged Resolver need an XMPPConnection to connect to a RTP Bridge.
org.jivesoftware.smackx.jingleold.nat.BridgedResolver.resolve	(	JingleSession	): Resolve Bridged Candidate.  The BridgedResolver takes the IP addresse and ports of a jmf proxy service.
org.jivesoftware.smackx.jingleold.nat.BridgedTransportManager: A Jingle Transport Manager implementation to be used for NAT Networks. This kind of transport needs that the connected XMPP Server provide a Bridge Service. (http://www.jivesoftware.com/protocol/rtpbridge) To relay the jmf outside the NAT.
org.jivesoftware.smackx.jingleold.nat.BridgedTransportManager.createResolver	(	JingleSession	): Return the correspondent resolver
org.jivesoftware.smackx.jingleold.nat.DatagramListener: Listener for datagram packets received.
org.jivesoftware.smackx.jingleold.nat.DatagramListener.datagramReceived	(	DatagramPacket	): Called when a datagram is received. If the method returns false, the stanza(/packet) MUST NOT be resent from the received Channel.
org.jivesoftware.smackx.jingleold.nat.FixedResolver: The FixedResolver is a resolver where the external address and port are previously known when the object is initialized.
org.jivesoftware.smackx.jingleold.nat.FixedResolver.FixedResolver	(	String	int	): Constructor.
org.jivesoftware.smackx.jingleold.nat.FixedResolver.initialize	(	): Initialize the resolver.
org.jivesoftware.smackx.jingleold.nat.FixedResolver.resolve	(	JingleSession	): Resolve the IP address.
org.jivesoftware.smackx.jingleold.nat.FixedResolver.setFixedCandidate	(	String	int	): Create a basic resolver, where we provide the IP and port.
org.jivesoftware.smackx.jingleold.nat.FixedTransportManager: A Fixed Jingle Transport Manager implementation.
org.jivesoftware.smackx.jingleold.nat.HttpServer: A very Simple HTTP Server.
org.jivesoftware.smackx.jingleold.nat.ICECandidate: ICE Transport candidate.  A candidate represents the possible transport for data interchange between the two endpoints.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.ICECandidate	(	String	int	int	String	int	String	int	Type	): Constructor with the basic elements of a transport definition.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.check	(	List	): Check if a transport candidate is usable. The transport resolver should check if the transport candidate the other endpoint has provided is usable.  ICE Candidate can check connectivity using UDP echo Test.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.compareTo	(	ICECandidate	): Compare the to other Transport candidate.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.getChannel	(	): Get the channel.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.getId	(	): Get the ID.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.getNetwork	(	): Get the network interface used for this connection.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.getPreference	(	): Get the preference number for this transportElement.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.getProto	(	): Get the protocol used for the transmission.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.getType	(	): Get the Candidate Type.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.getUsername	(	): Get the username for this transportElement in ICE.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.setChannel	(	Channel	): Set the channel for this transportElement.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.setId	(	String	): Set the ID.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.setNetwork	(	int	): Set the interface for this connection.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.setPreference	(	int	): Set the preference order for this transportElement.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.setProto	(	Protocol	): Set the protocol for the transmission.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.setType	(	Type	): Set the Candidate Type.
org.jivesoftware.smackx.jingleold.nat.ICECandidate.setUsername	(	String	): Set the username for this transportElement in ICE.
org.jivesoftware.smackx.jingleold.nat.ICEResolver: ICE Resolver for Jingle transport method that results in sending data between two entities using the Interactive Connectivity Establishment (ICE) methodology. (XEP-0176) The goal of this resolver is to make possible to establish and manage out-of-band connections between two XMPP entities, even if they are behind Network Address Translators (NATs) or firewalls. To use this resolver you must have a STUN Server and be in a non STUN blocked network. Or use an XMPP server with public IP detection Service.
org.jivesoftware.smackx.jingleold.nat.ICEResolver.resolve	(	JingleSession	): Resolve the IP and obtain a valid transport method.
org.jivesoftware.smackx.jingleold.nat.JingleTransportManager: Transport manager for Jingle. This class makes easier the use of transport resolvers by presenting a simple interface for algorithm selection. The transport manager also keeps the match between the resolution method and the <transport> element present in Jingle packets. As Jingle have many transport methods (official and unofficial methods), this abstract class helps us to extends the transport support of the API. This class must be used with a JingleManager instance in the following way: JingleManager jingleManager = new JingleManager(xmppConnection, new BasicTransportManager());
org.jivesoftware.smackx.jingleold.nat.JingleTransportManager.JingleTransportManager	(	): Deafult contructor.
org.jivesoftware.smackx.jingleold.nat.JingleTransportManager.createResolver	(	JingleSession	): Create a Transport Resolver instance according to the implementation.
org.jivesoftware.smackx.jingleold.nat.JingleTransportManager.getResolver	(	JingleSession	): Get a new Transport Resolver to be used in a Jingle Session.
org.jivesoftware.smackx.jingleold.nat.RTPBridge: RTPBridge IQ Stanza(/Packet) used to request and retrieve a RTPBridge Candidates that can be used for a Jingle Media Transmission between two parties that are behind NAT. This Jingle Bridge has all the needed information to establish a full UDP Channel (Send and Receive) between two parties. This transport method should be used only if other transport methods are not allowed. Or if you want a more reliable transport.  High Level Usage Example:  RTPBridge rtpBridge = RTPBridge.getRTPBridge(connection, sessionID);
org.jivesoftware.smackx.jingleold.nat.RTPBridge.Provider: IQProvider for RTP Bridge packets. Parse receive RTPBridge stanza(/packet) to a RTPBridge instance
org.jivesoftware.smackx.jingleold.nat.RTPBridge.RTPBridge	(	): Creates a RTPBridge Stanza(/Packet) without Session ID.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.RTPBridge	(	BridgeAction	): Creates a RTPBridge Instance with defined Session ID.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.RTPBridge	(	String	): Creates a RTPBridge Instance with defined Session ID.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.RTPBridge	(	String	BridgeAction	): Creates a RTPBridge Instance with defined Session ID.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getAttributes	(	): Get the attributes string.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getHostA	(	): Get the Host A IP Address.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getHostB	(	): Get the Host B IP Address.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getIQChildElementBuilder	(	IQChildElementXmlStringBuilder	): Get the Child Element XML of the Packet
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getIp	(	): Get the RTP Bridge IP.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getName	(	): Get the name of the Candidate.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getPass	(	): Get the RTP Agent Pass.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getPortA	(	): Get Side A receive port.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getPortB	(	): Get Side B receive port.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getPublicIP	(	XMPPConnection	): Get Public Address from the Server.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getRTPBridge	(	XMPPConnection	String	): Get a new RTPBridge Candidate from the server. If a error occurs or the server don't support RTPBridge Service, null is returned.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.getSid	(	): Get the Session ID of the Stanza(/Packet) (usually same as Jingle Session ID).
org.jivesoftware.smackx.jingleold.nat.RTPBridge.relaySession	(	XMPPConnection	String	String	TransportCandidate	TransportCandidate	): Check if the server support RTPBridge Service.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.serviceAvailable	(	XMPPConnection	): Check if the server support RTPBridge Service.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.setHostA	(	String	): Set the Host A IP Address.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.setHostB	(	String	): Set the Host B IP Address.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.setIp	(	String	): Set the RTP Bridge IP.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.setName	(	String	): Set the name of the Candidate.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.setPass	(	String	): Set the RTP Agent Pass.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.setPortA	(	int	): Set Side A receive port.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.setPortB	(	int	): Set Side B receive port.
org.jivesoftware.smackx.jingleold.nat.RTPBridge.setSid	(	String	): Set the Session ID of the Stanza(/Packet) (usually same as Jingle Session ID).
org.jivesoftware.smackx.jingleold.nat.ResultListener: Listener for ECHO Test Results.
org.jivesoftware.smackx.jingleold.nat.STUN: STUN IQ Stanza(/Packet) used to request and retrieve a STUN server and port to make p2p connections easier. STUN is usually used by Jingle Media Transmission between two parties that are behind NAT.  High Level Usage Example:  STUN stun = STUN.getSTUNServer(connection);
org.jivesoftware.smackx.jingleold.nat.STUN.Provider: IQProvider for RTP Bridge packets. Parse receive RTPBridge stanza(/packet) to a RTPBridge instance
org.jivesoftware.smackx.jingleold.nat.STUN.STUN	(	): Creates a STUN IQ.
org.jivesoftware.smackx.jingleold.nat.STUN.StunServerAddress: Provides easy abstract to store STUN Server Addresses and Ports.
org.jivesoftware.smackx.jingleold.nat.STUN.StunServerAddress.getPort	(	): Get the Server Port.
org.jivesoftware.smackx.jingleold.nat.STUN.StunServerAddress.getServer	(	): Get the Host Address.
org.jivesoftware.smackx.jingleold.nat.STUN.getPublicIp	(	): Get Public Ip returned from the XMPP server.
org.jivesoftware.smackx.jingleold.nat.STUN.getSTUNServer	(	XMPPConnection	): Get a new STUN Server Address and port from the server. If a error occurs or the server don't support STUN Service, null is returned.
org.jivesoftware.smackx.jingleold.nat.STUN.getServers	(	): Get a list of STUN Servers recommended by the Server.
org.jivesoftware.smackx.jingleold.nat.STUN.serviceAvailable	(	XMPPConnection	): Check if the server support STUN Service.
org.jivesoftware.smackx.jingleold.nat.STUN.setPublicIp	(	String	): Set Public Ip returned from the XMPP server
org.jivesoftware.smackx.jingleold.nat.STUNResolver: Transport resolver using the JSTUN library, to discover public IP and use it as a candidate. The goal of this resolver is to take possible to establish and manage out-of-band connections between two XMPP entities, even if they are behind Network Address Translators (NATs) or firewalls.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNResolver	(	): Constructor with default STUN server.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNResolver	(	int	): Constructor with a default port.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService: STUN service definition.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService.STUNService	(	): Default constructor, without name and port.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService.STUNService	(	String	int	): Basic constructor, with the hostname and port
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService.checkBinding	(	): Check a binding with the STUN currentServer.  Note: this function blocks for some time, waiting for a response.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService.getHostname	(	): Get the host name of the STUN service.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService.getPort	(	): Get the port of the STUN service
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService.isNull	(	): Basic format test: the service is not null.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService.setHostname	(	String	): Set the hostname of the STUN service.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.STUNService.setPort	(	int	): Set the port number for the STUN service.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.bestSTUNServer	(	ArrayList	): Get the best usable STUN server from a list.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.cancel	(	): Cancel any operation.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.clear	(	): Clear the list of candidates and start the resolution again.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.getCurrentServerName	(	): Get the name of the current STUN server.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.getCurrentServerPort	(	): Get the port of the current STUN server.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.initialize	(	): Initialize the resolver.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.isResolving	(	): Return true if the service is working.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.loadSTUNServers	(	): Load a list of services: STUN servers and ports. Some public STUN servers are:   iphone-stun.freenet.de:3478 larry.gloo.net:3478 stun.xten.net:3478 stun.fwdnet.net stun.fwd.org (no DNS SRV record) stun01.sipphone.com (no DNS SRV record) stun.softjoys.com (no DNS SRV record) stun.voipbuster.com (no DNS SRV record) stun.voxgratia.org (no DNS SRV record) stun.noc.ams-ix.net   This list should be contained in a file in the "META-INF" directory
org.jivesoftware.smackx.jingleold.nat.STUNResolver.loadSTUNServers	(	java.io.InputStream	): Load the STUN configuration from a stream.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.resolve	(	JingleSession	): Resolve the IP and obtain a valid transport method.
org.jivesoftware.smackx.jingleold.nat.STUNResolver.setSTUNService	(	String	int	): Set the STUN server name and port.
org.jivesoftware.smackx.jingleold.nat.STUNTransportManager: A Jingle Transport Manager implementation to be used on NAT networks with STUN Service NOT Blocked.
org.jivesoftware.smackx.jingleold.nat.TcpUdpBridgeClient: A Simple and Experimental Bridge. It Creates a TCP Socket That Connects to another TCP Socket Listener and forwards every packets received to an UDP Listener. And forwards every packets received in UDP Socket, to the TCP Server
org.jivesoftware.smackx.jingleold.nat.TcpUdpBridgeServer: A Simple and Experimental Bridge. It Creates a TCP Socket Listeners for Connections and forwards every packets received to an UDP Listener. And forwards every packets received in UDP Socket, to the TCP Client
org.jivesoftware.smackx.jingleold.nat.TestResult: Result of an ECHO Test.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate: Transport candidate.  A candidate represents the possible transport for data interchange between the two endpoints.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Channel: Type-safe enum for the transportElement channel.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Channel.fromString	(	String	): Returns the MediaChannel constant associated with the String value.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Channel.isNull	(	): Return true if the channel is not valid.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Fixed: Fixed transport candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Fixed.Fixed	(	String	int	): Constructor with IP address and port.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Fixed.Fixed	(	String	int	int	): Constructor with IP address and port.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Protocol: Type-safe enum for the transportElement protocol.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Protocol.fromString	(	String	): Returns the Protocol constant associated with the String value.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.Protocol.isNull	(	): Return true if the protocol is not valid.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.TransportCandidate	(	): Empty constructor.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.TransportCandidate	(	String	int	): Constructor with IP address and port.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.TransportCandidate	(	String	int	int	): Constructor with IP address and port.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.addListener	(	TransportResolverListener.Checker	): Add a transport resolver listener.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.check	(	List	): Check if a transport candidate is usable. The transport resolver should check if the transport candidate the other endpoint has provided is usable.  Subclasses should provide better methods if they can...
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getConnection	(	): Get the XMPPConnection use to send or receive this candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getGeneration	(	): Get the generation for a transportElement definition.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getListenersList	(	): Get the list of listeners.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getLocalIp	(	): Get local IP to bind to this candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getName	(	): Get the name used for identifying this transportElement method (optional).
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getPassword	(	): Get the password used by ICE or relayed candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getPort	(	): Get the port, or 0 for any port.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getSessionId	(	): Get the jingle's sessionId that is using this candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.getSymmetric	(	): Get the symmetric candidate for this candidate if it exists.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.isNull	(	): Return true if the candidate is not valid.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setConnection	(	XMPPConnection	): Set the XMPPConnection use to send or receive this candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setGeneration	(	int	): Set the generation for a transportElement definition.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setIp	(	String	): Set the IP address.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setLocalIp	(	String	): Set local IP to bind to this candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setName	(	String	): Set a name for identifying this transportElement.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setPassword	(	String	): Set the password used by ICE or relayed candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setPort	(	int	): Set the port, using 0 for any port.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setSessionId	(	String	): Set the jingle's sessionId that is using this candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.setSymmetric	(	TransportCandidate	): Set the symetric candidate for this candidate.
org.jivesoftware.smackx.jingleold.nat.TransportCandidate.triggerCandidateChecked	(	boolean	): Trigger a new candidate checked event.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator: Transport negotiator.   This class is responsible for managing the transport negotiation process, handling all the stanza(/packet) interchange and the stage control.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.Ice: Ice transport negotiator.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.Ice.Ice	(	JingleSession	TransportResolver	ContentNegotiator	): Default constructor, with a JingleSession and transport manager.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.Ice.acceptableTransportCandidate	(	TransportCandidate	List	): Return true for ICE candidates.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.Ice.getBestRemoteCandidate	(	): Obtain the best remote candidate obtained in the negotiation so far.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.Ice.getJingleTransport	(	TransportCandidate	): Get a TransportNegotiator instance.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.RawUdp: Raw-UDP transport negotiator.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.RawUdp.RawUdp	(	JingleSession	TransportResolver	ContentNegotiator	): Default constructor, with a JingleSession and transport manager.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.RawUdp.acceptableTransportCandidate	(	TransportCandidate	List	): Return true for fixed candidates.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.RawUdp.getBestRemoteCandidate	(	): Obtain the best common transport candidate obtained in the negotiation.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.RawUdp.getJingleTransport	(	TransportCandidate	): Get a TransportNegotiator instance.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.TransportNegotiator	(	JingleSession	TransportResolver	ContentNegotiator	): Default constructor.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.acceptableTransportCandidate	(	TransportCandidate	List	): Return true if the transport candidate is acceptable for the current negotiator.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.addOfferedCandidate	(	TransportCandidate	): Add a offered candidate to the list.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.addRemoteCandidate	(	TransportCandidate	): Add a remote candidate to the list. The candidate will be checked in order to verify if it is usable.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.addRemoteCandidates	(	List	): Add an offered remote candidate. The transport candidate can be unusable: we must check if we can use it.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.addValidRemoteCandidate	(	TransportCandidate	): Add a valid remote candidate to the list. The remote candidate has been checked, and the remote
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.checkRemoteCandidate	(	TransportCandidate	): Check asynchronously the new transport candidate.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.close	(	): Called from above to session-terminate.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.delayedCheckBestCandidate	(	JingleSession	Jingle	): Launch a thread that checks, after some time, if any of the candidates offered by the other endpoint is usable. The thread does not check the candidates: it just checks if we have got a valid one and sends an Accept in that case.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.dispatchIncomingPacket	(	IQ	String	): Dispatch an incoming packet. The method is responsible for recognizing the stanza(/packet) type and, depending on the current state, deliverying the stanza(/packet) to the right event handler and wait for a response.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.doStart	(	): Called from above to start the negotiator during a session-initiate.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.getAcceptedLocalCandidate	(	): Get the best accepted local candidate we have offered.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.getBestLocalCandidate	(	): Obtain the best local candidate we want to offer.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.getBestRemoteCandidate	(	): Obtain the best common transport candidate obtained in the negotiation.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.getJingleTransport	(	): Return a JingleTransport that best reflects this transport negotiator.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.getJingleTransport	(	TransportCandidate	): Get a new instance of the right TransportNegotiator class with this candidate.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.getRemoteCandidates	(	): Get the list of remote candidates.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.getValidRemoteCandidates	(	): Get an iterator for the list of valid (ie, checked) remote candidates.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.getValidRemoteCandidatesList	(	): Get the list of valid (ie, checked) remote candidates.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.isEstablished	(	): Return true if the transport is established.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.isFullyEstablished	(	): Return true if the transport is fully established.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.obtainCandidatesList	(	Jingle	): Parse the list of transport candidates from a Jingle packet.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.receiveContentAcceptAction	(	Jingle	): One of our transport candidates has been accepted.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.receiveResult	(	IQ	): The other endpoint has partially accepted our invitation: start offering a list of candidates.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.receiveSessionAcceptAction	(	Jingle	): 
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.receiveSessionInitiateAction	(	Jingle	): 
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.receiveTransportInfoAction	(	Jingle	): 
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.sendTransportCandidateOffer	(	TransportCandidate	): Send an offer for a transport candidate
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.sendTransportCandidatesOffer	(	): Create a Jingle stanza(/packet) where we announce our transport candidates.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.setAcceptedLocalCandidate	(	TransportCandidate	): Set the best local transport candidate we have offered and accepted by the other endpoint.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.triggerTransportClosed	(	TransportCandidate	): Trigger a Transport closed event.
org.jivesoftware.smackx.jingleold.nat.TransportNegotiator.triggerTransportEstablished	(	TransportCandidate	TransportCandidate	): Trigger a Transport session established event.
org.jivesoftware.smackx.jingleold.nat.TransportResolver: A TransportResolver is used for obtaining a list of valid transport candidates. A transport candidate is composed by an IP address and a port number. It is called candidate, because it can be elected or not.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.TransportResolver	(	): Default constructor.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.addCandidate	(	TransportCandidate	): Add a new transport candidate
org.jivesoftware.smackx.jingleold.nat.TransportResolver.addListener	(	TransportResolverListener	): Add a transport resolver listener.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.cancel	(	): Cancel any asynchronous resolution operation.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.clear	(	): Clear the list of candidates and start a new resolution process.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.clearCandidates	(	): Clear the list of candidate
org.jivesoftware.smackx.jingleold.nat.TransportResolver.getCandidate	(	int	): Get the n-th candidate.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.getCandidateCount	(	): Get the numer of transport candidates.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.getCandidates	(	): Get an iterator for the list of candidates.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.getCandidatesList	(	): Get the list of candidates.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.getFreePort	(	): Obtain a free port we can use.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.getListenersList	(	): Get the list of listeners.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.getPreferredCandidate	(	): Get the candididate with the highest preference.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.initialize	(	): Initialize the Resolver.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.initializeAndWait	(	): Initialize Transport Resolver and wait until it is complete unitialized.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.isInitialized	(	): Chack if the Transport Resolver is initialized.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.isResolved	(	): Return true if the resolver has finished the search for transport candidates.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.isResolving	(	): Return true if the resolver is working.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.removeListener	(	TransportResolverListener	): Removes a transport resolver listener.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.resolve	(	JingleSession	): Start a the resolution.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.setInitialized	(	): Set the Transport Resolver as initialized.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.setResolveEnd	(	): Indicate the end of the resolution process. This method must be used by subclasses at the begining of their resolve() method.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.setResolveInit	(	): Indicate the beggining of the resolution process. This method must be used by subclasses at the begining of their resolve() method.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.triggerCandidateAdded	(	TransportCandidate	): Trigger a new candidate added event.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.triggerResolveEnd	(	): Trigger a event notifying the obtention of all the candidates.
org.jivesoftware.smackx.jingleold.nat.TransportResolver.triggerResolveInit	(	): Trigger a event notifying the initialization of the resolution process.
org.jivesoftware.smackx.jingleold.nat.TransportResolverListener: Transport resolver Interface .
org.jivesoftware.smackx.jingleold.nat.TransportResolverListener.Checker: Resolver checker.
org.jivesoftware.smackx.jingleold.nat.TransportResolverListener.Checker.candidateChecked	(	TransportCandidate	boolean	): A transport candidate has been checked.
org.jivesoftware.smackx.jingleold.nat.TransportResolverListener.Checker.candidateChecking	(	TransportCandidate	): A transport candidate is being checked.
org.jivesoftware.smackx.jingleold.nat.TransportResolverListener.Resolver: Resolver listener.
org.jivesoftware.smackx.jingleold.nat.TransportResolverListener.Resolver.candidateAdded	(	TransportCandidate	): A transport candidate has been added.
org.jivesoftware.smackx.jingleold.nat.TransportResolverListener.Resolver.end	(	): All the transport candidates have been obtained.
org.jivesoftware.smackx.jingleold.nat.TransportResolverListener.Resolver.init	(	): The resolution process has been started.
org.jivesoftware.smackx.jingleold.packet.Jingle: An Jingle sub-packet, which is used by XMPP clients to exchange info like descriptions and transports.  The following link summarizes the requirements of Jingle IM: Valid tags.   Warning: this is an non-standard protocol documented by XEP-166. Because this is a non-standard protocol, it is subject to change.
org.jivesoftware.smackx.jingleold.packet.Jingle.Jingle	(	): The default constructor.
org.jivesoftware.smackx.jingleold.packet.Jingle.Jingle	(	JingleActionEnum	): A constructor where the action can be specified.
org.jivesoftware.smackx.jingleold.packet.Jingle.Jingle	(	JingleContent	): Constructor with a contents.
org.jivesoftware.smackx.jingleold.packet.Jingle.Jingle	(	JingleContentInfo	): Constructor with a content info.
org.jivesoftware.smackx.jingleold.packet.Jingle.Jingle	(	List	JingleContentInfo	String	): A constructor where the main components can be initialized.
org.jivesoftware.smackx.jingleold.packet.Jingle.Jingle	(	String	): A constructor where the session ID can be specified.
org.jivesoftware.smackx.jingleold.packet.Jingle.addContent	(	JingleContent	): Add a new content.
org.jivesoftware.smackx.jingleold.packet.Jingle.addContents	(	List	): Add a list of JingleContent elements.
org.jivesoftware.smackx.jingleold.packet.Jingle.getAction	(	): Get the action specified in the packet.
org.jivesoftware.smackx.jingleold.packet.Jingle.getContentInfo	(	): Jingle content info.
org.jivesoftware.smackx.jingleold.packet.Jingle.getContents	(	): Get an iterator for the contents.
org.jivesoftware.smackx.jingleold.packet.Jingle.getContentsList	(	): Get an iterator for the content.
org.jivesoftware.smackx.jingleold.packet.Jingle.getElementName	(	): Returns the XML element name of the extension sub-packet root element. Always returns "jingle"
org.jivesoftware.smackx.jingleold.packet.Jingle.getIQChildElementBuilder	(	IQChildElementXmlStringBuilder	): Return the XML representation of the packet.
org.jivesoftware.smackx.jingleold.packet.Jingle.getInitiator	(	): Get the initiator. The initiator will be the full JID of the entity that has initiated the flow (which may be different to the "from" address in the IQ)
org.jivesoftware.smackx.jingleold.packet.Jingle.getNamespace	(	): Returns the XML namespace of the extension sub-packet root element.
org.jivesoftware.smackx.jingleold.packet.Jingle.getResponder	(	): Get the responder. The responder is the full JID of the entity that has replied to the initiation (which may be different to the "to" addresss in the IQ).
org.jivesoftware.smackx.jingleold.packet.Jingle.getSessionHash	(	String	Jid	): Get a hash key for the session this stanza(/packet) belongs to.
org.jivesoftware.smackx.jingleold.packet.Jingle.getSid	(	): Returns the session ID related to the session. The session ID is a unique identifier generated by the initiator. This should match the XML Nmtoken production so that XML character escaping is not needed for characters such as &.
org.jivesoftware.smackx.jingleold.packet.Jingle.setAction	(	JingleActionEnum	): Set the action in the packet.
org.jivesoftware.smackx.jingleold.packet.Jingle.setContentInfo	(	JingleContentInfo	): Set content info.
org.jivesoftware.smackx.jingleold.packet.Jingle.setInitiator	(	Jid	): Set the initiator. The initiator must be the full JID of the entity that has initiated the flow (which may be different to the "from" address in the IQ)
org.jivesoftware.smackx.jingleold.packet.Jingle.setResponder	(	Jid	): Set the responder. The responder must be the full JID of the entity that has replied to the initiation (which may be different to the "to" addresss in the IQ).
org.jivesoftware.smackx.jingleold.packet.Jingle.setSid	(	String	): Set the session ID related to this session. The session ID is a unique identifier generated by the initiator. This should match the XML Nmtoken production so that XML character escaping is not needed for characters such as &.
org.jivesoftware.smackx.jingleold.packet.JingleContent: Jingle content.
org.jivesoftware.smackx.jingleold.packet.JingleContent.JingleContent	(	String	String	): Creates a content description..
org.jivesoftware.smackx.jingleold.packet.JingleContent.addJingleTransport	(	JingleTransport	): Adds a JingleTransport type to the packet.
org.jivesoftware.smackx.jingleold.packet.JingleContent.addTransports	(	List	): Adds a list of transports to add to the packet.
org.jivesoftware.smackx.jingleold.packet.JingleContent.getDescription	(	): Gets the description for this Jingle content.
org.jivesoftware.smackx.jingleold.packet.JingleContent.getElementName	(	): Returns the XML element name of the element.
org.jivesoftware.smackx.jingleold.packet.JingleContent.getJingleTransports	(	): Returns an Iterator for the JingleTransports in the packet.
org.jivesoftware.smackx.jingleold.packet.JingleContent.getJingleTransportsCount	(	): Returns a count of the JingleTransports in the Jingle packet.
org.jivesoftware.smackx.jingleold.packet.JingleContent.getJingleTransportsList	(	): Returns a list for the JingleTransports in the packet.
org.jivesoftware.smackx.jingleold.packet.JingleContent.getNamespace	(	): Return the namespace.
org.jivesoftware.smackx.jingleold.packet.JingleContent.setDescription	(	JingleDescription	): Sets the description for this Jingle content.
org.jivesoftware.smackx.jingleold.packet.JingleContent.toXML	(	): Convert a Jingle description to XML.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription: Jingle content description.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.Audio: Jingle audio description.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.Audio.Audio	(	JinglePayloadType	): Utility constructor, with a JinglePayloadType.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.JingleContentDescription	(	): Creates a content description..
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.JinglePayloadType: A payload type, contained in a descriptor.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.JinglePayloadType.Audio: Audio payload type element.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.JinglePayloadType.JinglePayloadType	(	): Create an empty payload type.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.JinglePayloadType.JinglePayloadType	(	PayloadType	): Create a payload type.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.JinglePayloadType.getElementName	(	): Returns the XML element name of the element.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.JinglePayloadType.getPayloadType	(	): Get the payload represented.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.JinglePayloadType.setPayload	(	PayloadType	): Set the payload represented.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.addAudioPayloadTypes	(	List	): Adds a list of payloads to the packet.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.addJinglePayloadType	(	JinglePayloadType	): Adds a audio payload type to the packet.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.getAudioPayloadTypesList	(	): Return the list of Payload types contained in the description.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.getElementName	(	): Returns the XML element name of the element.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.getJinglePayloadTypes	(	): Returns an Iterator for the audio payloads in the packet.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.getJinglePayloadTypesCount	(	): Returns a count of the audio payloads in the Jingle packet.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.getJinglePayloadTypesList	(	): Returns a list for the audio payloads in the packet.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.getNamespace	(	): Return the namespace.
org.jivesoftware.smackx.jingleold.packet.JingleContentDescription.toXML	(	): Convert a Jingle description to XML.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo: Jingle content info.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.Audio: Transport part of a Jingle packet.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.Audio.Busy: Busy jmf info.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.Audio.Hold: Hold jmf info.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.Audio.Mute: Mute jmf info.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.Audio.Queued: Queued jmf info.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.Audio.Ringing: Ringing jmf info.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.JingleContentInfo	(	): Empty constructor, with no jmf info.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.JingleContentInfo	(	ContentInfo	): Constructor with a jmf info.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.getElementName	(	): Get the element name.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.getMediaInfo	(	): Get the jmf info element.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.getNamespace	(	): Get the publilc namespace.
org.jivesoftware.smackx.jingleold.packet.JingleContentInfo.setNamespace	(	String	): Set the name space.
org.jivesoftware.smackx.jingleold.packet.JingleDescription: Jingle content description.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.Audio: Jingle audio description.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.Audio.Audio	(	PayloadType	): Utility constructor, with a PayloadType.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.JingleDescription	(	): Creates a content description..
org.jivesoftware.smackx.jingleold.packet.JingleDescription.addAudioPayloadTypes	(	List	): Adds a list of payloads to the packet.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.addPayloadType	(	PayloadType	): Adds a audio payload type to the packet.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.getAudioPayloadTypesList	(	): Return the list of Payload types contained in the description.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.getElementName	(	): Returns the XML element name of the element.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.getNamespace	(	): Return the namespace.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.getPayloadTypes	(	): Returns an Iterator for the audio payloads in the packet.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.getPayloadTypesCount	(	): Returns a count of the audio payloads in the Jingle packet.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.getPayloadTypesList	(	): Returns a list for the audio payloads in the packet.
org.jivesoftware.smackx.jingleold.packet.JingleDescription.toXML	(	): Convert a Jingle description to XML.
org.jivesoftware.smackx.jingleold.packet.JingleError.JingleError	(	String	): Creates a new error with the specified code and message.
org.jivesoftware.smackx.jingleold.packet.JingleError.Provider.Provider	(	): Empty constructor.
org.jivesoftware.smackx.jingleold.packet.JingleError.Provider.parse	(	XmlPullParser	int	): Parse a JingleDescription.Audio extension.
org.jivesoftware.smackx.jingleold.packet.JingleError.fromString	(	String	): Returns a Action instance associated with the String value.
org.jivesoftware.smackx.jingleold.packet.JingleError.getMessage	(	): Returns the message describing the error, or null if there is no message.
org.jivesoftware.smackx.jingleold.packet.JingleError.toXML	(	): Returns the error as XML.
org.jivesoftware.smackx.jingleold.packet.JingleTransport: A jingle transport extension.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.Ice: RTP-ICE profile.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.Ice.Candidate.Candidate	(	): Default constructor.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.Ice.Candidate.Candidate	(	TransportCandidate	): Constructor with a transport candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.Ice.Candidate.getChildElements	(	): Get the elements of this candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.Ice.addCandidate	(	JingleTransportCandidate	): Add a transport candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.Ice.getCandidatesList	(	): Get the list of candidates. As a "raw-udp" transport can only contain one candidate, we use the first in the list...
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransport	(	): Default constructor.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransport	(	JingleTransport	): Copy constructor.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransport	(	JingleTransportCandidate	): Utility constructor, with a transport candidate element.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransportCandidate: Candidate element in the transport. This class acts as a view of the "TransportCandidate" in the Jingle space.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransportCandidate.JingleTransportCandidate	(	): Creates a new TransportNegotiator child.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransportCandidate.JingleTransportCandidate	(	TransportCandidate	): Creates a new TransportNegotiator child.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransportCandidate.getChildElements	(	): Get the list of attributes.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransportCandidate.getElementName	(	): Returns the XML element name of the element.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransportCandidate.getMediaTransport	(	): Get the current transportElement candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransportCandidate.setMediaTransport	(	TransportCandidate	): Set the transportElement candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.JingleTransportCandidate.toXML	(	): Obtain a valid XML representation of a trancport candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.RawUdp: Raw UDP profile.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.RawUdp.Candidate: Raw-udp transport candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.RawUdp.Candidate.Candidate	(	): Default constructor.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.RawUdp.Candidate.Candidate	(	TransportCandidate	): Constructor with a transport candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.RawUdp.Candidate.getChildElements	(	): Get the elements of this candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.RawUdp.addCandidate	(	JingleTransportCandidate	): Add a transport candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.RawUdp.getCandidatesList	(	): Get the list of candidates. As a "raw-udp" transport can only contain one candidate, we use the first in the list...
org.jivesoftware.smackx.jingleold.packet.JingleTransport.addCandidate	(	JingleTransportCandidate	): Adds a transport candidate.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.getCandidates	(	): Get an iterator for the candidates.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.getCandidatesCount	(	): Get the number of transport candidates.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.getCandidatesList	(	): Get the list of candidates.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.getElementName	(	): Returns the XML element name of the element.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.getNamespace	(	): Get the namespace.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.setNamespace	(	String	): Set the namespace.
org.jivesoftware.smackx.jingleold.packet.JingleTransport.toXML	(	): Return the XML representation for this element.
org.jivesoftware.smackx.jingleold.provider.JingleContentDescriptionProvider: Parser for a Jingle description.
org.jivesoftware.smackx.jingleold.provider.JingleContentDescriptionProvider.Audio: Jingle audio.
org.jivesoftware.smackx.jingleold.provider.JingleContentDescriptionProvider.Audio.getInstance	(	): Get a new instance of this object.
org.jivesoftware.smackx.jingleold.provider.JingleContentDescriptionProvider.Audio.parsePayload	(	XmlPullParser	): Parse an audio payload type.
org.jivesoftware.smackx.jingleold.provider.JingleContentDescriptionProvider.getInstance	(	): Return a new instance of this class. Subclasses must overwrite this method.
org.jivesoftware.smackx.jingleold.provider.JingleContentDescriptionProvider.parse	(	XmlPullParser	int	): Parse a iq/jingle/description element.
org.jivesoftware.smackx.jingleold.provider.JingleContentDescriptionProvider.parsePayload	(	XmlPullParser	): Parse a iq/jingle/description/payload-type element.
org.jivesoftware.smackx.jingleold.provider.JingleContentInfoProvider: Jingle Audio jmf-info provider.
org.jivesoftware.smackx.jingleold.provider.JingleContentInfoProvider.Audio: JingleDescription.Audio info provider.
org.jivesoftware.smackx.jingleold.provider.JingleContentInfoProvider.Audio.Audio	(	): Empty constructor.
org.jivesoftware.smackx.jingleold.provider.JingleContentInfoProvider.Audio.Audio	(	ExtensionElement	): Constructor with an audio info.
org.jivesoftware.smackx.jingleold.provider.JingleContentInfoProvider.Audio.parse	(	XmlPullParser	int	): Parse a JingleDescription.Audio extension.
org.jivesoftware.smackx.jingleold.provider.JingleContentProvider: Jingle  provider.
org.jivesoftware.smackx.jingleold.provider.JingleContentProvider.parse	(	XmlPullParser	int	): Parse a JingleContent extension.
org.jivesoftware.smackx.jingleold.provider.JingleDescriptionProvider: Parser for a Jingle description.
org.jivesoftware.smackx.jingleold.provider.JingleDescriptionProvider.Audio: Jingle audio.
org.jivesoftware.smackx.jingleold.provider.JingleDescriptionProvider.Audio.getInstance	(	): Get a new instance of this object.
org.jivesoftware.smackx.jingleold.provider.JingleDescriptionProvider.Audio.parsePayload	(	XmlPullParser	): Parse an audio payload type.
org.jivesoftware.smackx.jingleold.provider.JingleDescriptionProvider.getInstance	(	): Return a new instance of this class. Subclasses must overwrite this method.
org.jivesoftware.smackx.jingleold.provider.JingleDescriptionProvider.parse	(	XmlPullParser	int	): Parse a iq/jingle/description element.
org.jivesoftware.smackx.jingleold.provider.JingleDescriptionProvider.parsePayload	(	XmlPullParser	): Parse a iq/jingle/description/payload-type element.
org.jivesoftware.smackx.jingleold.provider.JingleProvider: The JingleProvider parses Jingle packets.
org.jivesoftware.smackx.jingleold.provider.JingleProvider.parse	(	XmlPullParser	int	): Parse a iq/jingle element.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider: Provider for a Jingle transport element.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.Ice: RTP-ICE profile.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.Ice.Ice	(	): Defauls constructor.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.Ice.getInstance	(	): Obtain the corresponding TransportNegotiator.Ice instance.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.Ice.parseCandidate	(	XmlPullParser	): Parse a iq/jingle/transport/candidate element.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.RawUdp: Raw UDP profile.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.RawUdp.RawUdp	(	): Defauls constructor.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.RawUdp.getInstance	(	): Obtain the corresponding TransportNegotiator.RawUdp instance.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.RawUdp.parseCandidate	(	XmlPullParser	): Parse a iq/jingle/transport/candidate element.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.getInstance	(	): Obtain the corresponding TransportNegotiator instance.
org.jivesoftware.smackx.jingleold.provider.JingleTransportProvider.parse	(	XmlPullParser	int	): Parse a iq/jingle/transport element.
org.jivesoftware.smackx.jiveproperties.JivePropertiesManager.addProperty	(	Stanza	String	Object	): Convenience method to add a property to a packet.
org.jivesoftware.smackx.jiveproperties.JivePropertiesManager.getProperties	(	Stanza	): Return a map of all properties of the given packet. If the stanza(/packet) contains no properties extension, an empty map will be returned.
org.jivesoftware.smackx.jiveproperties.JivePropertiesManager.getPropertiesNames	(	Stanza	): Return a collection of the names of all properties of the given packet. If the packet contains no properties extension, then an empty collection will be returned.
org.jivesoftware.smackx.jiveproperties.JivePropertiesManager.getProperty	(	Stanza	String	): Convenience method to get a property from a packet. Will return null if the stanza(/packet) contains not property with the given name.
org.jivesoftware.smackx.jiveproperties.JivePropertiesManager.setJavaObjectEnabled	(	boolean	): Enables deserialization of Java objects embedded in the 'properties' stanza(/packet) extension. Since this is a security sensitive feature, it is disabled per default in Smack. Only enable it if you are sure that you understand the potential security implications it can cause.  See also:   "What is the security impact of deserializing untrusted data in Java?" on Stackoverflow 
org.jivesoftware.smackx.jiveproperties.packet.JivePropertiesExtension: Properties provide an easy mechanism for clients to share data. Each property has a String name, and a value that is a Java primitive (int, long, float, double, boolean) or any Serializable object (a Java object is Serializable when it implements the Serializable interface).
org.jivesoftware.smackx.jiveproperties.packet.JivePropertiesExtension.deleteProperty	(	String	): Deletes a property.
org.jivesoftware.smackx.jiveproperties.packet.JivePropertiesExtension.from	(	Message	): Return a Jive properties extensions of the given message.
org.jivesoftware.smackx.jiveproperties.packet.JivePropertiesExtension.getProperties	(	): Returns an unmodifiable map of all properties.
org.jivesoftware.smackx.jiveproperties.packet.JivePropertiesExtension.getProperty	(	String	): Returns the stanza(/packet) property with the specified name or null if the property doesn't exist. Property values that were originally primitives will be returned as their object equivalent. For example, an int property will be returned as an Integer, a double as a Double, etc.
org.jivesoftware.smackx.jiveproperties.packet.JivePropertiesExtension.getPropertyNames	(	): Returns an unmodifiable collection of all the property names that are set.
org.jivesoftware.smackx.jiveproperties.packet.JivePropertiesExtension.setProperty	(	String	Object	): Sets a property with an Object as the value. The value must be Serializable or an IllegalArgumentException will be thrown.
org.jivesoftware.smackx.jiveproperties.provider.JivePropertiesExtensionProvider.parse	(	XmlPullParser	int	): Parse a properties sub-packet. If any errors occur while de-serializing Java object properties, an exception will be printed and not thrown since a thrown exception will shut down the entire connection. ClassCastExceptions will occur when both the sender and receiver of the stanza(/packet) don't have identical versions of the same class.  Note that you have to explicitly enabled Java object deserialization with @{link setJavaObjectEnabled()
org.jivesoftware.smackx.json.packet.JsonPacketExtension: XMPP JSON Containers as defined in XEP-0335.
org.jivesoftware.smackx.json.packet.JsonPacketExtension.from	(	Stanza	): Retrieve the JSON stanza(/packet) extension from the packet.
org.jivesoftware.smackx.mam.MamManager: A Manager for Message Archive Management (XEP-0313).
org.jivesoftware.smackx.mam.MamManager.MamPrefsResult: MAM preferences result class.
org.jivesoftware.smackx.mam.MamManager.MamQueryResult: MAM query result class.
org.jivesoftware.smackx.mam.MamManager.getInstanceFor	(	XMPPConnection	): Get the singleton instance of MamManager.
org.jivesoftware.smackx.mam.MamManager.isSupportedByServer	(	): Returns true if Message Archive Management is supported by the server.
org.jivesoftware.smackx.mam.MamManager.mostRecentPage	(	Jid	int	): Obtain the most recent page of a chat.
org.jivesoftware.smackx.mam.MamManager.page	(	DataForm	RSMSet	): Returns a page of the archive.
org.jivesoftware.smackx.mam.MamManager.page	(	String	DataForm	RSMSet	): Returns a page of the archive.
org.jivesoftware.smackx.mam.MamManager.pageAfter	(	Jid	String	int	): Obtain page after the last message saved (specific chat).  Note that the messageUid is the XEP-0313 UID and not the stanza ID of the message. 
org.jivesoftware.smackx.mam.MamManager.pageBefore	(	Jid	String	int	): Obtain page before the first message saved (specific chat).  Note that the messageUid is the XEP-0313 UID and not the stanza ID of the message. 
org.jivesoftware.smackx.mam.MamManager.pageNext	(	MamQueryResult	int	): Returns the next page of the archive.
org.jivesoftware.smackx.mam.MamManager.pagePrevious	(	MamQueryResult	int	): Returns the previous page of the archive.
org.jivesoftware.smackx.mam.MamManager.queryArchive	(	Date	Date	): Query archive filtering by start and/or end date. If start == null, the value of 'start' will be equal to the date/time of the earliest message stored in the archive. If end == null, the value of 'end' will be equal to the date/time of the most recent message stored in the archive.
org.jivesoftware.smackx.mam.MamManager.queryArchive	(	Integer	): Query archive with a maximum amount of results.
org.jivesoftware.smackx.mam.MamManager.queryArchive	(	Integer	Date	Date	Jid	List	): Query archive applying filters: max count, start date, end date, from/to JID and with additional fields.
org.jivesoftware.smackx.mam.MamManager.queryArchive	(	Jid	): Query archive with a JID (only messages from/to the JID).
org.jivesoftware.smackx.mam.MamManager.queryArchive	(	List	): Query Archive adding filters with additional fields.
org.jivesoftware.smackx.mam.MamManager.queryArchive	(	String	Integer	Date	Date	Jid	List	): Query an message archive like a MUC archive or a pubsub node archive, addressed by an archiveAddress, applying filters: max count, start date, end date, from/to JID and with additional fields. When archiveAddress is null the default, the server will be requested.
org.jivesoftware.smackx.mam.MamManager.queryArchiveWithEndDate	(	Date	): Query archive filtering by end date. The value of 'start' will be equal to the date/time of the earliest message stored in the archive.
org.jivesoftware.smackx.mam.MamManager.queryArchiveWithStartDate	(	Date	): Query archive filtering by start date. The value of 'end' will be equal to the date/time of the most recent message stored in the archive.
org.jivesoftware.smackx.mam.MamManager.retrieveArchivingPreferences	(	): Get the preferences stored in the server.
org.jivesoftware.smackx.mam.MamManager.retrieveFormFields	(	): Get the form fields supported by the server.
org.jivesoftware.smackx.mam.MamManager.retrieveFormFields	(	String	): Get the form fields supported by the server.
org.jivesoftware.smackx.mam.MamManager.updateArchivingPreferences	(	List	List	DefaultBehavior	): Update the preferences in the server.
org.jivesoftware.smackx.mam.element.MamElements: MAM elements.
org.jivesoftware.smackx.mam.element.MamElements.AlwaysJidListElement: Always JID list element class for the MamPrefsIQ.
org.jivesoftware.smackx.mam.element.MamElements.AlwaysJidListElement.AlwaysJidListElement	(	List	): Always JID list element constructor.
org.jivesoftware.smackx.mam.element.MamElements.MamResultExtension: MAM result extension class.
org.jivesoftware.smackx.mam.element.MamElements.MamResultExtension.MamResultExtension	(	String	String	Forwarded	): MAM result extension constructor.
org.jivesoftware.smackx.mam.element.MamElements.MamResultExtension.getForwarded	(	): Get the forwarded element.
org.jivesoftware.smackx.mam.element.MamElements.MamResultExtension.getId	(	): Get the id.
org.jivesoftware.smackx.mam.element.MamElements.MamResultExtension.getQueryId	(	): Get query id.
org.jivesoftware.smackx.mam.element.MamElements.NeverJidListElement: Never JID list element class for the MamPrefsIQ.
org.jivesoftware.smackx.mam.element.MamElements.NeverJidListElement.NeverJidListElement	(	List	): Never JID list element constructor.
org.jivesoftware.smackx.mam.element.MamFinIQ: MAM fin IQ class.
org.jivesoftware.smackx.mam.element.MamFinIQ.MamFinIQ	(	String	RSMSet	boolean	boolean	): MamFinIQ constructor.
org.jivesoftware.smackx.mam.element.MamFinIQ.getQueryId	(	): Get query id.
org.jivesoftware.smackx.mam.element.MamFinIQ.getRSMSet	(	): Get RSM set.
org.jivesoftware.smackx.mam.element.MamFinIQ.isComplete	(	): Return if it is complete.
org.jivesoftware.smackx.mam.element.MamFinIQ.isStable	(	): Return if it is stable.
org.jivesoftware.smackx.mam.element.MamPrefsIQ: MAM Preferences IQ class.
org.jivesoftware.smackx.mam.element.MamPrefsIQ.MamPrefsIQ	(	): Construct a new MAM  IQ retrieval request (IQ type 'get').
org.jivesoftware.smackx.mam.element.MamPrefsIQ.MamPrefsIQ	(	List	List	DefaultBehavior	): MAM preferences IQ constructor.
org.jivesoftware.smackx.mam.element.MamPrefsIQ.getAlwaysJids	(	): Get the list of always store info JIDs.
org.jivesoftware.smackx.mam.element.MamPrefsIQ.getDefault	(	): Get the default behavior.
org.jivesoftware.smackx.mam.element.MamPrefsIQ.getNeverJids	(	): Get the list of never store info JIDs.
org.jivesoftware.smackx.mam.element.MamQueryIQ: MAM Query IQ class.
org.jivesoftware.smackx.mam.element.MamQueryIQ.MamQueryIQ	(	DataForm	): MAM query IQ constructor.
org.jivesoftware.smackx.mam.element.MamQueryIQ.MamQueryIQ	(	String	): MAM query IQ constructor.
org.jivesoftware.smackx.mam.element.MamQueryIQ.MamQueryIQ	(	String	DataForm	): MAM query IQ constructor.
org.jivesoftware.smackx.mam.element.MamQueryIQ.MamQueryIQ	(	String	String	DataForm	): MAM query IQ constructor.
org.jivesoftware.smackx.mam.element.MamQueryIQ.getDataForm	(	): Get the data form.
org.jivesoftware.smackx.mam.element.MamQueryIQ.getNode	(	): Get the Node name.
org.jivesoftware.smackx.mam.element.MamQueryIQ.getQueryId	(	): Get query id.
org.jivesoftware.smackx.mam.filter.MamResultFilter: MAM result filter class.
org.jivesoftware.smackx.mam.provider.MamFinIQProvider: MAM Fin IQ Provider class.
org.jivesoftware.smackx.mam.provider.MamPrefsIQProvider: MAM Preferences IQ Provider class.
org.jivesoftware.smackx.mam.provider.MamQueryIQProvider: MAM Query IQ Provider class.
org.jivesoftware.smackx.mam.provider.MamResultProvider: MAM Result Provider class.
org.jivesoftware.smackx.message_correct.element.MessageCorrectExtension: An Extension that implements XEP-0308: Last Message Correction This extension is expected to be added to message stanzas. Please refer to the XEP for more implementation guidelines.
org.jivesoftware.smackx.message_correct.provider.MessageCorrectProvider: A ExtensionElementProvider for the MessageCorrectExtension. As MessageCorrection elements have only the ID of the message to replace.
org.jivesoftware.smackx.muc.Affiliate: Represents an affiliation of a user to a given room. The affiliate's information will always have the bare jid of the real user and its affiliation. If the affiliate is an occupant of the room then we will also have information about the role and nickname of the user in the room.
org.jivesoftware.smackx.muc.Affiliate.getAffiliation	(	): Returns the affiliation of the afffiliated user. Possible affiliations are: "owner", "admin", "member", "outcast". This information will always be available.
org.jivesoftware.smackx.muc.Affiliate.getJid	(	): Returns the bare JID of the affiliated user. This information will always be available.
org.jivesoftware.smackx.muc.Affiliate.getNick	(	): Returns the current nickname of the affiliated user if the user is currently in the room. If the user is not present in the room then the answer will be null.
org.jivesoftware.smackx.muc.Affiliate.getRole	(	): Returns the current role of the affiliated user if the user is currently in the room. If the user is not present in the room then the answer will be 'none'.
org.jivesoftware.smackx.muc.AutoJoinFailedCallback.autoJoinFailed	(	MultiUserChat	Exception	): Invoked if the automatic rejoin rooms on reconnect failed.
org.jivesoftware.smackx.muc.DefaultParticipantStatusListener: Default implementation of the ParticipantStatusListener interface. This class does not provide any behavior by default. It just avoids having to implement all the inteface methods if the user is only interested in implementing some of the methods.
org.jivesoftware.smackx.muc.DefaultUserStatusListener: Default implementation of the UserStatusListener interface. This class does not provide any behavior by default. It just avoids having to implement all the inteface methods if the user is only interested in implementing some of the methods.
org.jivesoftware.smackx.muc.DiscussionHistory: The DiscussionHistory class controls the number of characters or messages to receive when entering a room. The room will decide the amount of history to return if you don't specify a DiscussionHistory while joining a room. You can use some or all of these variable to control the amount of history to receive:  maxchars -> total number of characters to receive in the history. maxstanzas -> total number of messages to receive in the history. seconds -> only the messages received in the last "X" seconds will be included in the history. since -> only the messages received since the datetime specified will be included in the history.  Note: Setting maxchars to 0 indicates that the user requests to receive no history.
org.jivesoftware.smackx.muc.DiscussionHistory.getMUCHistory	(	): Returns the History that manages the amount of discussion history provided on entering a room.
org.jivesoftware.smackx.muc.DiscussionHistory.getMaxChars	(	): Returns the total number of characters to receive in the history.
org.jivesoftware.smackx.muc.DiscussionHistory.getMaxStanzas	(	): Returns the total number of messages to receive in the history.
org.jivesoftware.smackx.muc.DiscussionHistory.getSeconds	(	): Returns the number of seconds to use to filter the messages received during that time. In other words, only the messages received in the last "X" seconds will be included in the history.
org.jivesoftware.smackx.muc.DiscussionHistory.getSince	(	): Returns the since date to use to filter the messages received during that time. In other words, only the messages received since the datetime specified will be included in the history.
org.jivesoftware.smackx.muc.DiscussionHistory.isConfigured	(	): Returns true if the history has been configured with some values.
org.jivesoftware.smackx.muc.DiscussionHistory.setMaxChars	(	int	): Sets the total number of characters to receive in the history.
org.jivesoftware.smackx.muc.DiscussionHistory.setMaxStanzas	(	int	): Sets the total number of messages to receive in the history.
org.jivesoftware.smackx.muc.DiscussionHistory.setSeconds	(	int	): Sets the number of seconds to use to filter the messages received during that time. In other words, only the messages received in the last "X" seconds will be included in the history.
org.jivesoftware.smackx.muc.DiscussionHistory.setSince	(	Date	): Sets the since date to use to filter the messages received during that time. In other words, only the messages received since the datetime specified will be included in the history.
org.jivesoftware.smackx.muc.HostedRoom: Hosted rooms by a chat service may be discovered if they are configured to appear in the room directory . The information that may be discovered is the XMPP address of the room and the room name. The address of the room may be used for obtaining more detailed information getRoomInfo() or could be used for joining the room getMultiUserChat() and join().
org.jivesoftware.smackx.muc.HostedRoom.getJid	(	): Returns the XMPP address of the hosted room by the chat service. This address may be used when creating a MultiUserChat when joining a room.
org.jivesoftware.smackx.muc.HostedRoom.getName	(	): Returns the name of the room.
org.jivesoftware.smackx.muc.InvitationListener: A listener that is fired anytime an invitation to join a MUC room is received.
org.jivesoftware.smackx.muc.InvitationListener.invitationReceived	(	XMPPConnection	MultiUserChat	EntityJid	String	String	Message	MUCUser.Invite	): Called when the an invitation to join a MUC room is received. If the room is password-protected, the invitee will receive a password to use to join the room. If the room is members-only, the the invitee may be added to the member list.
org.jivesoftware.smackx.muc.InvitationRejectionListener: A listener that is fired anytime an invitee declines or rejects an invitation.
org.jivesoftware.smackx.muc.InvitationRejectionListener.invitationDeclined	(	EntityBareJid	String	Message	MUCUser.Decline	): Called when the invitee declines the invitation.
org.jivesoftware.smackx.muc.MucConfigFormManager: Multi-User Chat configuration form manager is used to fill out and submit a Form used to configure rooms.  Room configuration needs either be done right after the room is created and still locked. Or at any later point (see XEP-45 § 10.2 Subsequent Room Configuration). When done with the configuration, call submitConfigurationForm().   The manager may not provide all possible configuration options. If you want direct access to the configuraiton form, use getConfigurationForm() and sendConfigurationForm(). 
org.jivesoftware.smackx.muc.MucConfigFormManager.MucConfigFormManager	(	MultiUserChat	): Create a new MUC config form manager.  Note that the answerForm needs to be filled out with the defaults. 
org.jivesoftware.smackx.muc.MucConfigFormManager.makeMembersOnly	(	): Make the room for members only.
org.jivesoftware.smackx.muc.MucConfigFormManager.makePasswordProtected	(	): Make the room password protected.
org.jivesoftware.smackx.muc.MucConfigFormManager.setAndEnablePassword	(	String	): Set a password and make the room password protected. Users will need to supply the password to join the room.
org.jivesoftware.smackx.muc.MucConfigFormManager.setIsPasswordProtected	(	boolean	): Set if this room is password protected. Rooms are by default not password protected.
org.jivesoftware.smackx.muc.MucConfigFormManager.setMembersOnly	(	boolean	): Set if the room is members only. Rooms are not members only per default.
org.jivesoftware.smackx.muc.MucConfigFormManager.setRoomOwners	(	Collection	): Set the owners of the room.
org.jivesoftware.smackx.muc.MucConfigFormManager.setRoomSecret	(	String	): Set the room secret, aka the room password. If set and enabled, the password is required to join the room. Note that this does only set it by does not enable password protection. Use setAndEnablePassword() to set a password and make the room protected.
org.jivesoftware.smackx.muc.MucConfigFormManager.submitConfigurationForm	(	): Submit the configuration as Form to the room.
org.jivesoftware.smackx.muc.MucConfigFormManager.supportsMembersOnly	(	): Check if the room supports a members only configuration.
org.jivesoftware.smackx.muc.MucConfigFormManager.supportsPasswordProtected	(	): Check if the room supports password protection.
org.jivesoftware.smackx.muc.MucConfigFormManager.supportsRoomOwners	(	): Check if the room supports room owners.
org.jivesoftware.smackx.muc.MucEnterConfiguration: The configuration used to enter a MUC room. This configuration is usually used when joining an existing room. When creating a new room, only the Nickname setting is relevant.  A builder for this can be obtained by calling getEnterConfigurationBuilder(). 
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.build	(	): Build a new MucEnterConfiguration with the current builder.
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.requestHistorySince	(	Date	): Sets the since date to use to filter the messages received during that time. In other words, only the messages received since the datetime specified will be included in the history.
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.requestHistorySince	(	int	): Sets the number of seconds to use to filter the messages received during that time. In other words, only the messages received in the last "X" seconds will be included in the history.
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.requestMaxCharsHistory	(	int	): Sets the total number of characters to receive in the history.
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.requestMaxStanzasHistory	(	int	): Sets the total number of messages to receive in the history.
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.requestNoHistory	(	): Request that that MUC is going to sent us no history when joining.
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.timeoutAfter	(	long	): Set the timeout used when joining the MUC room.
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.withPassword	(	String	): Use the given password to join the MUC room.
org.jivesoftware.smackx.muc.MucEnterConfiguration.Builder.withPresence	(	Presence	): Set the presence used to join the MUC room.  The 'to' value of the given presence will be overridden and the given presence must be of type 'available', otherwise an IllegalArgumentException will be thrown. 
org.jivesoftware.smackx.muc.MultiUserChat: A MultiUserChat room (XEP-45), created with getMultiUserChat().  A MultiUserChat is a conversation that takes place among many users in a virtual room. A room could have many occupants with different affiliation and roles. Possible affiliations are "owner", "admin", "member", and "outcast". Possible roles are "moderator", "participant", and "visitor". Each role and affiliation guarantees different privileges (e.g. Send messages to all occupants, Kick participants and visitors, Grant voice, Edit member list, etc.).   Note: Make sure to leave the MUC (leave()) when you don't need it anymore or otherwise you may leak the instance. 
org.jivesoftware.smackx.muc.MultiUserChat.MucCreateConfigFormHandle: A handle used to configure a newly created room. As long as the room is not configured it will be locked, which means that no one is able to join. The room will become unlocked as soon it got configured. In order to create an instant room, use makeInstant().  For advanced configuration options, use getConfigurationForm(), get the answer form with createAnswerForm(), fill it out and send it back to the room with sendConfigurationForm(). 
org.jivesoftware.smackx.muc.MultiUserChat.MucCreateConfigFormHandle.getConfigFormManager	(	): Alias for getConfigFormManager().
org.jivesoftware.smackx.muc.MultiUserChat.MucCreateConfigFormHandle.makeInstant	(	): Create an instant room. The default configuration will be accepted and the room will become unlocked, i.e. other users are able to join.
org.jivesoftware.smackx.muc.MultiUserChat.addInvitationRejectionListener	(	InvitationRejectionListener	): Adds a listener to invitation rejections notifications. The listener will be fired anytime an invitation is declined.
org.jivesoftware.smackx.muc.MultiUserChat.addMessageListener	(	MessageListener	): Adds a stanza(/packet) listener that will be notified of any new messages in the group chat. Only "group chat" messages addressed to this group chat will be delivered to the listener. If you wish to listen for other packets that may be associated with this group chat, you should register a PacketListener directly with the XMPPConnection with the appropriate PacketListener.
org.jivesoftware.smackx.muc.MultiUserChat.addParticipantListener	(	PresenceListener	): Adds a stanza(/packet) listener that will be notified of any new Presence packets sent to the group chat. Using a listener is a suitable way to know when the list of occupants should be re-loaded due to any changes.
org.jivesoftware.smackx.muc.MultiUserChat.addParticipantStatusListener	(	ParticipantStatusListener	): Adds a listener that will be notified of changes in occupants status in the room such as the user being kicked, banned, or granted admin permissions.
org.jivesoftware.smackx.muc.MultiUserChat.addPresenceInterceptor	(	PresenceListener	): Adds a new StanzaListener that will be invoked every time a new presence is going to be sent by this MultiUserChat to the server. Stanza(/Packet) interceptors may add new extensions to the presence that is going to be sent to the MUC service.
org.jivesoftware.smackx.muc.MultiUserChat.addSubjectUpdatedListener	(	SubjectUpdatedListener	): Adds a listener to subject change notifications. The listener will be fired anytime the room's subject changes.
org.jivesoftware.smackx.muc.MultiUserChat.addUserStatusListener	(	UserStatusListener	): Adds a listener that will be notified of changes in your status in the room such as the user being kicked, banned, or granted admin permissions.
org.jivesoftware.smackx.muc.MultiUserChat.banUser	(	Jid	String	): Bans a user from the room. An admin or owner of the room can ban users from a room. This means that the banned user will no longer be able to join the room unless the ban has been removed. If the banned user was present in the room then he/she will be removed from the room and notified that he/she was banned along with the reason (if provided) and the bare XMPP user ID of the user who initiated the ban.
org.jivesoftware.smackx.muc.MultiUserChat.banUsers	(	Collection	): Bans users from the room. An admin or owner of the room can ban users from a room. This means that the banned user will no longer be able to join the room unless the ban has been removed. If the banned user was present in the room then he/she will be removed from the room and notified that he/she was banned along with the reason (if provided) and the bare XMPP user ID of the user who initiated the ban.
org.jivesoftware.smackx.muc.MultiUserChat.changeAffiliationByAdmin	(	Jid	MUCAffiliation	): Tries to change the affiliation with an 'muc#admin' namespace
org.jivesoftware.smackx.muc.MultiUserChat.changeAffiliationByAdmin	(	Jid	MUCAffiliation	String	): Tries to change the affiliation with an 'muc#admin' namespace
org.jivesoftware.smackx.muc.MultiUserChat.changeAvailabilityStatus	(	String	Presence.Mode	): Changes the occupant's availability status within the room. The presence type will remain available but with a new status that describes the presence update and a new presence mode (e.g. Extended away).
org.jivesoftware.smackx.muc.MultiUserChat.changeNickname	(	Resourcepart	): Changes the occupant's nickname to a new nickname within the room. Each room occupant will receive two presence packets. One of type "unavailable" for the old nickname and one indicating availability for the new nickname. The unavailable presence will contain the new nickname and an appropriate status code (namely 303) as extended presence information. The status code 303 indicates that the occupant is changing his/her nickname.
org.jivesoftware.smackx.muc.MultiUserChat.changeSubject	(	String	): Changes the subject within the room. As a default, only users with a role of "moderator" are allowed to change the subject in a room. Although some rooms may be configured to allow a mere participant or even a visitor to change the subject.
org.jivesoftware.smackx.muc.MultiUserChat.checkAffiliationModifications	(	MUCAffiliation	MUCAffiliation	boolean	EntityFullJid	): Fires notification events if the affiliation of a room occupant has changed. If the occupant that changed his affiliation is your occupant then the UserStatusListeners added to this MultiUserChat will be fired. On the other hand, if the occupant that changed his affiliation is not yours then the ParticipantStatusListeners added to this MultiUserChat will be fired. The following table shows the events that will be fired depending on the previous and new affiliation of the occupant.   OldNewEvents NoneMembermembershipGranted MemberAdminmembershipRevoked + adminGranted AdminOwneradminRevoked + ownershipGranted NoneAdminadminGranted NoneOwnerownershipGranted MemberOwnermembershipRevoked + ownershipGranted OwnerAdminownershipRevoked + adminGranted AdminMemberadminRevoked + membershipGranted MemberNonemembershipRevoked OwnerMemberownershipRevoked + membershipGranted OwnerNoneownershipRevoked AdminNoneadminRevoked AnyoneOutcastbanned  
org.jivesoftware.smackx.muc.MultiUserChat.checkPresenceCode	(	Set	boolean	MUCUser	EntityFullJid	): Fires events according to the received presence code.
org.jivesoftware.smackx.muc.MultiUserChat.checkRoleModifications	(	MUCRole	MUCRole	boolean	EntityFullJid	): Fires notification events if the role of a room occupant has changed. If the occupant that changed his role is your occupant then the UserStatusListeners added to this MultiUserChat will be fired. On the other hand, if the occupant that changed his role is not yours then the ParticipantStatusListeners added to this MultiUserChat will be fired. The following table shows the events that will be fired depending on the previous and new role of the occupant.   OldNewEvents NoneVisitor-- VisitorParticipantvoiceGranted ParticipantModeratormoderatorGranted NoneParticipantvoiceGranted NoneModeratorvoiceGranted + moderatorGranted VisitorModeratorvoiceGranted + moderatorGranted ModeratorParticipantmoderatorRevoked ParticipantVisitorvoiceRevoked VisitorNonekicked ModeratorVisitorvoiceRevoked + moderatorRevoked ModeratorNonekicked ParticipantNonekicked  
org.jivesoftware.smackx.muc.MultiUserChat.create	(	Resourcepart	): Creates the room according to some default configuration, assign the requesting user as the room owner, and add the owner to the room but not allow anyone else to enter the room (effectively "locking" the room). The requesting user will join the room under the specified nickname as soon as the room has been created.  To create an "Instant Room", that means a room with some default configuration that is available for immediate access, the room's owner should send an empty form after creating the room. Simply call makeInstant() on the returned MucCreateConfigFormHandle.   To create a "Reserved Room", that means a room manually configured by the room creator before anyone is allowed to enter, the room's owner should complete and send a form after creating the room. Once the completed configuration form is sent to the server, the server will unlock the room. You can use the returned MucCreateConfigFormHandle to configure the room. 
org.jivesoftware.smackx.muc.MultiUserChat.createMessage	(	): Creates a new Message to send to the chat room.
org.jivesoftware.smackx.muc.MultiUserChat.createOrJoin	(	MucEnterConfiguration	): Like create(), but will return a MucCreateConfigFormHandle if the room creation was acknowledged by the service (with an 201 status code). It's up to the caller to decide, based on the return value, if he needs to continue sending the room configuration. If null is returned, the room already existed and the user is able to join right away, without sending a form.
org.jivesoftware.smackx.muc.MultiUserChat.createOrJoin	(	Resourcepart	): Create or join the MUC room with the given nickname.
org.jivesoftware.smackx.muc.MultiUserChat.createOrJoin	(	Resourcepart	String	DiscussionHistory	long	): Like create(), but will return true if the room creation was acknowledged by the service (with an 201 status code). It's up to the caller to decide, based on the return value, if he needs to continue sending the room configuration. If false is returned, the room already existed and the user is able to join right away, without sending a form.
org.jivesoftware.smackx.muc.MultiUserChat.createOrJoinIfNecessary	(	Resourcepart	String	): Create or join a MUC if it is necessary, i.e. if not the MUC is not already joined.
org.jivesoftware.smackx.muc.MultiUserChat.createPrivateChat	(	EntityFullJid	ChatMessageListener	): Returns a new Chat for sending private messages to a given room occupant. The Chat's occupant address is the room's JID (i.e. roomName@service/nick). The server service will change the 'from' address to the sender's room JID and delivering the message to the intended recipient's full JID.
org.jivesoftware.smackx.muc.MultiUserChat.destroy	(	String	EntityBareJid	): Sends a request to the server to destroy the room. The sender of the request should be the room's owner. If the sender of the destroy request is not the room's owner then the server will answer a "Forbidden" error (403).
org.jivesoftware.smackx.muc.MultiUserChat.enter	(	MucEnterConfiguration	): Enter a room, as described in XEP-45 7.2.
org.jivesoftware.smackx.muc.MultiUserChat.fireInvitationRejectionListeners	(	Message	MUCUser.Decline	): Fires invitation rejection listeners.
org.jivesoftware.smackx.muc.MultiUserChat.getAdmins	(	): Returns a list of Affiliate with the room administrators.
org.jivesoftware.smackx.muc.MultiUserChat.getAffiliatesByAdmin	(	MUCAffiliation	): Returns a collection of Affiliate that have the specified room affiliation sending a request in the admin namespace.
org.jivesoftware.smackx.muc.MultiUserChat.getConfigFormManager	(	): Get a MucConfigFormManager to configure this room.  Only room owners are able to configure a room. 
org.jivesoftware.smackx.muc.MultiUserChat.getConfigurationForm	(	): Returns the room's configuration form that the room's owner can use or null if no configuration is possible. The configuration form allows to set the room's language, enable logging, specify room's type, etc..
org.jivesoftware.smackx.muc.MultiUserChat.getEnterConfigurationBuilder	(	Resourcepart	): Get a new MUC enter configuration builder.
org.jivesoftware.smackx.muc.MultiUserChat.getMembers	(	): Returns a list of Affiliate with the room members.
org.jivesoftware.smackx.muc.MultiUserChat.getModerators	(	): Returns a list of Occupant with the room moderators.
org.jivesoftware.smackx.muc.MultiUserChat.getNickname	(	): Returns the nickname that was used to join the room, or null if not currently joined.
org.jivesoftware.smackx.muc.MultiUserChat.getOccupant	(	EntityFullJid	): Returns the Occupant information for a particular occupant, or null if the user is not in the room. The Occupant object may include information such as full JID of the user as well as the role and affiliation of the user in the room.
org.jivesoftware.smackx.muc.MultiUserChat.getOccupantPresence	(	EntityFullJid	): Returns the presence info for a particular user, or null if the user is not in the room.
org.jivesoftware.smackx.muc.MultiUserChat.getOccupants	(	): Returns an List for the list of fully qualified occupants in the group chat. For example, "conference@chat.jivesoftware.com/SomeUser". Typically, a client would only display the nickname of the occupant. To get the nickname from the fully qualified name, use the parseResource() method. Note: this value will only be accurate after joining the group chat, and may fluctuate over time.
org.jivesoftware.smackx.muc.MultiUserChat.getOccupants	(	MUCRole	): Returns a list of Occupant that have the specified room role.
org.jivesoftware.smackx.muc.MultiUserChat.getOccupantsCount	(	): Returns the number of occupants in the group chat. Note: this value will only be accurate after joining the group chat, and may fluctuate over time. If you query this value directly after joining the group chat it may not be accurate, as it takes a certain amount of time for the server to send all presence packets to this client.
org.jivesoftware.smackx.muc.MultiUserChat.getOutcasts	(	): Returns a list of Affiliate with the room outcasts.
org.jivesoftware.smackx.muc.MultiUserChat.getOwners	(	): Returns a list of Affiliate with the room owners.
org.jivesoftware.smackx.muc.MultiUserChat.getParticipants	(	): Returns a list of Occupant with the room participants.
org.jivesoftware.smackx.muc.MultiUserChat.getRegistrationForm	(	): Returns the room's registration form that an unaffiliated user, can use to become a member of the room or null if no registration is possible. Some rooms may restrict the privilege to register members and allow only room admins to add new members. If the user requesting registration requirements is not allowed to register with the room (e.g. because that privilege has been restricted), the room will return a "Not Allowed" error to the user (error code 405).
org.jivesoftware.smackx.muc.MultiUserChat.getReservedNickname	(	): Returns the reserved room nickname for the user in the room. A user may have a reserved nickname, for example through explicit room registration or database integration. In such cases it may be desirable for the user to discover the reserved nickname before attempting to enter the room.
org.jivesoftware.smackx.muc.MultiUserChat.getRoom	(	): Returns the name of the room this MultiUserChat object represents.
org.jivesoftware.smackx.muc.MultiUserChat.getSubject	(	): Returns the last known room's subject or null if the user hasn't joined the room or the room does not have a subject yet. In case the room has a subject, as soon as the user joins the room a message with the current room's subject will be received. To be notified every time the room's subject change you should add a listener to this room. addSubjectUpdatedListener() To change the room's subject use changeSubject().
org.jivesoftware.smackx.muc.MultiUserChat.grantAdmin	(	Collection	): Grants administrator privileges to other users. Room owners may grant administrator privileges to a member or unaffiliated user. An administrator is allowed to perform administrative functions such as banning users and edit moderator list.
org.jivesoftware.smackx.muc.MultiUserChat.grantAdmin	(	Jid	): Grants administrator privileges to another user. Room owners may grant administrator privileges to a member or unaffiliated user. An administrator is allowed to perform administrative functions such as banning users and edit moderator list.
org.jivesoftware.smackx.muc.MultiUserChat.grantMembership	(	Collection	): Grants membership to other users. Only administrators are able to grant membership. A user that becomes a room member will be able to enter a room of type Members-Only (i.e. a room that a user cannot enter without being on the member list).
org.jivesoftware.smackx.muc.MultiUserChat.grantMembership	(	Jid	): Grants membership to a user. Only administrators are able to grant membership. A user that becomes a room member will be able to enter a room of type Members-Only (i.e. a room that a user cannot enter without being on the member list).
org.jivesoftware.smackx.muc.MultiUserChat.grantModerator	(	Collection	): Grants moderator privileges to participants or visitors. Room administrators may grant moderator privileges. A moderator is allowed to kick users, grant and revoke voice, invite other users, modify room's subject plus all the partcipants privileges.
org.jivesoftware.smackx.muc.MultiUserChat.grantModerator	(	Resourcepart	): Grants moderator privileges to a participant or visitor. Room administrators may grant moderator privileges. A moderator is allowed to kick users, grant and revoke voice, invite other users, modify room's subject plus all the partcipants privileges.
org.jivesoftware.smackx.muc.MultiUserChat.grantOwnership	(	Collection	): Grants ownership privileges to other users. Room owners may grant ownership privileges. Some room implementations will not allow to grant ownership privileges to other users. An owner is allowed to change defining room features as well as perform all administrative functions.
org.jivesoftware.smackx.muc.MultiUserChat.grantOwnership	(	Jid	): Grants ownership privileges to another user. Room owners may grant ownership privileges. Some room implementations will not allow to grant ownership privileges to other users. An owner is allowed to change defining room features as well as perform all administrative functions.
org.jivesoftware.smackx.muc.MultiUserChat.grantVoice	(	Collection	): Grants voice to visitors in the room. In a moderated room, a moderator may want to manage who does and does not have "voice" in the room. To have voice means that a room occupant is able to send messages to the room occupants.
org.jivesoftware.smackx.muc.MultiUserChat.grantVoice	(	Resourcepart	): Grants voice to a visitor in the room. In a moderated room, a moderator may want to manage who does and does not have "voice" in the room. To have voice means that a room occupant is able to send messages to the room occupants.
org.jivesoftware.smackx.muc.MultiUserChat.invite	(	EntityBareJid	String	): Invites another user to the room in which one is an occupant. The invitation will be sent to the room which in turn will forward the invitation to the invitee. If the room is password-protected, the invitee will receive a password to use to join the room. If the room is members-only, the the invitee may be added to the member list.
org.jivesoftware.smackx.muc.MultiUserChat.invite	(	Message	EntityBareJid	String	): Invites another user to the room in which one is an occupant using a given Message. The invitation will be sent to the room which in turn will forward the invitation to the invitee. If the room is password-protected, the invitee will receive a password to use to join the room. If the room is members-only, the the invitee may be added to the member list.
org.jivesoftware.smackx.muc.MultiUserChat.isJoined	(	): Returns true if currently in the multi user chat (after calling the join() method).
org.jivesoftware.smackx.muc.MultiUserChat.join	(	MucEnterConfiguration	): Joins the chat room using the specified nickname and password. If already joined using another nickname, this method will first leave the room and then re-join using the new nickname. To control the amount of history to receive while joining a room you will need to provide a configured DiscussionHistory object. A password is required when joining password protected rooms. If the room does not require a password there is no need to provide one. If the room does not already exist when the user seeks to enter it, the server will decide to create a new room or not.
org.jivesoftware.smackx.muc.MultiUserChat.join	(	Resourcepart	): Joins the chat room using the specified nickname. If already joined using another nickname, this method will first leave the room and then re-join using the new nickname. The default connection timeout for a reply from the group chat server that the join succeeded will be used. After joining the room, the room will decide the amount of history to send.
org.jivesoftware.smackx.muc.MultiUserChat.join	(	Resourcepart	String	): Joins the chat room using the specified nickname and password. If already joined using another nickname, this method will first leave the room and then re-join using the new nickname. The default connection timeout for a reply from the group chat server that the join succeeded will be used. After joining the room, the room will decide the amount of history to send. A password is required when joining password protected rooms. If the room does not require a password there is no need to provide one.
org.jivesoftware.smackx.muc.MultiUserChat.join	(	Resourcepart	String	DiscussionHistory	long	): Joins the chat room using the specified nickname and password. If already joined using another nickname, this method will first leave the room and then re-join using the new nickname. To control the amount of history to receive while joining a room you will need to provide a configured DiscussionHistory object. A password is required when joining password protected rooms. If the room does not require a password there is no need to provide one. If the room does not already exist when the user seeks to enter it, the server will decide to create a new room or not.
org.jivesoftware.smackx.muc.MultiUserChat.kickParticipant	(	Resourcepart	String	): Kicks a visitor or participant from the room. The kicked occupant will receive a presence of type "unavailable" including a status code 307 and optionally along with the reason (if provided) and the bare JID of the user who initiated the kick. After the occupant was kicked from the room, the rest of the occupants will receive a presence of type "unavailable". The presence will include a status code 307 which means that the occupant was kicked from the room.
org.jivesoftware.smackx.muc.MultiUserChat.leave	(	): Leave the chat room.
org.jivesoftware.smackx.muc.MultiUserChat.nextMessage	(	): Returns the next available message in the chat. The method call will block (not return) until a message is available.
org.jivesoftware.smackx.muc.MultiUserChat.nextMessage	(	long	): Returns the next available message in the chat. The method call will block (not return) until a stanza(/packet) is available or the timeout has elapased. If the timeout elapses without a result, null will be returned.
org.jivesoftware.smackx.muc.MultiUserChat.pollMessage	(	): Polls for and returns the next message, or null if there isn't a message immediately available. This method provides significantly different functionalty than the nextMessage() method since it's non-blocking. In other words, the method call will always return immediately, whereas the nextMessage method will return only when a message is available (or after a specific timeout).
org.jivesoftware.smackx.muc.MultiUserChat.removeConnectionCallbacks	(	): Remove the connection callbacks (PacketListener, PacketInterceptor, StanzaCollector) used by this MUC from the connection.
org.jivesoftware.smackx.muc.MultiUserChat.removeInvitationRejectionListener	(	InvitationRejectionListener	): Removes a listener from invitation rejections notifications. The listener will be fired anytime an invitation is declined.
org.jivesoftware.smackx.muc.MultiUserChat.removeMessageListener	(	MessageListener	): Removes a stanza(/packet) listener that was being notified of any new messages in the multi user chat. Only "group chat" messages addressed to this multi user chat were being delivered to the listener.
org.jivesoftware.smackx.muc.MultiUserChat.removeParticipantListener	(	PresenceListener	): Removes a stanza(/packet) listener that was being notified of any new Presence packets sent to the group chat.
org.jivesoftware.smackx.muc.MultiUserChat.removeParticipantStatusListener	(	ParticipantStatusListener	): Removes a listener that was being notified of changes in occupants status in the room such as the user being kicked, banned, or granted admin permissions.
org.jivesoftware.smackx.muc.MultiUserChat.removePresenceInterceptor	(	StanzaListener	): Removes a StanzaListener that was being invoked every time a new presence was being sent by this MultiUserChat to the server. Stanza(/Packet) interceptors may add new extensions to the presence that is going to be sent to the MUC service.
org.jivesoftware.smackx.muc.MultiUserChat.removeSubjectUpdatedListener	(	SubjectUpdatedListener	): Removes a listener from subject change notifications. The listener will be fired anytime the room's subject changes.
org.jivesoftware.smackx.muc.MultiUserChat.removeUserStatusListener	(	UserStatusListener	): Removes a listener that was being notified of changes in your status in the room such as the user being kicked, banned, or granted admin permissions.
org.jivesoftware.smackx.muc.MultiUserChat.requestVoice	(	): Sends a voice request to the MUC. The room moderators usually need to approve this request.
org.jivesoftware.smackx.muc.MultiUserChat.revokeAdmin	(	Collection	): Revokes administrator privileges from users. The occupant that loses administrator privileges will become a member. Room owners may revoke administrator privileges from a member or unaffiliated user.
org.jivesoftware.smackx.muc.MultiUserChat.revokeAdmin	(	EntityJid	): Revokes administrator privileges from a user. The occupant that loses administrator privileges will become a member. Room owners may revoke administrator privileges from a member or unaffiliated user.
org.jivesoftware.smackx.muc.MultiUserChat.revokeMembership	(	Collection	): Revokes users' membership. Only administrators are able to revoke membership. A user that becomes a room member will be able to enter a room of type Members-Only (i.e. a room that a user cannot enter without being on the member list). If the user is in the room and the room is of type members-only then the user will be removed from the room.
org.jivesoftware.smackx.muc.MultiUserChat.revokeMembership	(	Jid	): Revokes a user's membership. Only administrators are able to revoke membership. A user that becomes a room member will be able to enter a room of type Members-Only (i.e. a room that a user cannot enter without being on the member list). If the user is in the room and the room is of type members-only then the user will be removed from the room.
org.jivesoftware.smackx.muc.MultiUserChat.revokeModerator	(	Collection	): Revokes moderator privileges from other users. The occupant that loses moderator privileges will become a participant. Room administrators may revoke moderator privileges only to occupants whose affiliation is member or none. This means that an administrator is not allowed to revoke moderator privileges from other room administrators or owners.
org.jivesoftware.smackx.muc.MultiUserChat.revokeModerator	(	Resourcepart	): Revokes moderator privileges from another user. The occupant that loses moderator privileges will become a participant. Room administrators may revoke moderator privileges only to occupants whose affiliation is member or none. This means that an administrator is not allowed to revoke moderator privileges from other room administrators or owners.
org.jivesoftware.smackx.muc.MultiUserChat.revokeOwnership	(	Collection	): Revokes ownership privileges from other users. The occupant that loses ownership privileges will become an administrator. Room owners may revoke ownership privileges. Some room implementations will not allow to grant ownership privileges to other users.
org.jivesoftware.smackx.muc.MultiUserChat.revokeOwnership	(	Jid	): Revokes ownership privileges from another user. The occupant that loses ownership privileges will become an administrator. Room owners may revoke ownership privileges. Some room implementations will not allow to grant ownership privileges to other users.
org.jivesoftware.smackx.muc.MultiUserChat.revokeVoice	(	Collection	): Revokes voice from participants in the room. In a moderated room, a moderator may want to revoke an occupant's privileges to speak. To have voice means that a room occupant is able to send messages to the room occupants.
org.jivesoftware.smackx.muc.MultiUserChat.revokeVoice	(	Resourcepart	): Revokes voice from a participant in the room. In a moderated room, a moderator may want to revoke an occupant's privileges to speak. To have voice means that a room occupant is able to send messages to the room occupants.
org.jivesoftware.smackx.muc.MultiUserChat.sendConfigurationForm	(	Form	): Sends the completed configuration form to the server. The room will be configured with the new settings defined in the form.
org.jivesoftware.smackx.muc.MultiUserChat.sendMessage	(	Message	): Sends a Message to the chat room.
org.jivesoftware.smackx.muc.MultiUserChat.sendMessage	(	String	): Sends a message to the chat room.
org.jivesoftware.smackx.muc.MultiUserChat.sendRegistrationForm	(	Form	): Sends the completed registration form to the server. After the user successfully submits the form, the room may queue the request for review by the room admins or may immediately add the user to the member list by changing the user's affiliation from "none" to "member. If the desired room nickname is already reserved for that room, the room will return a "Conflict" error to the user (error code 409). If the room does not support registration, it will return a "Service Unavailable" error to the user (error code 503).
org.jivesoftware.smackx.muc.MultiUserChat.userHasLeft	(	): Remove all callbacks and resources necessary when the user has left the room for some reason.
org.jivesoftware.smackx.muc.MultiUserChatCreationTest: Tests creating new MUC rooms.
org.jivesoftware.smackx.muc.MultiUserChatCreationTest.MultiUserChatCreationTest	(	String	): Constructor for MultiUserChatCreationTest.
org.jivesoftware.smackx.muc.MultiUserChatCreationTest.testCreateInstantRoom	(	): Tests creating a new "Instant Room".
org.jivesoftware.smackx.muc.MultiUserChatCreationTest.testCreateReservedRoom	(	): Tests creating a new "Reserved Room".
org.jivesoftware.smackx.muc.MultiUserChatException.MucConfigurationNotSupportedException: Thrown if the MUC room does not support the requested configuration option.
org.jivesoftware.smackx.muc.MultiUserChatException.MucNotJoinedException: Thrown if the requested operation required the MUC to be joined by the client, while the client is currently joined.
org.jivesoftware.smackx.muc.MultiUserChatException.NotAMucServiceException: Thrown when trying to enter a MUC room that is not hosted a domain providing a MUC service. Try getXMPPServiceDomains() for a list of client-local domains providing a MUC service.
org.jivesoftware.smackx.muc.MultiUserChatManager: A manager for Multi-User Chat rooms.  Use getMultiUserChat() to retrieve an object representing a Multi-User Chat room.   Automatic rejoin: The manager supports automatic rejoin of MultiUserChat rooms once the connection got re-established. This mechanism is disabled by default. To enable it, use setAutoJoinOnReconnect(). You can set a AutoJoinFailedCallback via setAutoJoinFailedCallback() to get notified if this mechanism failed for some reason. Note that as soon as rejoining for a single room failed, no further attempts will be made for the other rooms. 
org.jivesoftware.smackx.muc.MultiUserChatManager.addInvitationListener	(	InvitationListener	): Adds a listener to invitation notifications. The listener will be fired anytime an invitation is received.
org.jivesoftware.smackx.muc.MultiUserChatManager.decline	(	EntityBareJid	EntityBareJid	String	): Informs the sender of an invitation that the invitee declines the invitation. The rejection will be sent to the room which in turn will forward the rejection to the inviter.
org.jivesoftware.smackx.muc.MultiUserChatManager.getHostedRooms	(	DomainBareJid	): Returns a List of HostedRooms where each HostedRoom has the XMPP address of the room and the room's name. Once discovered the rooms hosted by a chat service it is possible to discover more detailed room information or join the room.
org.jivesoftware.smackx.muc.MultiUserChatManager.getInstanceFor	(	XMPPConnection	): Get a instance of a multi user chat manager for the given connection.
org.jivesoftware.smackx.muc.MultiUserChatManager.getJoinedRooms	(	): Returns a Set of the rooms where the user has joined. The Iterator will contain Strings where each String represents a room (e.g. room@muc.jabber.org).
org.jivesoftware.smackx.muc.MultiUserChatManager.getJoinedRooms	(	EntityJid	): Returns a List of the rooms where the requested user has joined. The Iterator will contain Strings where each String represents a room (e.g. room@muc.jabber.org).
org.jivesoftware.smackx.muc.MultiUserChatManager.getMultiUserChat	(	EntityBareJid	): Creates a multi user chat. Note: no information is sent to or received from the server until you attempt to join() the chat room. On some server implementations, the room will not be created until the first person joins it.  Most XMPP servers use a sub-domain for the chat service (eg chat.example.com for the XMPP server example.com). You must ensure that the room address you're trying to connect to includes the proper chat sub-domain. 
org.jivesoftware.smackx.muc.MultiUserChatManager.getRoomInfo	(	EntityBareJid	): Returns the discovered information of a given room without actually having to join the room. The server will provide information only for rooms that are public.
org.jivesoftware.smackx.muc.MultiUserChatManager.getXMPPServiceDomains	(	): Returns a collection with the XMPP addresses of the Multi-User Chat services.
org.jivesoftware.smackx.muc.MultiUserChatManager.isServiceEnabled	(	Jid	): Returns true if the specified user supports the Multi-User Chat protocol.
org.jivesoftware.smackx.muc.MultiUserChatManager.providesMucService	(	DomainBareJid	): Check if the provided domain bare JID provides a MUC service.
org.jivesoftware.smackx.muc.MultiUserChatManager.removeInvitationListener	(	InvitationListener	): Removes a listener to invitation notifications. The listener will be fired anytime an invitation is received.
org.jivesoftware.smackx.muc.MultiUserChatManager.setAutoJoinFailedCallback	(	AutoJoinFailedCallback	): Set a callback invoked by this manager when automatic join on reconnect failed. If failedCallback is not null,then automatic rejoin get also enabled.
org.jivesoftware.smackx.muc.MultiUserChatManager.setAutoJoinOnReconnect	(	boolean	): If automatic join on reconnect is enabled, then the manager will try to auto join MUC rooms after the connection got re-established.
org.jivesoftware.smackx.muc.MultiUserChatTest: Tests the new MUC functionalities.
org.jivesoftware.smackx.muc.MultiUserChatTest.testGroupchatCompatibility	(	): Test the compatibility of the MUC service with clients that still use the old groupchat protocol.
org.jivesoftware.smackx.muc.MultiUserChatTest.testJoinLeftEvents	(	): Check that ParticipantStatusListener is receiving joining and leaving events correctly. 
org.jivesoftware.smackx.muc.MultiUserChatTest.testPrivateIQ	(	): Tests that IQ packets can be sent to/from room occupants. This case will try to discover information about other room occupants.
org.jivesoftware.smackx.muc.Occupant: Represents the information about an occupant in a given room. The information will always have the affiliation and role of the occupant in the room. The full JID and nickname are optional.
org.jivesoftware.smackx.muc.Occupant.getAffiliation	(	): Returns the affiliation of the occupant. Possible affiliations are: "owner", "admin", "member", "outcast". This information will always be available.
org.jivesoftware.smackx.muc.Occupant.getJid	(	): Returns the full JID of the occupant. If this information was extracted from a presence and the room is semi or full-anonymous then the answer will be null. On the other hand, if this information was obtained while maintaining the voice list or the moderator list then we will always have a full JID.
org.jivesoftware.smackx.muc.Occupant.getNick	(	): Returns the current nickname of the occupant in the room. If this information was extracted from a presence then the answer will be null.
org.jivesoftware.smackx.muc.Occupant.getRole	(	): Returns the current role of the occupant in the room. This information will always be available.
org.jivesoftware.smackx.muc.ParticipantStatusListener: A listener that is fired anytime a participant's status in a room is changed, such as the user being kicked, banned, or granted admin permissions.
org.jivesoftware.smackx.muc.ParticipantStatusListener.adminGranted	(	EntityFullJid	): Called when an owner grants administrator privileges to a user. This means that the user will be able to perform administrative functions such as banning users and edit moderator list.
org.jivesoftware.smackx.muc.ParticipantStatusListener.adminRevoked	(	EntityFullJid	): Called when an owner revokes administrator privileges from a user. This means that the user will no longer be able to perform administrative functions such as banning users and edit moderator list.
org.jivesoftware.smackx.muc.ParticipantStatusListener.banned	(	EntityFullJid	Jid	String	): Called when an administrator or owner banned a participant from the room. This means that banned participant will no longer be able to join the room unless the ban has been removed.
org.jivesoftware.smackx.muc.ParticipantStatusListener.joined	(	EntityFullJid	): Called when a new room occupant has joined the room. Note: Take in consideration that when you join a room you will receive the list of current occupants in the room. This message will be sent for each occupant.
org.jivesoftware.smackx.muc.ParticipantStatusListener.kicked	(	EntityFullJid	Jid	String	): Called when a room participant has been kicked from the room. This means that the kicked participant is no longer participating in the room.
org.jivesoftware.smackx.muc.ParticipantStatusListener.left	(	EntityFullJid	): Called when a room occupant has left the room on its own. This means that the occupant was neither kicked nor banned from the room.
org.jivesoftware.smackx.muc.ParticipantStatusListener.membershipGranted	(	EntityFullJid	): Called when an administrator grants a user membership to the room. This means that the user will be able to join the members-only room.
org.jivesoftware.smackx.muc.ParticipantStatusListener.membershipRevoked	(	EntityFullJid	): Called when an administrator revokes a user membership to the room. This means that the user will not be able to join the members-only room.
org.jivesoftware.smackx.muc.ParticipantStatusListener.moderatorGranted	(	EntityFullJid	): Called when an administrator grants moderator privileges to a user. This means that the user will be able to kick users, grant and revoke voice, invite other users, modify room's subject plus all the partcipants privileges.
org.jivesoftware.smackx.muc.ParticipantStatusListener.moderatorRevoked	(	EntityFullJid	): Called when an administrator revokes moderator privileges from a user. This means that the user will no longer be able to kick users, grant and revoke voice, invite other users, modify room's subject plus all the partcipants privileges.
org.jivesoftware.smackx.muc.ParticipantStatusListener.nicknameChanged	(	EntityFullJid	Resourcepart	): Called when a participant changed his/her nickname in the room. The new participant's nickname will be informed with the next available presence.
org.jivesoftware.smackx.muc.ParticipantStatusListener.ownershipGranted	(	EntityFullJid	): Called when an owner grants a user ownership on the room. This means that the user will be able to change defining room features as well as perform all administrative functions.
org.jivesoftware.smackx.muc.ParticipantStatusListener.ownershipRevoked	(	EntityFullJid	): Called when an owner revokes a user ownership on the room. This means that the user will no longer be able to change defining room features as well as perform all administrative functions.
org.jivesoftware.smackx.muc.ParticipantStatusListener.voiceGranted	(	EntityFullJid	): Called when a moderator grants voice to a visitor. This means that the visitor can now participate in the moderated room sending messages to all occupants.
org.jivesoftware.smackx.muc.ParticipantStatusListener.voiceRevoked	(	EntityFullJid	): Called when a moderator revokes voice from a participant. This means that the participant in the room was able to speak and now is a visitor that can't send messages to the room occupants.
org.jivesoftware.smackx.muc.RoomInfo: Represents the room information that was discovered using Service Discovery. It's possible to obtain information about a room before joining the room but only for rooms that are public (i.e. rooms that may be discovered).
org.jivesoftware.smackx.muc.RoomInfo.getContactJids	(	): Returns Contact Addresses as JIDs, if such are reported.
org.jivesoftware.smackx.muc.RoomInfo.getDescription	(	): Returns the discovered description of the room.  The description returned by this method was provided as value of the form field of the extended disco info result. It may be null. 
org.jivesoftware.smackx.muc.RoomInfo.getForm	(	): Returns the form included in the extended disco info result or null if no such form was sent.
org.jivesoftware.smackx.muc.RoomInfo.getLang	(	): Returns the natural language of the room discussion, or null.
org.jivesoftware.smackx.muc.RoomInfo.getLdapGroup	(	): Returns an associated LDAP group that defines room membership. The value should be an LDAP Distinguished Name according to an implementation-specific or deployment-specific definition of a group.
org.jivesoftware.smackx.muc.RoomInfo.getLogsUrl	(	): Returns the URL where archived discussion logs can be found or null if there is no such URL.
org.jivesoftware.smackx.muc.RoomInfo.getMaxHistoryFetch	(	): Returns the maximum number of history messages which are returned by the room or '-1' if this property is not reported by the room.
org.jivesoftware.smackx.muc.RoomInfo.getName	(	): Returns the room name.  The name returnd here was provided as value of the name attribute of the returned identity within the disco#info result. 
org.jivesoftware.smackx.muc.RoomInfo.getOccupantsCount	(	): Returns the discovered number of occupants that are currently in the room. If this information was not discovered (i.e. the server didn't send it) then a value of -1 will be returned.
org.jivesoftware.smackx.muc.RoomInfo.getPubSub	(	): An associated pubsub node for this room or null.
org.jivesoftware.smackx.muc.RoomInfo.getRoom	(	): Returns the JID of the room whose information was discovered.
org.jivesoftware.smackx.muc.RoomInfo.getSubject	(	): Returns the discovered subject of the room. The subject may be null if the room does not have a subject.
org.jivesoftware.smackx.muc.RoomInfo.isMembersOnly	(	): Returns true if the room has restricted the access so that only members may enter the room.
org.jivesoftware.smackx.muc.RoomInfo.isModerated	(	): Returns true if the room enabled only participants to speak. Occupants with a role of visitor won't be able to speak in the room.
org.jivesoftware.smackx.muc.RoomInfo.isNonanonymous	(	): Returns true if presence packets will include the JID of every occupant.
org.jivesoftware.smackx.muc.RoomInfo.isPasswordProtected	(	): Returns true if users musy provide a valid password in order to join the room.
org.jivesoftware.smackx.muc.RoomInfo.isPersistent	(	): Returns true if the room will persist after the last occupant have left the room.
org.jivesoftware.smackx.muc.RoomInfo.isSubjectModifiable	(	): Returns an Boolean instance with the value 'true' if the subject can be modified by the room participants, 'false' if not, or null if this information is reported by the room.
org.jivesoftware.smackx.muc.SubjectUpdatedListener: A listener that is fired anytime a MUC room changes its subject.
org.jivesoftware.smackx.muc.SubjectUpdatedListener.subjectUpdated	(	String	EntityFullJid	): Called when a MUC room has changed its subject.
org.jivesoftware.smackx.muc.UserStatusListener: A listener that is fired anytime your participant's status in a room is changed, such as the user being kicked, banned, or granted admin permissions or the room is destroyed.
org.jivesoftware.smackx.muc.UserStatusListener.adminGranted	(	): Called when an owner grants administrator privileges to your user. This means that you will be able to perform administrative functions such as banning users and edit moderator list.
org.jivesoftware.smackx.muc.UserStatusListener.adminRevoked	(	): Called when an owner revokes administrator privileges from your user. This means that you will no longer be able to perform administrative functions such as banning users and edit moderator list.
org.jivesoftware.smackx.muc.UserStatusListener.banned	(	Jid	String	): Called when an administrator or owner banned your user from the room. This means that you will no longer be able to join the room unless the ban has been removed.
org.jivesoftware.smackx.muc.UserStatusListener.kicked	(	Jid	String	): Called when a moderator kicked your user from the room. This means that you are no longer participanting in the room.
org.jivesoftware.smackx.muc.UserStatusListener.membershipGranted	(	): Called when an administrator grants your user membership to the room. This means that you will be able to join the members-only room. 
org.jivesoftware.smackx.muc.UserStatusListener.membershipRevoked	(	): Called when an administrator revokes your user membership to the room. This means that you will not be able to join the members-only room.
org.jivesoftware.smackx.muc.UserStatusListener.moderatorGranted	(	): Called when an administrator grants moderator privileges to your user. This means that you will be able to kick users, grant and revoke voice, invite other users, modify room's subject plus all the partcipants privileges.
org.jivesoftware.smackx.muc.UserStatusListener.moderatorRevoked	(	): Called when an administrator revokes moderator privileges from your user. This means that you will no longer be able to kick users, grant and revoke voice, invite other users, modify room's subject plus all the partcipants privileges.
org.jivesoftware.smackx.muc.UserStatusListener.ownershipGranted	(	): Called when an owner grants to your user ownership on the room. This means that you will be able to change defining room features as well as perform all administrative functions.
org.jivesoftware.smackx.muc.UserStatusListener.ownershipRevoked	(	): Called when an owner revokes from your user ownership on the room. This means that you will no longer be able to change defining room features as well as perform all administrative functions.
org.jivesoftware.smackx.muc.UserStatusListener.roomDestroyed	(	MultiUserChat	String	): Called when the room is destroyed.
org.jivesoftware.smackx.muc.UserStatusListener.voiceGranted	(	): Called when a moderator grants voice to your user. This means that you were a visitor in the moderated room before and now you can participate in the room by sending messages to all occupants.
org.jivesoftware.smackx.muc.UserStatusListener.voiceRevoked	(	): Called when a moderator revokes voice from your user. This means that you were a participant in the room able to speak and now you are a visitor that can't send messages to the room occupants.
org.jivesoftware.smackx.muc.bookmarkautojoin.MucBookmarkAutojoinManager: Autojoin bookmarked Multi-User Chat conferences.
org.jivesoftware.smackx.muc.packet.Destroy: Represents a request to the server to destroy a room. The sender of the request should be the room's owner. If the sender of the destroy request is not the room's owner then the server will answer a "Forbidden" error.
org.jivesoftware.smackx.muc.packet.Destroy.getJid	(	): Returns the JID of an alternate location since the current room is being destroyed.
org.jivesoftware.smackx.muc.packet.Destroy.getReason	(	): Returns the reason for the room destruction.
org.jivesoftware.smackx.muc.packet.GroupChatInvitation: A group chat invitation stanza(/packet) extension, which is used to invite other users to a group chat room. To invite a user to a group chat room, address a new message to the user and set the room name appropriately, as in the following code example:  Message message = new Message("user@chat.example.com"); message.setBody("Join me for a group chat!"); message.addExtension(new GroupChatInvitation("room@chat.example.com");); con.sendStanza(message);  To listen for group chat invitations, use a StanzaExtensionFilter for the x element name and jabber:x:conference namespace, as in the following code example:  PacketFilter filter = new StanzaExtensionFilter("x", "jabber:x:conference"); // Create a stanza(/packet) collector or stanza(/packet) listeners using the filter...  Note: this protocol is outdated now that the Multi-User Chat (MUC) XEP is available (XEP-45). However, most existing clients still use this older protocol. Once MUC support becomes more widespread, this API may be deprecated.
org.jivesoftware.smackx.muc.packet.GroupChatInvitation.GroupChatInvitation	(	String	): Creates a new group chat invitation to the specified room address. GroupChat room addresses are in the form room@service, where service is the name of groupchat server, such as chat.example.com.
org.jivesoftware.smackx.muc.packet.GroupChatInvitation.from	(	Stanza	): Get the group chat invitation from the given stanza.
org.jivesoftware.smackx.muc.packet.GroupChatInvitation.getFrom	(	Stanza	): Deprecated.
org.jivesoftware.smackx.muc.packet.GroupChatInvitation.getRoomAddress	(	): Returns the address of the group chat room. GroupChat room addresses are in the form room@service, where service is the name of groupchat server, such as chat.example.com.
org.jivesoftware.smackx.muc.packet.MUCAdmin: IQ stanza(/packet) that serves for kicking users, granting and revoking voice, banning users, modifying the ban list, granting and revoking membership and granting and revoking moderator privileges. All these operations are scoped by the 'http://jabber.org/protocol/muc#admin' namespace.
org.jivesoftware.smackx.muc.packet.MUCAdmin.addItem	(	MUCItem	): Adds an item child that holds information about roles, affiliation, jids and nicks.
org.jivesoftware.smackx.muc.packet.MUCAdmin.getItems	(	): Returns a List of item childs that holds information about roles, affiliation, jids and nicks.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence: Represents extended presence information whose sole purpose is to signal the ability of the occupant to speak the MUC protocol when joining a room. If the room requires a password then the MUCInitialPresence should include one.  The amount of discussion history provided on entering a room (perhaps because the user is on a low-bandwidth connection or is using a small-footprint client) could be managed by setting a configured History instance to the MUCInitialPresence instance. 
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History: The History class controls the number of characters or messages to receive when entering a room.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.History	(	): Deprecated constructor.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.getMaxChars	(	): Returns the total number of characters to receive in the history.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.getMaxStanzas	(	): Returns the total number of messages to receive in the history.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.getSeconds	(	): Returns the number of seconds to use to filter the messages received during that time. In other words, only the messages received in the last "X" seconds will be included in the history.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.getSince	(	): Returns the since date to use to filter the messages received during that time. In other words, only the messages received since the datetime specified will be included in the history.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.setMaxChars	(	int	): Sets the total number of characters to receive in the history.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.setMaxStanzas	(	int	): Sets the total number of messages to receive in the history.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.setSeconds	(	int	): Sets the number of seconds to use to filter the messages received during that time. In other words, only the messages received in the last "X" seconds will be included in the history.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.History.setSince	(	Date	): Sets the since date to use to filter the messages received during that time. In other words, only the messages received since the datetime specified will be included in the history.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.MUCInitialPresence	(	): Deprecated constructor.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.MUCInitialPresence	(	String	int	int	int	Date	): Construct a new MUC initial presence extension.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.from	(	Stanza	): Retrieve the MUCInitialPresence PacketExtension from packet, if any.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.getFrom	(	Stanza	): Retrieve the MUCInitialPresence PacketExtension from packet, if any.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.getHistory	(	): Returns the history that manages the amount of discussion history provided on entering a room.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.getPassword	(	): Returns the password to use when the room requires a password.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.setHistory	(	History	): Sets the History that manages the amount of discussion history provided on entering a room.
org.jivesoftware.smackx.muc.packet.MUCInitialPresence.setPassword	(	String	): Sets the password to use when the room requires a password.
org.jivesoftware.smackx.muc.packet.MUCItem: Item child that holds information about roles, affiliation, jids and nicks.
org.jivesoftware.smackx.muc.packet.MUCItem.MUCItem	(	MUCAffiliation	MUCRole	Jid	String	Jid	Resourcepart	Resourcepart	): Creates a new item child.
org.jivesoftware.smackx.muc.packet.MUCItem.getActor	(	): Returns the actor (JID of an occupant in the room) that was kicked or banned.
org.jivesoftware.smackx.muc.packet.MUCItem.getActorNick	(	): Get the nickname of the actor.
org.jivesoftware.smackx.muc.packet.MUCItem.getAffiliation	(	): Returns the occupant's affiliation to the room. The affiliation is a semi-permanent association or connection with a room. The possible affiliations are "owner", "admin", "member", and "outcast" (naturally it is also possible to have no affiliation). An affiliation lasts across a user's visits to a room.
org.jivesoftware.smackx.muc.packet.MUCItem.getJid	(	): Returns the  by which an occupant is identified within the context of a room. If the room is non-anonymous, the JID will be included in the item.
org.jivesoftware.smackx.muc.packet.MUCItem.getNick	(	): Returns the new nickname of an occupant that is changing his/her nickname. The new nickname is sent as part of the unavailable presence.
org.jivesoftware.smackx.muc.packet.MUCItem.getReason	(	): Returns the reason for the item child. The reason is optional and could be used to explain the reason why a user (occupant) was kicked or banned.
org.jivesoftware.smackx.muc.packet.MUCItem.getRole	(	): Returns the temporary position or privilege level of an occupant within a room. The possible roles are "moderator", "participant", "visitor" and "none" (it is also possible to have no defined role). A role lasts only for the duration of an occupant's visit to a room.
org.jivesoftware.smackx.muc.packet.MUCOwner: IQ stanza(/packet) that serves for granting and revoking ownership privileges, granting and revoking administrative privileges and destroying a room. All these operations are scoped by the 'http://jabber.org/protocol/muc#owner' namespace.
org.jivesoftware.smackx.muc.packet.MUCOwner.addItem	(	MUCItem	): Adds an item child that holds information about affiliation, jids and nicks.
org.jivesoftware.smackx.muc.packet.MUCOwner.getDestroy	(	): Returns a request to the server to destroy a room. The sender of the request should be the room's owner. If the sender of the destroy request is not the room's owner then the server will answer a "Forbidden" error.
org.jivesoftware.smackx.muc.packet.MUCOwner.getItems	(	): Returns a List of item childs that holds information about affiliation, jids and nicks.
org.jivesoftware.smackx.muc.packet.MUCOwner.setDestroy	(	Destroy	): Sets a request to the server to destroy a room. The sender of the request should be the room's owner. If the sender of the destroy request is not the room's owner then the server will answer a "Forbidden" error.
org.jivesoftware.smackx.muc.packet.MUCUser: Represents extended presence information about roles, affiliations, full JIDs, or status codes scoped by the 'http://jabber.org/protocol/muc#user' namespace.
org.jivesoftware.smackx.muc.packet.MUCUser.Decline: Represents a rejection to an invitation from another user to a room. The rejection will be sent to the room which in turn will forward the refusal to the inviter.
org.jivesoftware.smackx.muc.packet.MUCUser.Decline.getFrom	(	): Returns the bare JID of the invitee that rejected the invitation. (e.g. 'crone1@shakespeare.lit').
org.jivesoftware.smackx.muc.packet.MUCUser.Decline.getReason	(	): Returns the message explaining why the invitation was rejected.
org.jivesoftware.smackx.muc.packet.MUCUser.Decline.getTo	(	): Returns the bare JID of the inviter. (e.g. 'hecate@shakespeare.lit')
org.jivesoftware.smackx.muc.packet.MUCUser.Invite: Represents an invitation for another user to a room. The sender of the invitation must be an occupant of the room. The invitation will be sent to the room which in turn will forward the invitation to the invitee.
org.jivesoftware.smackx.muc.packet.MUCUser.Invite.getFrom	(	): Returns the bare JID of the inviter or, optionally, the room JID. (e.g. 'crone1@shakespeare.lit/desktop').
org.jivesoftware.smackx.muc.packet.MUCUser.Invite.getReason	(	): Returns the message explaining the invitation.
org.jivesoftware.smackx.muc.packet.MUCUser.Invite.getTo	(	): Returns the bare JID of the invitee. (e.g. 'hecate@shakespeare.lit')
org.jivesoftware.smackx.muc.packet.MUCUser.Status: Status code assists in presenting notification messages. The following link provides the list of existing error codes Multi-User Chat Status Codes.
org.jivesoftware.smackx.muc.packet.MUCUser.Status.Status	(	int	): Creates a new instance of Status with the specified code.
org.jivesoftware.smackx.muc.packet.MUCUser.Status.getCode	(	): Returns the code that uniquely identifies the reason of the error. The code assists in presenting notification messages.
org.jivesoftware.smackx.muc.packet.MUCUser.addStatusCode	(	Status	): Add a status code which hold a code that assists in presenting notification messages.
org.jivesoftware.smackx.muc.packet.MUCUser.addStatusCodes	(	Set	): Add the status codes which holds the codes that assists in presenting notification messages.
org.jivesoftware.smackx.muc.packet.MUCUser.from	(	Stanza	): Retrieve the MUCUser PacketExtension from packet, if any.
org.jivesoftware.smackx.muc.packet.MUCUser.getDecline	(	): Returns the rejection to an invitation from another user to a room. The rejection will be sent to the room which in turn will forward the refusal to the inviter.
org.jivesoftware.smackx.muc.packet.MUCUser.getDestroy	(	): Returns the notification that the room has been destroyed. After a room has been destroyed, the room occupants will receive a Presence stanza(/packet) of type 'unavailable' with the reason for the room destruction if provided by the room owner.
org.jivesoftware.smackx.muc.packet.MUCUser.getFrom	(	Stanza	): Retrieve the MUCUser PacketExtension from packet, if any.
org.jivesoftware.smackx.muc.packet.MUCUser.getInvite	(	): Returns the invitation for another user to a room. The sender of the invitation must be an occupant of the room. The invitation will be sent to the room which in turn will forward the invitation to the invitee.
org.jivesoftware.smackx.muc.packet.MUCUser.getItem	(	): Returns the item child that holds information about roles, affiliation, jids and nicks.
org.jivesoftware.smackx.muc.packet.MUCUser.getPassword	(	): Returns the password to use to enter Password-Protected Room. A Password-Protected Room is a room that a user cannot enter without first providing the correct password.
org.jivesoftware.smackx.muc.packet.MUCUser.getStatus	(	): Returns a set of status which holds the status code that assist in presenting notification messages.
org.jivesoftware.smackx.muc.packet.MUCUser.hasStatus	(	): Returns true if this MUCUser instance has also Status information.  If true is returned, then getStatus() will return a non-empty set. 
org.jivesoftware.smackx.muc.packet.MUCUser.setDecline	(	Decline	): Sets the rejection to an invitation from another user to a room. The rejection will be sent to the room which in turn will forward the refusal to the inviter.
org.jivesoftware.smackx.muc.packet.MUCUser.setDestroy	(	Destroy	): Sets the notification that the room has been destroyed. After a room has been destroyed, the room occupants will receive a Presence stanza(/packet) of type 'unavailable' with the reason for the room destruction if provided by the room owner.
org.jivesoftware.smackx.muc.packet.MUCUser.setInvite	(	Invite	): Sets the invitation for another user to a room. The sender of the invitation must be an occupant of the room. The invitation will be sent to the room which in turn will forward the invitation to the invitee.
org.jivesoftware.smackx.muc.packet.MUCUser.setItem	(	MUCItem	): Sets the item child that holds information about roles, affiliation, jids and nicks.
org.jivesoftware.smackx.muc.packet.MUCUser.setPassword	(	String	): Sets the password to use to enter Password-Protected Room. A Password-Protected Room is a room that a user cannot enter without first providing the correct password.
org.jivesoftware.smackx.muc.provider.MUCAdminProvider: The MUCAdminProvider parses MUCAdmin packets. (@see MUCAdmin)
org.jivesoftware.smackx.muc.provider.MUCOwnerProvider: The MUCOwnerProvider parses MUCOwner packets. (@see MUCOwner)
org.jivesoftware.smackx.muc.provider.MUCUserProvider: The MUCUserProvider parses packets with extended presence information about roles and affiliations.
org.jivesoftware.smackx.muc.provider.MUCUserProvider.parse	(	XmlPullParser	int	): Parses a MUCUser stanza(/packet) (extension sub-packet).
org.jivesoftware.smackx.muclight.MUCLightRoomConfiguration: MUC Light room configuration class.
org.jivesoftware.smackx.muclight.MUCLightRoomConfiguration.MUCLightRoomConfiguration	(	String	String	HashMap	): MUC Light room configuration model constructor.
org.jivesoftware.smackx.muclight.MUCLightRoomConfiguration.getCustomConfigs	(	): Returns the room custom configurations.
org.jivesoftware.smackx.muclight.MUCLightRoomConfiguration.getRoomName	(	): Returns the room name.
org.jivesoftware.smackx.muclight.MUCLightRoomConfiguration.getSubject	(	): Returns the room subject.
org.jivesoftware.smackx.muclight.MUCLightRoomInfo: MUC Light room info class.
org.jivesoftware.smackx.muclight.MUCLightRoomInfo.MUCLightRoomInfo	(	String	Jid	MUCLightRoomConfiguration	HashMap	): MUC Light room info model constructor.
org.jivesoftware.smackx.muclight.MUCLightRoomInfo.getConfiguration	(	): Returns the configuration.
org.jivesoftware.smackx.muclight.MUCLightRoomInfo.getOccupants	(	): Returns the room occupants.
org.jivesoftware.smackx.muclight.MUCLightRoomInfo.getRoom	(	): Returns the JID of the room whose information was discovered.
org.jivesoftware.smackx.muclight.MUCLightRoomInfo.getVersion	(	): Returns the version.
org.jivesoftware.smackx.muclight.MultiUserChatLight: MUCLight class.
org.jivesoftware.smackx.muclight.MultiUserChatLight.addMessageListener	(	MessageListener	): Adds a stanza(/packet) listener that will be notified of any new messages in the group chat. Only "group chat" messages addressed to this group chat will be delivered to the listener.
org.jivesoftware.smackx.muclight.MultiUserChatLight.changeAffiliations	(	HashMap	): Change the MUC Light affiliations.
org.jivesoftware.smackx.muclight.MultiUserChatLight.changeRoomName	(	String	): Change the name of the room.
org.jivesoftware.smackx.muclight.MultiUserChatLight.changeSubject	(	String	): Change the subject of the MUC Light.
org.jivesoftware.smackx.muclight.MultiUserChatLight.create	(	String	List	): Create new MUCLight.
org.jivesoftware.smackx.muclight.MultiUserChatLight.create	(	String	String	HashMap	List	): Create new MUCLight.
org.jivesoftware.smackx.muclight.MultiUserChatLight.createMessage	(	): Creates a new Message to send to the chat room.
org.jivesoftware.smackx.muclight.MultiUserChatLight.createPrivateChat	(	EntityJid	ChatMessageListener	): Returns a new Chat for sending private messages to a given room occupant. The Chat's occupant address is the room's JID (i.e. roomName@service/nick). The server service will change the 'from' address to the sender's room JID and delivering the message to the intended recipient's full JID.
org.jivesoftware.smackx.muclight.MultiUserChatLight.destroy	(	): Destroy the MUC Light. Only will work if it is requested by the owner.
org.jivesoftware.smackx.muclight.MultiUserChatLight.getAffiliations	(	): Get the MUC Light affiliations.
org.jivesoftware.smackx.muclight.MultiUserChatLight.getAffiliations	(	String	): Get the MUC Light affiliations.
org.jivesoftware.smackx.muclight.MultiUserChatLight.getConfiguration	(	): Get the MUC Light configuration.
org.jivesoftware.smackx.muclight.MultiUserChatLight.getConfiguration	(	String	): Get the MUC Light configuration.
org.jivesoftware.smackx.muclight.MultiUserChatLight.getFullInfo	(	): Get the MUC Light info.
org.jivesoftware.smackx.muclight.MultiUserChatLight.getFullInfo	(	String	): Get the MUC Light info.
org.jivesoftware.smackx.muclight.MultiUserChatLight.getRoom	(	): Returns the JID of the room.
org.jivesoftware.smackx.muclight.MultiUserChatLight.leave	(	): Leave the MUCLight.
org.jivesoftware.smackx.muclight.MultiUserChatLight.nextMessage	(	): Returns the next available message in the chat. The method call will block (not return) until a message is available.
org.jivesoftware.smackx.muclight.MultiUserChatLight.nextMessage	(	long	): Returns the next available message in the chat.
org.jivesoftware.smackx.muclight.MultiUserChatLight.pollMessage	(	): Polls for and returns the next message.
org.jivesoftware.smackx.muclight.MultiUserChatLight.removeConnectionCallbacks	(	): Remove the connection callbacks used by this MUC Light from the connection.
org.jivesoftware.smackx.muclight.MultiUserChatLight.removeMessageListener	(	MessageListener	): Removes a stanza(/packet) listener that was being notified of any new messages in the MUCLight. Only "group chat" messages addressed to this MUCLight were being delivered to the listener.
org.jivesoftware.smackx.muclight.MultiUserChatLight.sendMessage	(	Message	): Sends a Message to the chat room.
org.jivesoftware.smackx.muclight.MultiUserChatLight.sendMessage	(	String	): Sends a message to the chat room.
org.jivesoftware.smackx.muclight.MultiUserChatLight.setRoomConfigs	(	HashMap	): Set the room configurations.
org.jivesoftware.smackx.muclight.MultiUserChatLight.setRoomConfigs	(	String	HashMap	): Set the room configurations.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager: Multi-User Chat Light manager class.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.blockRoom	(	DomainBareJid	Jid	): Block a room.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.blockRooms	(	DomainBareJid	List	): Block rooms.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.blockUser	(	DomainBareJid	Jid	): Block a user.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.blockUsers	(	DomainBareJid	List	): Block users.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.getInstanceFor	(	XMPPConnection	): Get a instance of a MUC Light manager for the given connection.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.getLocalServices	(	): Returns a collection with the XMPP addresses of the MUC Light services.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.getMultiUserChatLight	(	EntityBareJid	): Obtain the MUC Light.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.getOccupiedRooms	(	DomainBareJid	): Returns a List of the rooms the user occupies.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.getRoomsBlocked	(	DomainBareJid	): Get rooms blocked.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.getUsersAndRoomsBlocked	(	DomainBareJid	): Get users and rooms blocked.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.getUsersBlocked	(	DomainBareJid	): Get users blocked.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.isFeatureSupported	(	DomainBareJid	): Returns true if Multi-User Chat Light feature is supported by the server.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.unblockRoom	(	DomainBareJid	Jid	): Unblock a room.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.unblockRooms	(	DomainBareJid	List	): Unblock rooms.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.unblockUser	(	DomainBareJid	Jid	): Unblock a user.
org.jivesoftware.smackx.muclight.MultiUserChatLightManager.unblockUsers	(	DomainBareJid	List	): Unblock users.
org.jivesoftware.smackx.muclight.element.MUCLightAffiliationsIQ: MUC Light affiliations response IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightAffiliationsIQ.MUCLightAffiliationsIQ	(	String	HashMap	): MUC Light affiliations response IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightAffiliationsIQ.getAffiliations	(	): Returns the room affiliations.
org.jivesoftware.smackx.muclight.element.MUCLightAffiliationsIQ.getVersion	(	): Returns the version.
org.jivesoftware.smackx.muclight.element.MUCLightBlockingIQ: MUC Light blocking IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightBlockingIQ.MUCLightBlockingIQ	(	HashMap	HashMap	): MUC Light blocking IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightBlockingIQ.getRooms	(	): Get rooms JIDs with booleans (true if allow, false if deny).
org.jivesoftware.smackx.muclight.element.MUCLightBlockingIQ.getUsers	(	): Get users JIDs with booleans (true if allow, false if deny).
org.jivesoftware.smackx.muclight.element.MUCLightChangeAffiliationsIQ: MUCLight change affiliations IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightChangeAffiliationsIQ.MUCLightChangeAffiliationsIQ	(	Jid	HashMap	): MUCLight change affiliations IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightChangeAffiliationsIQ.getAffiliations	(	): Get the affiliations.
org.jivesoftware.smackx.muclight.element.MUCLightConfigurationIQ: MUC Light configuration response IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightConfigurationIQ.MUCLightConfigurationIQ	(	String	MUCLightRoomConfiguration	): MUC Light configuration response IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightConfigurationIQ.getConfiguration	(	): Returns the room configuration.
org.jivesoftware.smackx.muclight.element.MUCLightConfigurationIQ.getVersion	(	): Returns the version.
org.jivesoftware.smackx.muclight.element.MUCLightCreateIQ: MUCLight create IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightCreateIQ.MUCLightCreateIQ	(	EntityJid	String	List	): MUCLight create IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightCreateIQ.MUCLightCreateIQ	(	EntityJid	String	String	HashMap	List	): MUCLight create IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightCreateIQ.getConfiguration	(	): Get the room configuration.
org.jivesoftware.smackx.muclight.element.MUCLightCreateIQ.getOccupants	(	): Get the room occupants.
org.jivesoftware.smackx.muclight.element.MUCLightDestroyIQ: MUC Light destroy IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightDestroyIQ.MUCLightDestroyIQ	(	Jid	): MUC Light destroy IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightElements.AffiliationsChangeExtension: Affiliations change extension element class.
org.jivesoftware.smackx.muclight.element.MUCLightElements.AffiliationsChangeExtension.getAffiliations	(	): Get the affiliations.
org.jivesoftware.smackx.muclight.element.MUCLightElements.AffiliationsChangeExtension.getPrevVersion	(	): Get the previous version.
org.jivesoftware.smackx.muclight.element.MUCLightElements.AffiliationsChangeExtension.getVersion	(	): Get the version.
org.jivesoftware.smackx.muclight.element.MUCLightElements.BlockingElement: Blocking element class.
org.jivesoftware.smackx.muclight.element.MUCLightElements.BlockingElement.BlockingElement	(	Jid	Boolean	Boolean	): Blocking element constructor.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationElement: Configuration element class.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationElement.ConfigurationElement	(	MUCLightRoomConfiguration	): Configuration element constructor.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationsChangeExtension: Configurations change extension element class.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationsChangeExtension.ConfigurationsChangeExtension	(	String	String	String	String	HashMap	): Configurations change extension constructor.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationsChangeExtension.getCustomConfigs	(	): Get the room custom configurations.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationsChangeExtension.getPrevVersion	(	): Get the previous version.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationsChangeExtension.getRoomName	(	): Get the room name.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationsChangeExtension.getSubject	(	): Get the room subject.
org.jivesoftware.smackx.muclight.element.MUCLightElements.ConfigurationsChangeExtension.getVersion	(	): Get the version.
org.jivesoftware.smackx.muclight.element.MUCLightElements.OccupantsElement: Occupants element class.
org.jivesoftware.smackx.muclight.element.MUCLightElements.OccupantsElement.OccupantsElement	(	HashMap	): Occupants element constructor.
org.jivesoftware.smackx.muclight.element.MUCLightElements.UserWithAffiliationElement: User with affiliation element class.
org.jivesoftware.smackx.muclight.element.MUCLightElements.UserWithAffiliationElement.UserWithAffiliationElement	(	Jid	MUCLightAffiliation	): User with affiliations element constructor.
org.jivesoftware.smackx.muclight.element.MUCLightGetAffiliationsIQ: MUC Light get affiliations IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightGetAffiliationsIQ.MUCLightGetAffiliationsIQ	(	Jid	): MUC Light get affiliations IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightGetAffiliationsIQ.MUCLightGetAffiliationsIQ	(	Jid	String	): MUC Light get affiliations IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightGetConfigsIQ: MUC Light get configurations IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightGetConfigsIQ.MUCLightGetConfigsIQ	(	Jid	): MUC Light get configurations IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightGetConfigsIQ.MUCLightGetConfigsIQ	(	Jid	String	): MUC Light get configurations IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightGetInfoIQ: MUC Light get info IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightGetInfoIQ.MUCLightGetInfoIQ	(	Jid	): MUC Light get info IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightGetInfoIQ.MUCLightGetInfoIQ	(	Jid	String	): MUC Light get info IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightInfoIQ: MUC Light info response IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightInfoIQ.MUCLightInfoIQ	(	String	MUCLightRoomConfiguration	HashMap	): MUCLight info response IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightInfoIQ.getConfiguration	(	): Returns the room configuration.
org.jivesoftware.smackx.muclight.element.MUCLightInfoIQ.getOccupants	(	): Returns the room occupants.
org.jivesoftware.smackx.muclight.element.MUCLightInfoIQ.getVersion	(	): Returns the version.
org.jivesoftware.smackx.muclight.element.MUCLightSetConfigsIQ: MUC Light set configurations IQ class.
org.jivesoftware.smackx.muclight.element.MUCLightSetConfigsIQ.MUCLightSetConfigsIQ	(	Jid	String	HashMap	): MUC Light set configuration IQ constructor.
org.jivesoftware.smackx.muclight.element.MUCLightSetConfigsIQ.MUCLightSetConfigsIQ	(	Jid	String	String	HashMap	): MUC Light set configuration IQ constructor.
org.jivesoftware.smackx.muclight.provider.MUCLightAffiliationsChangeProvider: MUC Light Affiliations Change Provider class.
org.jivesoftware.smackx.muclight.provider.MUCLightAffiliationsIQProvider: MUC Light affiliations IQ provider class.
org.jivesoftware.smackx.muclight.provider.MUCLightBlockingIQProvider: MUC Light blocking IQ provider class.
org.jivesoftware.smackx.muclight.provider.MUCLightConfigurationIQProvider: MUC Light configuration IQ provider class.
org.jivesoftware.smackx.muclight.provider.MUCLightConfigurationsChangeProvider: MUC Light configurations change provider class.
org.jivesoftware.smackx.muclight.provider.MUCLightInfoIQProvider: MUC Light info IQ provider class.
org.jivesoftware.smackx.nick.packet.Nick: A minimalistic implementation of a ExtensionElement for nicknames.
org.jivesoftware.smackx.nick.packet.Nick.getName	(	): The value of this nickname.
org.jivesoftware.smackx.nick.packet.Nick.setName	(	String	): Sets the value of this nickname.
org.jivesoftware.smackx.offline.OfflineMessageHeader: The OfflineMessageHeader holds header information of an offline message. The header information was retrieved using the OfflineMessageManager class. Each offline message is identified by the target user of the offline message and a unique stamp. Use getMessages() to retrieve the whole message.
org.jivesoftware.smackx.offline.OfflineMessageHeader.getJid	(	): Returns the full JID of the user that sent the message.
org.jivesoftware.smackx.offline.OfflineMessageHeader.getStamp	(	): Returns the stamp that uniquely identifies the offline message. This stamp will be used for getting the specific message or delete it. The stamp may be of the form UTC timestamps but it is not required to have that format.
org.jivesoftware.smackx.offline.OfflineMessageHeader.getUser	(	): Returns the bare JID of the user that was offline when the message was sent.
org.jivesoftware.smackx.offline.OfflineMessageManager: The OfflineMessageManager helps manage offline messages even before the user has sent an available presence. When a user asks for his offline messages before sending an available presence then the server will not send a flood with all the offline messages when the user becomes online. The server will not send a flood with all the offline messages to the session that made the offline messages request or to any other session used by the user that becomes online. Once the session that made the offline messages request has been closed and the user becomes offline in all the resources then the server will resume storing the messages offline and will send all the offline messages to the user when he becomes online. Therefore, the server will flood the user when he becomes online unless the user uses this class to manage his offline messages.
org.jivesoftware.smackx.offline.OfflineMessageManager.deleteMessages	(	): Deletes all offline messages of the user.
org.jivesoftware.smackx.offline.OfflineMessageManager.deleteMessages	(	List	): Deletes the specified list of offline messages. The request will include the list of stamps that uniquely identifies the offline messages to delete.
org.jivesoftware.smackx.offline.OfflineMessageManager.getHeaders	(	): Returns a List of OfflineMessageHeader that keep information about the offline message. The OfflineMessageHeader includes a stamp that could be used to retrieve the complete message or delete the specific message.
org.jivesoftware.smackx.offline.OfflineMessageManager.getMessageCount	(	): Returns the number of offline messages for the user of the connection.
org.jivesoftware.smackx.offline.OfflineMessageManager.getMessages	(	): Returns a List of Messages with all the offline Messages of the user. The returned offline messages will not be deleted from the server. Use deleteMessages() to delete the messages.
org.jivesoftware.smackx.offline.OfflineMessageManager.getMessages	(	List	): Returns a List of the offline Messages whose stamp matches the specified request. The request will include the list of stamps that uniquely identifies the offline messages to retrieve. The returned offline messages will not be deleted from the server. Use deleteMessages() to delete the messages.
org.jivesoftware.smackx.offline.OfflineMessageManager.supportsFlexibleRetrieval	(	): Returns true if the server supports Flexible Offline Message Retrieval. When the server supports Flexible Offline Message Retrieval it is possible to get the header of the offline messages, get specific messages, delete specific messages, etc.
org.jivesoftware.smackx.offline.packet.OfflineMessageInfo: OfflineMessageInfo is an extension included in the retrieved offline messages requested by the org.jivesoftware.smackx.offline.OfflineMessageManager. This extension includes a stamp that uniquely identifies the offline message. This stamp may be used for deleting the offline message. The stamp may be of the form UTC timestamps but it is not required to have that format.
org.jivesoftware.smackx.offline.packet.OfflineMessageInfo.Provider.parse	(	XmlPullParser	int	): Parses a OfflineMessageInfo stanza(/packet) (extension sub-packet).
org.jivesoftware.smackx.offline.packet.OfflineMessageInfo.getElementName	(	): Returns the XML element name of the extension sub-packet root element. Always returns "offline"
org.jivesoftware.smackx.offline.packet.OfflineMessageInfo.getNamespace	(	): Returns the XML namespace of the extension sub-packet root element. According the specification the namespace is always "http://jabber.org/protocol/offline"
org.jivesoftware.smackx.offline.packet.OfflineMessageInfo.getNode	(	): Returns the stamp that uniquely identifies the offline message. This stamp may be used for deleting the offline message. The stamp may be of the form UTC timestamps but it is not required to have that format.
org.jivesoftware.smackx.offline.packet.OfflineMessageInfo.setNode	(	String	): Sets the stamp that uniquely identifies the offline message. This stamp may be used for deleting the offline message. The stamp may be of the form UTC timestamps but it is not required to have that format.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest: Represents a request to get some or all the offline messages of a user. This class can also be used for deleting some or all the offline messages of a user.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.Item: Item child that holds information about offline messages to view or delete.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.Item.Item	(	String	): Creates a new item child.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.Item.getAction	(	): Returns "view" or "remove" that indicate if the server should return the specified offline message or delete it.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.Item.setAction	(	String	): Sets if the server should return the specified offline message or delete it. Possible values are "view" or "remove".
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.addItem	(	Item	): Adds an item child that holds information about offline messages to view or delete.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.getItems	(	): Returns a List of item childs that holds information about offline messages to view or delete.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.isFetch	(	): Returns true if all the offline messages of the user should be retrieved.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.isPurge	(	): Returns true if all the offline messages of the user should be deleted.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.setFetch	(	boolean	): Sets if all the offline messages of the user should be retrieved.
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest.setPurge	(	boolean	): Sets if all the offline messages of the user should be deleted.
org.jivesoftware.smackx.omemo.AbstractOmemoIntegrationTest: Super class for OMEMO integration tests.
org.jivesoftware.smackx.omemo.FileBasedOmemoStore: Like a rocket!
org.jivesoftware.smackx.omemo.FileBasedOmemoStore.FileHierarchy: This class represents the directory structure of the FileBasedOmemoStoreV2. The directory looks as follows: OMEMO_Store/ 'romeo@montague.lit'/ //Our bareJid ... 'juliet@capulet.lit'/ //Our other bareJid defaultDeviceId '13371234'/ //deviceId identityKeyPair //Our identityKeyPair lastPreKeyId //Id of the last preKey we generated currentSignedPreKeyId //Id of the currently used signedPreKey lastSignedPreKeyRenewal //Date of when the signedPreKey was last renewed. preKeys/ //Our preKeys '1' '2' ... signedPreKeys/ //Our signedPreKeys '1' '2' ... contacts/ 'romeo@capulet.lit'/ //Juliets contact Romeo activeDevice //List of Romeos active devices inactiveDevices //List of his inactive devices 'deviceId'/ //Romeos deviceId identityKey //Romeos identityKey session //Our session with romeo trust //Records about the trust in romeos device (lastReceivedMessageDate) //Only, for our own other devices: //date of the last received message
org.jivesoftware.smackx.omemo.OmemoConfiguration: Contains OMEMO related configuration options.
org.jivesoftware.smackx.omemo.OmemoInitializationTest.initializationTest	(	): Tests, if the initialization is done properly.
org.jivesoftware.smackx.omemo.OmemoInitializer: Initializer class that registers omemo providers.
org.jivesoftware.smackx.omemo.OmemoIntegrationTestHelper: Class containing some helper methods for OmemoIntegrationTests.
org.jivesoftware.smackx.omemo.OmemoIntegrationTestHelper.subscribe	(	OmemoManager	OmemoManager	String	): Let Alice subscribe to Bob.
org.jivesoftware.smackx.omemo.OmemoKeyTransportTest: Test keyTransportMessages.
org.jivesoftware.smackx.omemo.OmemoManager: Manager that allows sending messages encrypted with OMEMO. This class also provides some methods useful for a client that implements OMEMO.
org.jivesoftware.smackx.omemo.OmemoManager.OmemoManager	(	XMPPConnection	int	): Private constructor to prevent multiple instances on a single connection (which probably would be bad!).
org.jivesoftware.smackx.omemo.OmemoManager.buildSessionsWith	(	BareJid	): Build OMEMO sessions with devices of contact.
org.jivesoftware.smackx.omemo.OmemoManager.contactSupportsOmemo	(	BareJid	): Returns true, if the contact has any active devices published in a deviceList.
org.jivesoftware.smackx.omemo.OmemoManager.createKeyTransportElement	(	byte[]	byte[]	OmemoDevice	): Create a new KeyTransportElement. This message will contain the AES-Key and IV that can be used eg. for encrypted Jingle file transfer.
org.jivesoftware.smackx.omemo.OmemoManager.decrypt	(	BareJid	Message	): Decrypt an OMEMO message. This method comes handy when dealing with messages that were not automatically decrypted by smack-omemo, eg. MAM query messages.
org.jivesoftware.smackx.omemo.OmemoManager.decryptMamQueryResult	(	MamManager.MamQueryResult	): Return a list of all OMEMO messages that were found in the MAM query result, that could be successfully decrypted. Normal cleartext messages are also added to this list.
org.jivesoftware.smackx.omemo.OmemoManager.distrustOmemoIdentity	(	OmemoDevice	OmemoFingerprint	): Distrust the fingerprint/OmemoDevice tuple. The fingerprint must be the lowercase, hexadecimal fingerprint of the identityKey of the device and must be of length 64.
org.jivesoftware.smackx.omemo.OmemoManager.encrypt	(	ArrayList	String	): OMEMO encrypt a cleartext message for multiple recipients.
org.jivesoftware.smackx.omemo.OmemoManager.encrypt	(	BareJid	String	): OMEMO encrypt a cleartext message for a single recipient.
org.jivesoftware.smackx.omemo.OmemoManager.encrypt	(	MultiUserChat	String	): Encrypt a message for all recipients in the MultiUserChat.
org.jivesoftware.smackx.omemo.OmemoManager.encryptForExistingSessions	(	CannotEstablishOmemoSessionException	String	): Encrypt a message for all users we could build a session with successfully in a previous attempt. This method can come in handy as a fallback when encrypting a message fails due to devices we cannot build a session with.
org.jivesoftware.smackx.omemo.OmemoManager.finishMessage	(	OmemoVAxolotlElement	): Create a new Message from a encrypted OmemoMessageElement. Add ourselves as the sender and the encrypted element. Also tell the server to store the message despite a possible missing body. The body will be set to a hint message that we are using OMEMO.
org.jivesoftware.smackx.omemo.OmemoManager.getActiveFingerprints	(	BareJid	): Return all fingerprints of active devices of a contact.
org.jivesoftware.smackx.omemo.OmemoManager.getConnection	(	): Get our connection.
org.jivesoftware.smackx.omemo.OmemoManager.getDeviceId	(	): Return the deviceId of this OmemoManager.
org.jivesoftware.smackx.omemo.OmemoManager.getInstanceFor	(	XMPPConnection	): Get an instance of the OmemoManager for the given connection. This method creates the OmemoManager for the stored defaultDeviceId of the connections user. If there is no such id is stored, it uses a fresh deviceId and sets that as defaultDeviceId instead.
org.jivesoftware.smackx.omemo.OmemoManager.getInstanceFor	(	XMPPConnection	Integer	): Get an instance of the OmemoManager for the given connection and deviceId.
org.jivesoftware.smackx.omemo.OmemoManager.getOmemoService	(	): Return the OMEMO service object.
org.jivesoftware.smackx.omemo.OmemoManager.getOurFingerprint	(	): Return the fingerprint of our identity key.
org.jivesoftware.smackx.omemo.OmemoManager.getOwnDevice	(	): Return the OmemoDevice of the user.
org.jivesoftware.smackx.omemo.OmemoManager.getOwnJid	(	): Return the BareJid of the user.
org.jivesoftware.smackx.omemo.OmemoManager.initialize	(	): Initializes the OmemoManager. This method is called automatically once the client logs into the server successfully.
org.jivesoftware.smackx.omemo.OmemoManager.isDecidedOmemoIdentity	(	OmemoDevice	OmemoFingerprint	): Returns true, if the fingerprint/OmemoDevice tuple is decided by the user. The fingerprint must be the lowercase, hexadecimal fingerprint of the identityKey of the device and must be of length 64.
org.jivesoftware.smackx.omemo.OmemoManager.isTrustedOmemoIdentity	(	OmemoDevice	OmemoFingerprint	): Returns true, if the fingerprint/OmemoDevice tuple is trusted, otherwise false. The fingerprint must be the lowercase, hexadecimal fingerprint of the identityKey of the device and must be of length 64.
org.jivesoftware.smackx.omemo.OmemoManager.multiUserChatSupportsOmemo	(	EntityBareJid	): Returns true, if the MUC with the EntityBareJid multiUserChat is non-anonymous and members only (prerequisite for OMEMO encryption in MUC).
org.jivesoftware.smackx.omemo.OmemoManager.notifyOmemoMessageReceived	(	String	Message	Message	OmemoMessageInformation	): Notify all registered OmemoMessageListeners about a received OmemoMessage.
org.jivesoftware.smackx.omemo.OmemoManager.notifyOmemoMucMessageReceived	(	MultiUserChat	BareJid	String	Message	Message	OmemoMessageInformation	): Notify all registered OmemoMucMessageListeners of an incoming OmemoMessageElement in a MUC.
org.jivesoftware.smackx.omemo.OmemoManager.purgeDevices	(	): Clear all other devices except this one from our device list and republish the list.
org.jivesoftware.smackx.omemo.OmemoManager.regenerate	(	): Generate fresh identity keys and bundle and publish it to the server.
org.jivesoftware.smackx.omemo.OmemoManager.requestDeviceListUpdateFor	(	BareJid	): Request a deviceList update from contact contact.
org.jivesoftware.smackx.omemo.OmemoManager.resourceSupportsOmemo	(	FullJid	): Returns true, if the device resource has announced OMEMO support. Throws an IllegalArgumentException if the provided FullJid does not have a resource part.
org.jivesoftware.smackx.omemo.OmemoManager.rotateSignedPreKey	(	): Rotate the signedPreKey published in our OmemoBundle. This should be done every now and then (7-14 days). The old signedPreKey should be kept for some more time (a month or so) to enable decryption of messages that have been sent since the key was changed.
org.jivesoftware.smackx.omemo.OmemoManager.sendRatchetUpdateMessage	(	OmemoDevice	): Send a ratchet update message. This can be used to advance the ratchet of a session in order to maintain forward secrecy.
org.jivesoftware.smackx.omemo.OmemoManager.serverSupportsOmemo	(	XMPPConnection	DomainBareJid	): Returns true, if the Server supports PEP.
org.jivesoftware.smackx.omemo.OmemoManager.shutdown	(	): Remove all active stanza listeners of this manager from the connection. This is somewhat the counterpart of initialize().
org.jivesoftware.smackx.omemo.OmemoManager.stanzaContainsOmemoElement	(	Stanza	): Return true, if the given Stanza contains an OMEMO element 'encrypted'.
org.jivesoftware.smackx.omemo.OmemoManager.throwIfNoServiceSet	(	): Throw an IllegalStateException if no OmemoService is set.
org.jivesoftware.smackx.omemo.OmemoManager.trustOmemoIdentity	(	OmemoDevice	OmemoFingerprint	): Trust that a fingerprint belongs to an OmemoDevice. The fingerprint must be the lowercase, hexadecimal fingerprint of the identityKey of the device and must be of length 64.
org.jivesoftware.smackx.omemo.OmemoMessageSendingTest: Test message sending.
org.jivesoftware.smackx.omemo.OmemoMessageSendingTest.messageSendingTest	(	): This Test tests sending and receiving messages. Alice and Bob create fresh devices, then they add another to their rosters. Next they build sessions with one another and Alice sends a message to Bob. After receiving and successfully decrypting the message, its tested, if Bob publishes a new Bundle. After that Bob replies to the message and its tested, whether Alice can decrypt the message and if she does NOT publish a new Bundle.
org.jivesoftware.smackx.omemo.OmemoService: This class contains OMEMO related logic and registers listeners etc.
org.jivesoftware.smackx.omemo.OmemoService.OmemoCarbonCopyListener: StanzaListener that listens for incoming OmemoElements that ARE sent in carbons.
org.jivesoftware.smackx.omemo.OmemoService.OmemoService	(	): Create a new OmemoService object. This should only happen once. When the service gets created, it tries a placeholder crypto function in order to test, if all necessary algorithms are available on the system.
org.jivesoftware.smackx.omemo.OmemoService.OmemoStanzaListener: StanzaListener that listens for incoming omemoElements that are NOT send via carbons.
org.jivesoftware.smackx.omemo.OmemoService.buildOrCreateOmemoSessionsFromBundles	(	OmemoManager	BareJid	): Build sessions for all devices of the contact that we do not have a session with yet.
org.jivesoftware.smackx.omemo.OmemoService.buildSessionFromOmemoBundle	(	OmemoManager	OmemoDevice	boolean	): Build an OmemoSession for the given OmemoDevice.
org.jivesoftware.smackx.omemo.OmemoService.checkAvailableAlgorithms	(	): Test availability of required algorithms. We do this in advance, so we can simplify exception handling later.
org.jivesoftware.smackx.omemo.OmemoService.createDefaultOmemoStoreBackend	(	): Create a default OmemoStore object.
org.jivesoftware.smackx.omemo.OmemoService.decryptMamQueryResult	(	OmemoManager	MamManager.MamQueryResult	): Try to decrypt a mamQueryResult. Note that OMEMO messages can only be decrypted once on a device, so if you try to decrypt a message that has been decrypted earlier in time, the decryption will fail. You should handle message history locally when using OMEMO, since you cannot rely on MAM.
org.jivesoftware.smackx.omemo.OmemoService.decryptOmemoMessageElement	(	OmemoManager	OmemoDevice	OmemoElement	OmemoMessageInformation	): Decrypt a incoming OmemoMessageElement that was sent by the OmemoDevice 'from'.
org.jivesoftware.smackx.omemo.OmemoService.decryptTransportedOmemoKey	(	OmemoManager	OmemoDevice	OmemoElement	OmemoMessageInformation	): Decrypt a messageKey that was transported in an OmemoElement.
org.jivesoftware.smackx.omemo.OmemoService.encryptOmemoMessage	(	OmemoManager	HashMap	Message	): Encrypt the message and return it as an OmemoMessageElement.
org.jivesoftware.smackx.omemo.OmemoService.extractBundleFrom	(	LeafNode	): Extract the OmemoBundleElement of a contact from a LeafNode.
org.jivesoftware.smackx.omemo.OmemoService.extractDeviceListFrom	(	LeafNode	): Extract the OmemoDeviceListElement of a contact from a node containing his OmemoDeviceListElement.
org.jivesoftware.smackx.omemo.OmemoService.fetchBundle	(	OmemoManager	OmemoDevice	): Fetch the OmemoBundleElement of the contact.
org.jivesoftware.smackx.omemo.OmemoService.fetchDeviceList	(	OmemoManager	BareJid	): Directly fetch the device list of a contact.
org.jivesoftware.smackx.omemo.OmemoService.fetchDeviceListNode	(	OmemoManager	BareJid	): Fetch the deviceList node of a contact.
org.jivesoftware.smackx.omemo.OmemoService.getOmemoRatchetUpdateMessage	(	OmemoManager	OmemoDevice	boolean	): Return a new RatchetUpdateMessage.
org.jivesoftware.smackx.omemo.OmemoService.getOmemoStoreBackend	(	): Return the used omemoStore backend. If there is no store backend set yet, set the default one (typically a file-based one).
org.jivesoftware.smackx.omemo.OmemoService.getSender	(	OmemoManager	Stanza	): Return the barejid of the user that sent the message inside the MUC. If the message wasn't sent in a MUC, return null;
org.jivesoftware.smackx.omemo.OmemoService.initialize	(	OmemoManager	): Initialize OMEMO functionality for OmemoManager omemoManager.
org.jivesoftware.smackx.omemo.OmemoService.isMucMessage	(	OmemoManager	Stanza	): Return true, if the user knows a multiUserChat with a jid matching the sender of the stanza.
org.jivesoftware.smackx.omemo.OmemoService.prepareOmemoKeyTransportElement	(	OmemoManager	OmemoDevice	): Prepares a keyTransportElement with a random aes key and iv.
org.jivesoftware.smackx.omemo.OmemoService.prepareOmemoKeyTransportElement	(	OmemoManager	byte[]	byte[]	OmemoDevice	): Prepare a KeyTransportElement with aesKey and iv.
org.jivesoftware.smackx.omemo.OmemoService.processBundle	(	OmemoManager	T_Bundle	OmemoDevice	): Process a received bundle. Typically that includes saving keys and building a session.
org.jivesoftware.smackx.omemo.OmemoService.processLocalMessage	(	OmemoManager	BareJid	Message	): Decrypt a given OMEMO encrypted message. Return null, if there is no OMEMO element in the message, otherwise try to decrypt the message and return a ClearTextMessage object.
org.jivesoftware.smackx.omemo.OmemoService.processReceivingMessage	(	OmemoManager	OmemoDevice	OmemoElement	OmemoMessageInformation	): Process a received message. Try to decrypt it in case we are a recipient device. If we are not a recipient device, return null.
org.jivesoftware.smackx.omemo.OmemoService.processSendingMessage	(	OmemoManager	ArrayList	Message	): Encrypt a clear text message for the given recipients. The body of the message will be encrypted.
org.jivesoftware.smackx.omemo.OmemoService.processSendingMessage	(	OmemoManager	BareJid	Message	): Encrypt a clear text message for the given recipient. The body of the message will be encrypted.
org.jivesoftware.smackx.omemo.OmemoService.publishBundle	(	OmemoManager	): Publish a fresh bundle to the server.
org.jivesoftware.smackx.omemo.OmemoService.publishDeviceIdIfNeeded	(	OmemoManager	boolean	): Publish our deviceId in case it is not on the list already. This method calls publishDeviceIdIfNeeded(omemoManager, deleteOtherDevices, false).
org.jivesoftware.smackx.omemo.OmemoService.publishDeviceIdIfNeeded	(	OmemoManager	boolean	boolean	): Publish our deviceId in case it is not on the list already.
org.jivesoftware.smackx.omemo.OmemoService.publishDeviceIds	(	OmemoManager	OmemoDeviceListElement	): Publish the given deviceList to the server.
org.jivesoftware.smackx.omemo.OmemoService.refreshDeviceList	(	OmemoManager	BareJid	): Refresh the deviceList of contact and merge it with the one stored locally.
org.jivesoftware.smackx.omemo.OmemoService.refreshOwnDeviceList	(	OmemoManager	): Refresh our deviceList from the server.
org.jivesoftware.smackx.omemo.OmemoService.regenerate	(	OmemoManager	Integer	): Generate a new unique deviceId and regenerate new keys.
org.jivesoftware.smackx.omemo.OmemoService.registerDeviceListListener	(	OmemoManager	): Register a PEPListener that listens for deviceList updates.
org.jivesoftware.smackx.omemo.OmemoService.registerOmemoMessageStanzaListeners	(	OmemoManager	): Listen for incoming messages and carbons, decrypt them and pass the cleartext messages to the registered OmemoMessageListeners.
org.jivesoftware.smackx.omemo.OmemoService.removeStaleDevicesIfNeeded	(	OmemoManager	Set	): Remove stale devices from our device list. This does only delete devices, if that's configured in OmemoConfiguration.
org.jivesoftware.smackx.omemo.OmemoService.sendOmemoRatchetUpdateMessage	(	OmemoManager	OmemoDevice	boolean	): Send an OmemoRatchetUpdateMessage to recipient. If preKeyMessage is true, the message will be encrypted using a freshly built session. This can be used to repair broken sessions.
org.jivesoftware.smackx.omemo.OmemoService.setInstance	(	OmemoService	): Set singleton instance. Throws an IllegalStateException, if there is already a service set as instance.
org.jivesoftware.smackx.omemo.OmemoService.setOmemoStoreBackend	(	OmemoStore	): Set an omemoStore as backend. Throws an IllegalStateException, if there is already a backend set.
org.jivesoftware.smackx.omemo.OmemoService.subscribeToDeviceLists	(	OmemoManager	): Subscribe to the device lists of our contacts using PEP.
org.jivesoftware.smackx.omemo.OmemoSessionRenegotiationTest: Test session renegotiation.
org.jivesoftware.smackx.omemo.OmemoStore: Class that presents some methods that are used to load/generate/store keys and session data needed for OMEMO.
org.jivesoftware.smackx.omemo.OmemoStore.OmemoStore	(	): Create a new OmemoStore.
org.jivesoftware.smackx.omemo.OmemoStore.changeSignedPreKey	(	OmemoManager	): Renew our singed preKey. This should be done once every 7-14 days. The old signed PreKey should be kept for around a month or so (look it up in the XEP).
org.jivesoftware.smackx.omemo.OmemoStore.containsRawSession	(	OmemoManager	OmemoDevice	): Return true, if we have a session with the device, otherwise false. Hint for Signal: Do not try 'return getSession() != null' since this will create a new session.
org.jivesoftware.smackx.omemo.OmemoStore.createOmemoSession	(	OmemoManager	OmemoDevice	T_IdKey	): Create a new concrete OmemoSession with a contact.
org.jivesoftware.smackx.omemo.OmemoStore.createOmemoSessionsFromRawSessions	(	OmemoManager	BareJid	HashMap	): Create OmemoSession objects for all T_Sess objects of the contact. The T_Sess objects will be wrapped inside a OmemoSession for every device of the contact.
org.jivesoftware.smackx.omemo.OmemoStore.distrustOmemoIdentity	(	OmemoManager	OmemoDevice	T_IdKey	): Distrust an OmemoIdentity. This involved marking the key as distrusted.
org.jivesoftware.smackx.omemo.OmemoStore.forgetOmemoSessions	(	OmemoManager	): Forget all omemoSessions of the omemoManager from cache. This will not remove the sessions from persistent memory!
org.jivesoftware.smackx.omemo.OmemoStore.generateOmemoIdentityKeyPair	(	): Generate a new IdentityKeyPair. We should always have only one pair and usually keep this for a long time.
org.jivesoftware.smackx.omemo.OmemoStore.generateOmemoPreKeys	(	int	int	): Generate 'count' new PreKeys beginning with id 'startId'. These preKeys are published and can be used by contacts to establish sessions with us.
org.jivesoftware.smackx.omemo.OmemoStore.generateOmemoSignedPreKey	(	T_IdKeyPair	int	): Generate a new signed preKey.
org.jivesoftware.smackx.omemo.OmemoStore.getDateOfLastReceivedMessage	(	OmemoManager	OmemoDevice	): Return the date in millis of the last message that was received from device 'from'.
org.jivesoftware.smackx.omemo.OmemoStore.getDateOfLastSignedPreKeyRenewal	(	OmemoManager	): Get the date in millis of the last time the signed preKey was renewed.
org.jivesoftware.smackx.omemo.OmemoStore.getDefaultDeviceId	(	BareJid	): Return the default deviceId for a user. The defaultDeviceId will be used when the OmemoManager gets instantiated without passing a specific deviceId. If no default id is set, return -1;
org.jivesoftware.smackx.omemo.OmemoStore.getFingerprint	(	OmemoManager	): Return our identityKeys fingerprint.
org.jivesoftware.smackx.omemo.OmemoStore.getFingerprint	(	OmemoManager	OmemoDevice	): Return the fingerprint of the given devices announced identityKey.
org.jivesoftware.smackx.omemo.OmemoStore.getOmemoSessionOf	(	OmemoManager	OmemoDevice	): Return the OmemoSession for the OmemoDevice. If there is no OmemoSession for the device yet, build one from local raw session material.
org.jivesoftware.smackx.omemo.OmemoStore.initializeOmemoSessions	(	OmemoManager	): Preload all OMEMO sessions for our devices and our contacts from existing raw sessions.
org.jivesoftware.smackx.omemo.OmemoStore.isAvailableDeviceId	(	OmemoManager	int	): Check, if our freshly generated deviceId is available (unique) in our deviceList.
org.jivesoftware.smackx.omemo.OmemoStore.isDecidedOmemoIdentity	(	OmemoManager	OmemoDevice	T_IdKey	): Did the user yet made a decision about whether to trust or distrust this device?
org.jivesoftware.smackx.omemo.OmemoStore.isFreshInstallation	(	OmemoManager	): Return true if this is a fresh installation.
org.jivesoftware.smackx.omemo.OmemoStore.isTrustedOmemoIdentity	(	OmemoManager	OmemoDevice	T_IdKey	): Decide, whether a identityKey of a device is trusted or not. If you want to use this module, you should memorize, whether the user has trusted this key or not, since the owner of the identityKey will be able to read sent messages when this method returned 'true' for their identityKey. Either you let the user decide whether you trust a key every time you see a new key, or you implement something like 'blind trust' (see https://gultsch.de/trust.html).
org.jivesoftware.smackx.omemo.OmemoStore.keyUtil	(	): Return a concrete KeyUtil object that we can use as a utility to create keys etc.
org.jivesoftware.smackx.omemo.OmemoStore.loadAllRawSessionsOf	(	OmemoManager	BareJid	): Load all crypto-lib specific session objects of contact 'contact'.
org.jivesoftware.smackx.omemo.OmemoStore.loadCachedDeviceList	(	OmemoManager	BareJid	): Load a list of deviceIds from contact 'contact' from the local cache.
org.jivesoftware.smackx.omemo.OmemoStore.loadCurrentSignedPreKeyId	(	OmemoManager	): Return the id of the currently used signed preKey. This is used to avoid collisions when generating a new signedPreKey.
org.jivesoftware.smackx.omemo.OmemoStore.loadLastPreKeyId	(	OmemoManager	): Return the id of the last generated preKey. This is used to generate new preKeys without preKeyId collisions.
org.jivesoftware.smackx.omemo.OmemoStore.loadOmemoIdentityKey	(	OmemoManager	OmemoDevice	): Load the public identityKey of the device.
org.jivesoftware.smackx.omemo.OmemoStore.loadOmemoIdentityKeyPair	(	OmemoManager	): Load our identityKeyPair from storage.
org.jivesoftware.smackx.omemo.OmemoStore.loadOmemoPreKey	(	OmemoManager	int	): Load the preKey with id 'preKeyId' from storage.
org.jivesoftware.smackx.omemo.OmemoStore.loadOmemoPreKeys	(	OmemoManager	): Return all our current OmemoPreKeys.
org.jivesoftware.smackx.omemo.OmemoStore.loadOmemoSignedPreKey	(	OmemoManager	int	): Return the signedPreKey with the id 'singedPreKeyId'.
org.jivesoftware.smackx.omemo.OmemoStore.loadOmemoSignedPreKeys	(	OmemoManager	): Load all our signed PreKeys.
org.jivesoftware.smackx.omemo.OmemoStore.loadRawSession	(	OmemoManager	OmemoDevice	): Load the crypto-lib specific session object of the device from storage.
org.jivesoftware.smackx.omemo.OmemoStore.mergeCachedDeviceList	(	OmemoManager	BareJid	OmemoDeviceListElement	): Merge the received OmemoDeviceListElement with the one we already have. If we had none, the received one is saved.
org.jivesoftware.smackx.omemo.OmemoStore.packOmemoBundle	(	OmemoManager	): Pack a OmemoBundleElement containing our key material. If we used up n preKeys since we last published our bundle, generate n new preKeys and add them to the bundle. We should always publish TARGET_PRE_KEY_COUNT keys.
org.jivesoftware.smackx.omemo.OmemoStore.purgeOwnDeviceKeys	(	OmemoManager	): Delete this device's IdentityKey, PreKeys, SignedPreKeys and Sessions.
org.jivesoftware.smackx.omemo.OmemoStore.regenerate	(	OmemoManager	): Generate a new Identity (deviceId, identityKeys, preKeys...).
org.jivesoftware.smackx.omemo.OmemoStore.removeAllRawSessionsOf	(	OmemoManager	BareJid	): Remove all crypto-lib specific session of a contact.
org.jivesoftware.smackx.omemo.OmemoStore.removeOldSignedPreKeys	(	OmemoManager	): Remove the oldest signedPreKey until there are only MAX_NUMBER_OF_STORED_SIGNED_PREKEYS left.
org.jivesoftware.smackx.omemo.OmemoStore.removeOmemoPreKey	(	OmemoManager	int	): remove a preKey from storage. This is called, when a contact used one of our preKeys to establish a session with us.
org.jivesoftware.smackx.omemo.OmemoStore.removeOmemoSignedPreKey	(	OmemoManager	int	): Remove a signedPreKey from storage.
org.jivesoftware.smackx.omemo.OmemoStore.removeRawSession	(	OmemoManager	OmemoDevice	): Remove a crypto-lib specific session from storage.
org.jivesoftware.smackx.omemo.OmemoStore.setDateOfLastReceivedMessage	(	OmemoManager	OmemoDevice	): Set the date in millis of the last message that was received from device 'from' to now.
org.jivesoftware.smackx.omemo.OmemoStore.setDateOfLastReceivedMessage	(	OmemoManager	OmemoDevice	Date	): Set the date in millis of the last message that was received from device 'from' to 'date'.
org.jivesoftware.smackx.omemo.OmemoStore.setDateOfLastSignedPreKeyRenewal	(	OmemoManager	): Store the date of the last preKey renewal in the omemoStore.
org.jivesoftware.smackx.omemo.OmemoStore.setDateOfLastSignedPreKeyRenewal	(	OmemoManager	Date	): Set the date in millis of the last time the signed preKey was renewed.
org.jivesoftware.smackx.omemo.OmemoStore.setDefaultDeviceId	(	BareJid	int	): Set the default deviceId of a user.
org.jivesoftware.smackx.omemo.OmemoStore.storeCachedDeviceList	(	OmemoManager	BareJid	CachedDeviceList	): Store the DeviceList of the contact in local storage. See this as a cache.
org.jivesoftware.smackx.omemo.OmemoStore.storeCurrentSignedPreKeyId	(	OmemoManager	int	): Store the id of the currently used signedPreKey.
org.jivesoftware.smackx.omemo.OmemoStore.storeLastPreKeyId	(	OmemoManager	int	): Store the id of the last preKey we generated.
org.jivesoftware.smackx.omemo.OmemoStore.storeOmemoIdentityKey	(	OmemoManager	OmemoDevice	T_IdKey	): Store the public identityKey of the device.
org.jivesoftware.smackx.omemo.OmemoStore.storeOmemoIdentityKeyPair	(	OmemoManager	T_IdKeyPair	): Store our identityKeyPair in storage. It would be a cool feature, if the key could be stored in a encrypted database or something similar.
org.jivesoftware.smackx.omemo.OmemoStore.storeOmemoPreKey	(	OmemoManager	int	T_PreKey	): Store a PreKey in storage.
org.jivesoftware.smackx.omemo.OmemoStore.storeOmemoPreKeys	(	OmemoManager	HashMap	): Store a whole bunch of preKeys.
org.jivesoftware.smackx.omemo.OmemoStore.storeOmemoSignedPreKey	(	OmemoManager	int	T_SigPreKey	): Store a signedPreKey in storage.
org.jivesoftware.smackx.omemo.OmemoStore.storeRawSession	(	OmemoManager	OmemoDevice	T_Sess	): Store a crypto-lib specific session to storage.
org.jivesoftware.smackx.omemo.OmemoStore.trustOmemoIdentity	(	OmemoManager	OmemoDevice	T_IdKey	): Trust an OmemoIdentity. This involves marking the key as trusted.
org.jivesoftware.smackx.omemo.OmemoStoreTest: Test the OmemoStore.
org.jivesoftware.smackx.omemo.element.OmemoBundleElement: Class that represents an OMEMO Bundle element. TODO: Move functionality to here.
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement: OMEMO device bundle as described here: https://xmpp.org/extensions/xep-0384.html#usecases-announcing (Example 3).
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement.OmemoBundleVAxolotlElement	(	int	String	String	String	HashMap	): Constructor to create a Bundle Element from base64 Strings.
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement.OmemoBundleVAxolotlElement	(	int	byte[]	byte[]	byte[]	HashMap	): Constructor to create a Bundle Element from decoded byte arrays.
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement.getIdentityKey	(	): Return the public identityKey of the bundles owner. This can be used to check the signedPreKeys signature. The fingerprint of this key is, what the user has to verify.
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement.getPreKey	(	int	): Return a single preKey from the map.
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement.getPreKeys	(	): Return the HashMap of preKeys in the bundle. The map uses the preKeys ids as key and the preKeys as value.
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement.getSignedPreKey	(	): Return the signedPreKey of the OmemoBundleElement.
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement.getSignedPreKeyId	(	): Return the id of the signedPreKey in the bundle.
org.jivesoftware.smackx.omemo.element.OmemoBundleVAxolotlElement.getSignedPreKeySignature	(	): Get the signature of the signedPreKey.
org.jivesoftware.smackx.omemo.element.OmemoDeviceListElement: A OMEMO device list update containing the IDs of all active devices of a contact.
org.jivesoftware.smackx.omemo.element.OmemoDeviceListVAxolotlElement: The OMEMO device list element with the legacy Axolotl namespace.
org.jivesoftware.smackx.omemo.element.OmemoElement: Class that represents a OmemoElement. TODO: Move functionality here.
org.jivesoftware.smackx.omemo.element.OmemoElement.OmemoElement	(	OmemoElement.OmemoHeader	byte[]	): Create a new OmemoMessageElement from a header and a payload.
org.jivesoftware.smackx.omemo.element.OmemoElement.OmemoHeader: Header element of the message. The header contains information about the sender and the encrypted keys for the recipients, as well as the iv element for AES.
org.jivesoftware.smackx.omemo.element.OmemoElement.OmemoHeader.Key: Small class to collect key (byte[]), its id and whether its a prekey or not.
org.jivesoftware.smackx.omemo.element.OmemoElement.OmemoHeader.getSid	(	): Return the deviceId of the sender of the message.
org.jivesoftware.smackx.omemo.element.OmemoElement.getPayload	(	): Return the payload of the message.
org.jivesoftware.smackx.omemo.element.OmemoVAxolotlElement: An OMEMO (PreKey)WhisperMessage element.
org.jivesoftware.smackx.omemo.element.OmemoVAxolotlElement.OmemoVAxolotlElement	(	OmemoHeader	byte[]	): Create a new OmemoMessageElement from a header and a payload.
org.jivesoftware.smackx.omemo.exceptions.CannotEstablishOmemoSessionException: Exception gets thrown when we are unable to establish a session with a device for some reason.
org.jivesoftware.smackx.omemo.exceptions.CannotEstablishOmemoSessionException.requiresThrowing	(	): Return true, if there is at least one recipient, which would not be able to decipher the message on any of their devices.
org.jivesoftware.smackx.omemo.exceptions.CorruptedOmemoKeyException: Exception gets thrown, when an invalid key is encountered.
org.jivesoftware.smackx.omemo.exceptions.CryptoFailedException: Exception gets thrown when some cryptographic function failed.
org.jivesoftware.smackx.omemo.exceptions.NoOmemoSupportException: Exception that indicates, that a MUC does not support OMEMO.
org.jivesoftware.smackx.omemo.exceptions.NoRawSessionException: Exception that gets thrown whenever a OmemoMessage arrives that no OmemoSession was found for to decrypt it.
org.jivesoftware.smackx.omemo.exceptions.UndecidedOmemoIdentityException: Exception that is thrown when the user tries to encrypt a message for a undecided device.
org.jivesoftware.smackx.omemo.exceptions.UndecidedOmemoIdentityException.getUntrustedDevices	(	): Return the HashSet of untrusted devices.
org.jivesoftware.smackx.omemo.exceptions.UndecidedOmemoIdentityException.join	(	UndecidedOmemoIdentityException	): Add all untrusted devices of another Exception to this Exceptions HashSet of untrusted devices.
org.jivesoftware.smackx.omemo.internal.CachedDeviceList: This class is used to represent device lists of contacts. There are active devices (a set of device ids, which was published with the last device list update) and inactive devices (set of devices that once were active, but are not included in recent list updates). Both kinds are cached by the client. When a device that was active in the last update is not included in a new update, it becomes an inactive device. Vice versa, inactive devices can also become active again, by being included in the latest device list update.  The client ensures, that his own device id is on the list of active devices, as soon as he gets online.
org.jivesoftware.smackx.omemo.internal.CachedDeviceList.addDevice	(	int	): Add a device to the list of active devices.
org.jivesoftware.smackx.omemo.internal.CachedDeviceList.contains	(	int	): Returns true if deviceId is either in the list of active or inactive devices.
org.jivesoftware.smackx.omemo.internal.CachedDeviceList.getActiveDevices	(	): Returns all active devices. Active devices are all devices that were in the latest DeviceList update.
org.jivesoftware.smackx.omemo.internal.CachedDeviceList.getAllDevices	(	): Returns an OmemoDeviceListElement containing all devices (active and inactive).
org.jivesoftware.smackx.omemo.internal.CachedDeviceList.getInactiveDevices	(	): Return all inactive devices. Inactive devices are devices which were in a past DeviceList update once, but were not included in the latest update.
org.jivesoftware.smackx.omemo.internal.CachedDeviceList.merge	(	Set	): Merge a device list update into the CachedDeviceList. The source code should be self explanatory.
org.jivesoftware.smackx.omemo.internal.CipherAndAuthTag: Encapsulate Cipher and AuthTag.
org.jivesoftware.smackx.omemo.internal.CiphertextTuple: Bundles a decrypted ciphertext together with information about the message type.
org.jivesoftware.smackx.omemo.internal.CiphertextTuple.CiphertextTuple	(	byte[]	int	): Create a new CiphertextTuple.
org.jivesoftware.smackx.omemo.internal.CiphertextTuple.getCiphertext	(	): Return the ciphertext.
org.jivesoftware.smackx.omemo.internal.CiphertextTuple.getMessageType	(	): Return the messageType.
org.jivesoftware.smackx.omemo.internal.CiphertextTuple.isPreKeyMessage	(	): Returns true if this is a preKeyMessage.
org.jivesoftware.smackx.omemo.internal.ClearTextMessage: Class that bundles a decrypted message together with the original message and some information about the encryption.
org.jivesoftware.smackx.omemo.internal.ClearTextMessage.getBody	(	): Return the body of the decrypted message.
org.jivesoftware.smackx.omemo.internal.ClearTextMessage.getMessageInformation	(	): Return the OmemoMessageInformation.
org.jivesoftware.smackx.omemo.internal.ClearTextMessage.getOriginalMessage	(	): Return the original Message object.
org.jivesoftware.smackx.omemo.internal.IdentityKeyWrapper: Wrapper for IdentityKey objects.
org.jivesoftware.smackx.omemo.internal.OmemoDevice: Class that combines a BareJid and a deviceId.
org.jivesoftware.smackx.omemo.internal.OmemoDevice.OmemoDevice	(	BareJid	int	): Create a new OmemoDevice.
org.jivesoftware.smackx.omemo.internal.OmemoDevice.getDeviceId	(	): Return the OMEMO device Id of the device.
org.jivesoftware.smackx.omemo.internal.OmemoDevice.getJid	(	): Return the BareJid of the device owner.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation: Class that contains information about a decrypted message (eg. which key was used, if it was a carbon...).
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.OmemoMessageInformation	(	): Empty constructor.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.OmemoMessageInformation	(	IdentityKeyWrapper	OmemoDevice	CARBON	): Creates a new OmemoMessageInformation object. Its assumed, that this is about an OMEMO message.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.OmemoMessageInformation	(	IdentityKeyWrapper	OmemoDevice	CARBON	boolean	): Create a new OmemoMessageInformation.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.getCarbon	(	): Return the carbon type.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.getSenderDevice	(	): Return the sender device.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.getSenderIdentityKey	(	): Return the sender devices identityKey.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.isOmemoMessage	(	): Return true, if this is (was) an OMEMO message.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.setCarbon	(	CARBON	): Set the carbon type.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.setSenderDevice	(	OmemoDevice	): Set the sender device.
org.jivesoftware.smackx.omemo.internal.OmemoMessageInformation.setSenderIdentityKey	(	IdentityKeyWrapper	): Set the sender devices identityKey.
org.jivesoftware.smackx.omemo.internal.OmemoSession: This class represents a OMEMO session between us and another device.
org.jivesoftware.smackx.omemo.internal.OmemoSession.OmemoSession	(	OmemoManager	OmemoStore	OmemoDevice	): Another constructor used when they establish the session with us.
org.jivesoftware.smackx.omemo.internal.OmemoSession.OmemoSession	(	OmemoManager	OmemoStore	OmemoDevice	T_IdKey	): Constructor used when we establish the session.
org.jivesoftware.smackx.omemo.internal.OmemoSession.createCipher	(	OmemoDevice	): Create a new SessionCipher used to encrypt/decrypt keys. The cipher typically implements the ratchet and KDF-chains.
org.jivesoftware.smackx.omemo.internal.OmemoSession.decryptMessageElement	(	OmemoElement	CipherAndAuthTag	): Use the symmetric key in cipherAndAuthTag to decrypt the payload of the omemoMessage. The decrypted payload will be the body of the returned Message.
org.jivesoftware.smackx.omemo.internal.OmemoSession.decryptMessageElement	(	OmemoElement	int	): Try to decrypt the message. First decrypt the message key using our session with the sender. Second use the decrypted key to decrypt the message. The decrypted content of the 'encrypted'-element becomes the body of the clear text message.
org.jivesoftware.smackx.omemo.internal.OmemoSession.decryptMessageKey	(	byte[]	): Decrypt a messageKey using our sessionCipher. We can use that key to decipher the actual message. Same as encryptMessageKey, just the other way round.
org.jivesoftware.smackx.omemo.internal.OmemoSession.decryptTransportedKey	(	OmemoElement	int	): Try to decrypt the transported message key using the double ratchet session.
org.jivesoftware.smackx.omemo.internal.OmemoSession.encryptMessageKey	(	byte[]	): Encrypt a message key for the recipient. This key can be deciphered by the recipient with its corresponding session cipher. The key is then used to decipher the message.
org.jivesoftware.smackx.omemo.internal.OmemoSession.getFingerprint	(	): Return the fingerprint of the contacts identityKey.
org.jivesoftware.smackx.omemo.internal.OmemoSession.getIdentityKey	(	): Return the identityKey of the session.
org.jivesoftware.smackx.omemo.internal.OmemoSession.getPreKeyId	(	): Get the id of the preKey used to establish the session.
org.jivesoftware.smackx.omemo.internal.OmemoSession.setIdentityKey	(	T_IdKey	): Set the identityKey of the remote device.
org.jivesoftware.smackx.omemo.listener.OmemoMessageListener: Listener interface that allows implementations to receive decrypted OMEMO messages.
org.jivesoftware.smackx.omemo.listener.OmemoMessageListener.onOmemoKeyTransportReceived	(	CipherAndAuthTag	Message	Message	OmemoMessageInformation	): Gets called, whenever an OmemoElement without a body (an OmemoKeyTransportElement) is received.
org.jivesoftware.smackx.omemo.listener.OmemoMessageListener.onOmemoMessageReceived	(	String	Message	Message	OmemoMessageInformation	): Gets called, whenever an OmemoMessage has been received and was successfully decrypted.
org.jivesoftware.smackx.omemo.listener.OmemoMucMessageListener: Listener interface that allows implementations to receive decrypted OMEMO MUC messages.
org.jivesoftware.smackx.omemo.listener.OmemoMucMessageListener.onOmemoKeyTransportReceived	(	MultiUserChat	BareJid	CipherAndAuthTag	Message	Message	OmemoMessageInformation	): Gets called, whenever an OmemoElement without a body (an OmemoKeyTransportElement) is received.
org.jivesoftware.smackx.omemo.listener.OmemoMucMessageListener.onOmemoMucMessageReceived	(	MultiUserChat	BareJid	String	Message	Message	OmemoMessageInformation	): Gets called whenever an OMEMO message has been received in a MultiUserChat and successfully decrypted.
org.jivesoftware.smackx.omemo.provider.OmemoBundleVAxolotlProvider: Smack ExtensionProvider that parses OMEMO bundle element into OmemoBundleElement objects.
org.jivesoftware.smackx.omemo.provider.OmemoDeviceListVAxolotlProvider: Smack ExtensionProvider that parses OMEMO device list element into OmemoDeviceListElement objects.
org.jivesoftware.smackx.omemo.provider.OmemoVAxolotlProvider: Smack ExtensionProvider that parses incoming OMEMO Message element into OmemoMessageElement objects.
org.jivesoftware.smackx.omemo.signal.SignalFileBasedOmemoStore: Implementation of a FileBasedOmemoStore for the smack-omemo-signal module.
org.jivesoftware.smackx.omemo.signal.SignalOmemoKeyUtil: Concrete implementation of the KeyUtil for an implementation using the Signal library.
org.jivesoftware.smackx.omemo.signal.SignalOmemoService: Concrete implementation of the OmemoService using the Signal library.
org.jivesoftware.smackx.omemo.signal.SignalOmemoSession: Concrete implementation of the OmemoSession using the Signal library.
org.jivesoftware.smackx.omemo.signal.SignalOmemoSession.SignalOmemoSession	(	OmemoManager	OmemoStore	OmemoDevice	): Constructor used when we initiate a new Session with the remote user.
org.jivesoftware.smackx.omemo.signal.SignalOmemoSession.SignalOmemoSession	(	OmemoManager	OmemoStore	OmemoDevice	IdentityKey	): Constructor used when the remote user initialized the session using a PreKeyOmemoMessage.
org.jivesoftware.smackx.omemo.signal.SignalOmemoStore: Implementation of the OmemoStore using the Signal library.
org.jivesoftware.smackx.omemo.signal.SignalOmemoStoreConnector: Class that adapts libsignal-protocol-java's Store classes to the OmemoStore class.
org.jivesoftware.smackx.omemo.signal.SignalOmemoStoreConnector.getLocalRegistrationId	(	): We don't use this.
org.jivesoftware.smackx.omemo.util.OmemoConstants: Some constants related to OMEMO.
org.jivesoftware.smackx.omemo.util.OmemoConstants.Crypto: Information about the keys used for message encryption.
org.jivesoftware.smackx.omemo.util.OmemoConstants.PEP_NODE_BUNDLE_FROM_DEVICE_ID	(	int	): Return the node name of the PEP node containing the device bundle of the device with device id deviceId.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil: Class that is used to convert bytes to keys and vice versa.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.Bundle: Bundle related methods.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.Bundle.bundles	(	OmemoBundleVAxolotlElement	OmemoDevice	): Break up the OmemoBundleElement into a list of crypto-lib specific bundles (T_PreKey). In case of the signal library, we break the OmemoBundleElement in ~100 PreKeyBundles (one for every transported preKey).
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.Bundle.identityKey	(	OmemoBundleVAxolotlElement	): Extract an IdentityKey from a OmemoBundleElement.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.Bundle.preKeyPublic	(	OmemoBundleVAxolotlElement	int	): Extract the preKey with id 'keyId' from the bundle.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.Bundle.signedPreKeyId	(	OmemoBundleVAxolotlElement	): Extract the id of the transported signedPreKey from the bundle.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.Bundle.signedPreKeyPublic	(	OmemoBundleVAxolotlElement	): Extract a signedPreKey from an OmemoBundleElement.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.Bundle.signedPreKeySignature	(	OmemoBundleVAxolotlElement	): Extract the signature of the signedPreKey in the bundle as a byte array.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.addInBounds	(	int	int	): Add integers modulo MAX_VALUE.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.addressAsOmemoDevice	(	T_Addr	): Convert a crypto-lib specific contact object into an OmemoDevice.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.bundleFromOmemoBundle	(	OmemoBundleVAxolotlElement	OmemoDevice	int	): Build a crypto-lib specific PreKeyBundle (T_Bundle) using a PreKey from the OmemoBundleElement 'bundle'. The PreKeyBundle will contain the identityKey, signedPreKey and signature, as well as a preKey from the OmemoBundleElement.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.createOmemoSession	(	OmemoManager	OmemoStore	OmemoDevice	): Create a new crypto-specific Session object.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.createOmemoSession	(	OmemoManager	OmemoStore	OmemoDevice	T_IdKey	): Create a new concrete OmemoSession with a contact.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.ellipticCurvePublicKeyFromBytes	(	byte[]	): Deserialize an elliptic curve public key from bytes.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.generateOmemoIdentityKeyPair	(	): Generate a new IdentityKeyPair. We should always have only one pair and usually keep this for a long time.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.generateOmemoPreKeys	(	int	int	): Generate 'count' new PreKeys beginning with id 'startId'. These preKeys are published and can be used by contacts to establish sessions with us.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.generateOmemoSignedPreKey	(	T_IdKeyPair	int	): Generate a new signed preKey.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.getFingerprint	(	T_IdKey	): Return the fingerprint of an identityKey.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.identityKeyForBundle	(	T_IdKey	): Prepare an identityKey for transport in an OmemoBundleElement (serialize it).
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.identityKeyFromBytes	(	byte[]	): Deserialize an identityKey from a byte array.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.identityKeyFromPair	(	T_IdKeyPair	): Extract the public identityKey from an identityKeyPair.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.identityKeyPairFromBytes	(	byte[]	): Deserialize an identityKeyPair from a byte array.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.identityKeyPairToBytes	(	T_IdKeyPair	): serialize an identityKeyPair into bytes.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.identityKeyToBytes	(	T_IdKey	): Serialize an identityKey into bytes.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.omemoDeviceAsAddress	(	OmemoDevice	): Convert an OmemoDevice to a crypto-lib specific contact format.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.preKeyForBundle	(	T_PreKey	): Prepare a preKey for transport in an OmemoBundleElement.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.preKeyFromBytes	(	byte[]	): Deserialize a preKey from a byte array.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.preKeyPublicFromBytes	(	byte[]	): Deserialize a public preKey from bytes.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.preKeyPublicKeyForBundle	(	T_ECPub	): Prepare an elliptic curve preKey for transport in an OmemoBundleElement.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.preKeyPublisKeysForBundle	(	HashMap	): Prepare a whole bunche of preKeys for transport.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.preKeyToBytes	(	T_PreKey	): Serialize a preKey into a byte array.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.prettyFingerprint	(	String	): Split the fingerprint in blocks of 8 characters with spaces between.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.rawSessionFromBytes	(	byte[]	): Deserialize a raw OMEMO Session from bytes.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.rawSessionToBytes	(	T_Sess	): Serialize a raw OMEMO session into a byte array.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.signedPreKeyFromBytes	(	byte[]	): Deserialize a signedPreKey from a byte array.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.signedPreKeyIdFromKey	(	T_SigPreKey	): return the id of the given signedPreKey.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.signedPreKeyPublicForBundle	(	T_SigPreKey	): Prepare a public signedPreKey for transport in a bundle.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.signedPreKeyPublicFromBytes	(	byte[]	): Deserialize a public signedPreKey from bytes.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.signedPreKeySignatureFromKey	(	T_SigPreKey	): Extract the signature from a signedPreKey.
org.jivesoftware.smackx.omemo.util.OmemoKeyUtil.signedPreKeyToBytes	(	T_SigPreKey	): Serialize a signedPreKey into a byte array.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder: Class used to build OMEMO messages.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder.OmemoMessageBuilder	(	OmemoManager	OmemoStore	String	): Create a new OmemoMessageBuilder with random IV and AES key.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder.OmemoMessageBuilder	(	OmemoManager	OmemoStore	byte[]	byte[]	): Create a OmemoMessageBuilder.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder.addRecipient	(	OmemoDevice	): Add a new recipient device to the message.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder.addRecipient	(	OmemoDevice	boolean	): Add a new recipient device to the message.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder.finish	(	): Assemble an OmemoMessageElement from the current state of the builder.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder.generateIv	(	): Generate a 16 byte initialization vector for AES encryption.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder.generateKey	(	): Generate a new AES key used to encrypt the message.
org.jivesoftware.smackx.omemo.util.OmemoMessageBuilder.setMessage	(	String	): Create an AES messageKey and use it to encrypt the message. Optionally append the Auth Tag of the encrypted message to the messageKey afterwards.
org.jivesoftware.smackx.packet.MessageEventTest: Test the MessageEvent extension using the low level API
org.jivesoftware.smackx.packet.MessageEventTest.testSendMessageEventRequest	(	): Low level API test. This is a simple test to use with an XMPP client and check if the client receives the message 1. User_1 will send a message to user_2 requesting to be notified when any of these events occurs: offline, composing, displayed or delivered 
org.jivesoftware.smackx.packet.MessageEventTest.testSendMessageEventRequestAndDisplayNotifications	(	): Low level API test. This is a simple test to use with an XMPP client, check if the client receives the message and display in the console any notification 1. User_1 will send a message to user_2 requesting to be notified when any of these events occurs: offline, composing, displayed or delivered 2. User_2 will use an XMPP client (like Exodus) to display the message and compose a reply 3. User_1 will display any notification that receives
org.jivesoftware.smackx.packet.RosterExchangeTest: Test the Roster Exchange extension using the low level API
org.jivesoftware.smackx.packet.RosterExchangeTest.testSendAndAcceptRosterEntries	(	): Low level API test. 1. User_1 will send his/her roster entries to user_2 2. User_2 will automatically add the entries that receives to his/her roster in the corresponding group 3. User_1 will wait several seconds for an ACK from user_2, if none is received then something is wrong
org.jivesoftware.smackx.packet.RosterExchangeTest.testSendAndReceiveRosterEntries	(	): Low level API test. 1. User_1 will send his/her roster entries to user_2 2. User_2 will receive the entries and iterate over them to check if everything is fine 3. User_1 will wait several seconds for an ACK from user_2, if none is received then something is wrong
org.jivesoftware.smackx.packet.RosterExchangeTest.testSendRosterEntries	(	): Low level API test. This is a simple test to use with an XMPP client and check if the client receives the message 1. User_1 will send his/her roster entries to user_2
org.jivesoftware.smackx.packet.XHTMLExtensionTest: Test the XHTML extension using the low level API
org.jivesoftware.smackx.packet.XHTMLExtensionTest.testSendComplexXHTMLMessageAndDisplayReceivedXHTMLMessage	(	): Low level API test. Test a message with two XHTML bodies and several XHTML tags. 1. User_1 will send a message with XHTML to user_2 2. User_2 will receive the message and iterate over the XHTML bodies to check if everything is fine 3. User_1 will wait several seconds for an ACK from user_2, if none is received then something is wrong
org.jivesoftware.smackx.packet.XHTMLExtensionTest.testSendSimpleXHTMLMessage	(	): Low level API test. This is a simple test to use with an XMPP client and check if the client receives the message 1. User_1 will send a message with formatted text (XHTML) to user_2
org.jivesoftware.smackx.packet.XHTMLExtensionTest.testSendSimpleXHTMLMessageAndDisplayReceivedXHTMLMessage	(	): Low level API test. 1. User_1 will send a message with XHTML to user_2 2. User_2 will receive the message and iterate over the XHTML bodies to check if everything is fine 3. User_1 will wait several seconds for an ACK from user_2, if none is received then something is wrong
org.jivesoftware.smackx.pep.PEPListener: A listener that is fired anytime a PEP event message is received.
org.jivesoftware.smackx.pep.PEPListener.eventReceived	(	EntityBareJid	EventElement	Message	): Called when PEP events are received as part of a presence subscribe or message filter.
org.jivesoftware.smackx.pep.PEPManager: Manages Personal Event Publishing (XEP-163). A PEPManager provides a high level access to pubsub personal events. It also provides an easy way to hook up custom logic when events are received from another XMPP client through PEPListeners. Use example:  PEPManager pepManager = new PEPManager(smackConnection); pepManager.addPEPListener(new PEPListener() { public void eventReceived(EntityBareJid from, EventElement event, Message message) { LOGGER.debug("Event received: " + event); } }); 
org.jivesoftware.smackx.pep.PEPManager.PEPManager	(	XMPPConnection	): Creates a new PEP exchange manager.
org.jivesoftware.smackx.pep.PEPManager.addPEPListener	(	PEPListener	): Adds a listener to PEPs. The listener will be fired anytime PEP events are received from remote XMPP clients.
org.jivesoftware.smackx.pep.PEPManager.publish	(	Item	String	): Publish an event.
org.jivesoftware.smackx.pep.PEPManager.removePEPListener	(	PEPListener	): Removes a listener from PEP events.
org.jivesoftware.smackx.ping.PingFailedListener: Defines the callback used whenever the server ping fails.
org.jivesoftware.smackx.ping.PingFailedListener.pingFailed	(	): Called when the server ping fails.
org.jivesoftware.smackx.ping.PingManager: Implements the XMPP Ping as defined by XEP-0199. The XMPP Ping protocol allows one entity to ping any other entity by simply sending a ping to the appropriate JID. PingManger also periodically sends XMPP pings to the server to avoid NAT timeouts and to test the connection status.  The default server ping interval is 30 minutes and can be modified with setDefaultPingInterval() and setPingInterval(). 
org.jivesoftware.smackx.ping.PingManager.getInstanceFor	(	XMPPConnection	): Retrieves a PingManager for the specified XMPPConnection, creating one if it doesn't already exist.
org.jivesoftware.smackx.ping.PingManager.getPingInterval	(	): Get the current ping interval.
org.jivesoftware.smackx.ping.PingManager.isPingSupported	(	Jid	): Query the specified entity to see if it supports the Ping protocol (XEP-0199).
org.jivesoftware.smackx.ping.PingManager.maybeSchedulePingServerTask	(	int	): Cancels any existing periodic ping task if there is one and schedules a new ping task if pingInterval is greater then zero.
org.jivesoftware.smackx.ping.PingManager.ping	(	Jid	): Same as calling ping() with the defaultpacket reply timeout.
org.jivesoftware.smackx.ping.PingManager.ping	(	Jid	long	): Pings the given jid. This method will return false if an error occurs. The exception to this, is a server ping, which will always return true if the server is reachable, event if there is an error on the ping itself (i.e. ping not supported).  Use isPingSupported() to determine if XMPP Ping is supported by the entity.
org.jivesoftware.smackx.ping.PingManager.pingMyServer	(	): Pings the server. This method will return true if the server is reachable. It is the equivalent of calling ping with the XMPP domain.  Unlike the ping() case, this method will return true even if isPingSupported() is false.
org.jivesoftware.smackx.ping.PingManager.pingMyServer	(	boolean	): Pings the server. This method will return true if the server is reachable. It is the equivalent of calling ping with the XMPP domain.  Unlike the ping() case, this method will return true even if isPingSupported() is false.
org.jivesoftware.smackx.ping.PingManager.pingMyServer	(	boolean	long	): Pings the server. This method will return true if the server is reachable. It is the equivalent of calling ping with the XMPP domain.  Unlike the ping() case, this method will return true even if isPingSupported() is false.
org.jivesoftware.smackx.ping.PingManager.pingServerIfNecessary	(	): Ping the server if deemed necessary because automatic server pings are enabled (setPingInterval()) and the ping interval has expired.
org.jivesoftware.smackx.ping.PingManager.registerPingFailedListener	(	PingFailedListener	): Register a new PingFailedListener.
org.jivesoftware.smackx.ping.PingManager.setDefaultPingInterval	(	int	): Set the default ping interval which will be used for new connections.
org.jivesoftware.smackx.ping.PingManager.setPingInterval	(	int	): Set the interval in seconds between a automated server ping is send. A negative value disables automatic server pings. All settings take effect immediately. If there is an active scheduled server ping it will be canceled and, if pingInterval is positive, a new one will be scheduled in pingInterval seconds.  If the ping fails after 3 attempts waiting the connections reply timeout for an answer, then the ping failed listeners will be invoked. 
org.jivesoftware.smackx.ping.PingManager.unregisterPingFailedListener	(	PingFailedListener	): Unregister a PingFailedListener.
org.jivesoftware.smackx.ping.PingTest.checkFailedPingOnTimeout	(	): DummyConnection will not reply so it will timeout.
org.jivesoftware.smackx.ping.PingTest.checkFailedPingToEntityError	(	): Server returns an exception for entity.
org.jivesoftware.smackx.ping.PingTest.checkPingToServerError	(	): Server returns an exception.
org.jivesoftware.smackx.ping.PingTest.getAuthenticatedDummyConnectionWithoutIqReplies	(	): The returned connection won't send replies to IQs
org.jivesoftware.smackx.ping.android.ServerPingWithAlarmManager: Send automatic server pings with the help of AlarmManager.  Smack's PingManager uses a ScheduledThreadPoolExecutor to schedule the automatic server pings, but on Android, those scheduled pings are not reliable. This is because the Android device may go into deep sleep where the system will not continue to run this causes  the system time to not move forward, which means that the time spent in deep sleep is not counted towards the scheduled delay time the scheduled Runnable is not run while the system is in deep sleep.  That is the reason Android comes with an API to schedule those tasks: AlarmManager. Which this class uses to determine every 30 minutes if a server ping is necessary. The interval of 30 minutes is the ideal trade-off between reliability and low resource (battery) consumption.   In order to use this class you need to call onCreate() once, for example in the onCreate() method of your Service holding the XMPPConnection. And to avoid leaking any resources, you should call onDestroy() when you no longer need any of its functionality. 
org.jivesoftware.smackx.ping.android.ServerPingWithAlarmManager.onCreate	(	Context	): Register a pending intent with the AlarmManager to be broadcasted every half hour and register the alarm broadcast receiver to receive this intent. The receiver will check all known questions if a ping is Necessary when invoked by the alarm intent.
org.jivesoftware.smackx.ping.android.ServerPingWithAlarmManager.onDestroy	(	): Unregister the alarm broadcast receiver and cancel the alarm.
org.jivesoftware.smackx.ping.android.ServerPingWithAlarmManager.setEnabled	(	boolean	): If enabled, ServerPingWithAlarmManager will call pingServerIfNecessary() for the connection of this instance every half hour.
org.jivesoftware.smackx.ping.packet.Ping.getPong	(	): Create an XMPP Pong for this Ping.
org.jivesoftware.smackx.privacy.PrivacyList: A privacy list represents a list of contacts that is a read only class used to represent a set of allowed or blocked communications. Basically it can: Handle many org.jivesoftware.smackx.privacy.packet.PrivacyItem. Answer if it is the default list. Answer if it is the active list.  PrivacyItem Privacy Items can handle different kind of blocking communications based on JID, group, subscription type or globally.
org.jivesoftware.smackx.privacy.PrivacyListListener: Interface to implement classes to listen for server events about privacy communication. Listeners are registered with the PrivacyListManager.
org.jivesoftware.smackx.privacy.PrivacyListListener.setPrivacyList	(	String	List	): Set or update a privacy list with PrivacyItem.
org.jivesoftware.smackx.privacy.PrivacyListListener.updatedPrivacyList	(	String	): A privacy list has been modified by another. It gets notified.
org.jivesoftware.smackx.privacy.PrivacyListManager: A PrivacyListManager is used by XMPP clients to block or allow communications from other users. Use the manager to:  Retrieve privacy lists. Add, remove, and edit privacy lists. Set, change, or decline active lists. Set, change, or decline the default list (i.e., the list that is active by default).  Privacy Items can handle different kind of permission communications based on JID, group, subscription type or globally (see PrivacyItem).
org.jivesoftware.smackx.privacy.PrivacyListManager.PrivacyListManager	(	XMPPConnection	): Creates a new privacy manager to maintain the communication privacy. Note: no information is sent to or received from the server until you attempt to get or set the privacy communication.
org.jivesoftware.smackx.privacy.PrivacyListManager.addListener	(	PrivacyListListener	): Adds a privacy list listener that will be notified of any new update in the user privacy communication.
org.jivesoftware.smackx.privacy.PrivacyListManager.createPrivacyList	(	String	List	): The client has created a new list. It send the new one to the server.
org.jivesoftware.smackx.privacy.PrivacyListManager.declineActiveList	(	): Client declines the use of active lists.
org.jivesoftware.smackx.privacy.PrivacyListManager.declineDefaultList	(	): Client declines the use of default lists.
org.jivesoftware.smackx.privacy.PrivacyListManager.deletePrivacyList	(	String	): Remove a privacy list.
org.jivesoftware.smackx.privacy.PrivacyListManager.getActiveList	(	): Answer the active privacy list. Returns null if there is no active list.
org.jivesoftware.smackx.privacy.PrivacyListManager.getActiveListName	(	): Get the name of the active list.
org.jivesoftware.smackx.privacy.PrivacyListManager.getDefaultList	(	): Answer the default privacy list. Returns null if there is no default list.
org.jivesoftware.smackx.privacy.PrivacyListManager.getDefaultListName	(	): Get the name of the default list.
org.jivesoftware.smackx.privacy.PrivacyListManager.getEffectiveListName	(	): Returns the name of the effective privacy list.  The effective privacy list is the one that is currently enforced on the connection. It's either the active privacy list, or, if the active privacy list is not set, the default privacy list. 
org.jivesoftware.smackx.privacy.PrivacyListManager.getInstanceFor	(	XMPPConnection	): Returns the PrivacyListManager instance associated with a given XMPPConnection.
org.jivesoftware.smackx.privacy.PrivacyListManager.getPrivacyList	(	String	): Answer the privacy list items under listName with the allowed and blocked permissions.
org.jivesoftware.smackx.privacy.PrivacyListManager.getPrivacyListItems	(	String	): Answer the privacy list items under listName with the allowed and blocked permissions.
org.jivesoftware.smackx.privacy.PrivacyListManager.getPrivacyLists	(	): Answer every privacy list with the allowed and blocked permissions.
org.jivesoftware.smackx.privacy.PrivacyListManager.getPrivacyWithListNames	(	): Answer a privacy containing the list structure without PrivacyItem.
org.jivesoftware.smackx.privacy.PrivacyListManager.getRequest	(	Privacy	): Send the Privacy stanza(/packet) to the server in order to know some privacy content and then waits for the answer.
org.jivesoftware.smackx.privacy.PrivacyListManager.isSupported	(	): Check if the user's server supports privacy lists.
org.jivesoftware.smackx.privacy.PrivacyListManager.removeListener	(	PrivacyListListener	): Removes the privacy list listener.
org.jivesoftware.smackx.privacy.PrivacyListManager.setActiveListName	(	String	): Set or change the active list to listName.
org.jivesoftware.smackx.privacy.PrivacyListManager.setDefaultListName	(	String	): Set or change the default list to listName.
org.jivesoftware.smackx.privacy.PrivacyListManager.setRequest	(	Privacy	): Send the Privacy stanza(/packet) to the server in order to modify the server privacy and waits for the answer.
org.jivesoftware.smackx.privacy.PrivacyListManager.updatePrivacyList	(	String	List	): The client has edited an existing list. It updates the server content with the resulting list of privacy items. The PrivacyItem list MUST contain all elements in the list (not the "delta").
org.jivesoftware.smackx.privacy.packet.Privacy: A Privacy IQ Packet, is used by the org.jivesoftware.smackx.privacy.PrivacyListManager and org.jivesoftware.smackx.privacy.provider.PrivacyProvider to allow and block communications from other users. It contains the appropriate structure to suit user-defined privacy lists. Different configured Privacy packages are used in the server & manager communication in order to:  Retrieving one's privacy lists. Adding, removing, and editing one's privacy lists. Setting, changing, or declining active lists. Setting, changing, or declining the default list (i.e., the list that is active by default).  Privacy Items can handle different kind of blocking communications based on JID, group, subscription type or globally PrivacyItem
org.jivesoftware.smackx.privacy.packet.Privacy.changeDefaultList	(	String	): Sets a given privacy list as the new user default list.
org.jivesoftware.smackx.privacy.packet.Privacy.deleteList	(	String	): Remove the list.
org.jivesoftware.smackx.privacy.packet.Privacy.deletePrivacyList	(	String	): Deletes an existing privacy list. If the privacy list being deleted was the default list then the user will end up with no default list. Therefore, the user will have to set a new default list.
org.jivesoftware.smackx.privacy.packet.Privacy.getActiveName	(	): Returns the name associated with the active list set for the session. Communications will be verified against the active list.
org.jivesoftware.smackx.privacy.packet.Privacy.getActivePrivacyList	(	): Returns the active privacy list or null if none was found.
org.jivesoftware.smackx.privacy.packet.Privacy.getDefaultName	(	): Returns the name of the default list that applies to the user as a whole. Default list is processed if there is no active list set for the target session/resource to which a stanza is addressed, or if there are no current sessions for the user.
org.jivesoftware.smackx.privacy.packet.Privacy.getDefaultPrivacyList	(	): Returns the default privacy list or null if none was found.
org.jivesoftware.smackx.privacy.packet.Privacy.getItem	(	String	int	): Returns the privacy item in the specified order.
org.jivesoftware.smackx.privacy.packet.Privacy.getItemLists	(	): Returns the collection of privacy list that the user holds. A Privacy List contains a set of rules that define if communication with the list owner is allowed or denied. Users may have zero, one or more privacy items.
org.jivesoftware.smackx.privacy.packet.Privacy.getPrivacyList	(	String	): Returns a specific privacy list.
org.jivesoftware.smackx.privacy.packet.Privacy.getPrivacyListNames	(	): Returns all the list names the user has defined to group restrictions.
org.jivesoftware.smackx.privacy.packet.Privacy.isDeclineActiveList	(	): Returns whether the receiver allows or declines the use of an active list.
org.jivesoftware.smackx.privacy.packet.Privacy.isDeclineDefaultList	(	): Returns whether the receiver allows or declines the use of a default list.
org.jivesoftware.smackx.privacy.packet.Privacy.setActiveName	(	String	): Sets the name associated with the active list set for the session. Communications will be verified against the active list.
org.jivesoftware.smackx.privacy.packet.Privacy.setActivePrivacyList	(	): Set the active list based on the default list.
org.jivesoftware.smackx.privacy.packet.Privacy.setDeclineActiveList	(	boolean	): Sets whether the receiver allows or declines the use of an active list.
org.jivesoftware.smackx.privacy.packet.Privacy.setDeclineDefaultList	(	boolean	): Sets whether the receiver allows or declines the use of a default list.
org.jivesoftware.smackx.privacy.packet.Privacy.setDefaultName	(	String	): Sets the name of the default list that applies to the user as a whole. Default list is processed if there is no active list set for the target session/resource to which a stanza is addressed, or if there are no current sessions for the user. If there is no default list set, then all Privacy Items are processed.
org.jivesoftware.smackx.privacy.packet.Privacy.setPrivacyList	(	String	List	): Set or update a privacy list with privacy items.
org.jivesoftware.smackx.privacy.packet.PrivacyItem: A privacy item acts a rule that when matched defines if a stanza(/packet) should be blocked or not. Privacy Items can handle different kind of blocking communications based on JID, group, subscription type or globally by: Allowing or blocking messages. Allowing or blocking inbound presence notifications. Allowing or blocking outbound presence notifications. Allowing or blocking IQ stanzas. Allowing or blocking all communications. 
org.jivesoftware.smackx.privacy.packet.PrivacyItem.PrivacyItem	(	Type	CharSequence	boolean	long	): Creates a new privacy item. If the type is "jid", then the 'value' attribute MUST contain a valid Jabber ID. If the type is "group", then the 'value' attribute SHOULD contain the name of a group in the user's roster. If the type is "subscription", then the 'value' attribute MUST be one of "both", "to", "from", or "none".
org.jivesoftware.smackx.privacy.packet.PrivacyItem.PrivacyItem	(	Type	String	boolean	long	): Creates a new privacy item. If the type is "jid", then the 'value' attribute MUST contain a valid Jabber ID. If the type is "group", then the 'value' attribute SHOULD contain the name of a group in the user's roster. If the type is "subscription", then the 'value' attribute MUST be one of "both", "to", "from", or "none".
org.jivesoftware.smackx.privacy.packet.PrivacyItem.PrivacyItem	(	boolean	long	): Creates a new fall-through privacy item. This is usually the last item in a privacy list and has no 'type' attribute.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.getOrder	(	): Returns the order where the receiver is processed. List items are processed in ascending order. The order MUST be filled and its value MUST be a non-negative integer that is unique among all items in the list.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.getType	(	): Returns the type hold the kind of communication it will allow or block. It MUST be filled with one of these values: jid, group or subscription.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.getValue	(	): Returns the element identifier to apply the action. If the type is "jid", then the 'value' attribute MUST contain a valid Jabber ID. If the type is "group", then the 'value' attribute SHOULD contain the name of a group in the user's roster. If the type is "subscription", then the 'value' attribute MUST be one of "both", "to", "from", or "none".
org.jivesoftware.smackx.privacy.packet.PrivacyItem.isAllow	(	): Returns the action associated with the item, it MUST be filled and will allow or deny the communication.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.isFilterEverything	(	): Returns whether the receiver allows or denies every kind of communication. When filterIQ, filterMessage, filterPresenceIn and filterPresenceOut are not set the receiver will block all communications.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.isFilterIQ	(	): Returns whether the receiver allow or deny incoming IQ stanzas or not.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.isFilterMessage	(	): Returns whether the receiver allows or denies incoming messages or not.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.isFilterPresenceIn	(	): Returns whether the receiver allows or denies incoming presence or not.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.isFilterPresenceOut	(	): Returns whether the receiver allows or denies incoming presence or not.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.setFilterIQ	(	boolean	): Sets whether the receiver allows or denies incoming IQ stanzas or not.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.setFilterMessage	(	boolean	): Sets wheather the receiver allows or denies incoming messages or not.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.setFilterPresenceIn	(	boolean	): Sets whether the receiver allows or denies incoming presence or not.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.setFilterPresenceOut	(	boolean	): Sets whether the receiver allows or denies outgoing presence or not.
org.jivesoftware.smackx.privacy.packet.PrivacyItem.toXML	(	): Answer an xml representation of the receiver according to the RFC 3921.
org.jivesoftware.smackx.privacy.provider.PrivacyProvider: The PrivacyProvider parses Privacy packets. Privacy Parses the query sub-document and creates an instance of Privacy. For each item in the list element, it creates an instance of PrivacyItem.
org.jivesoftware.smackx.pubsub.Affiliation: Represents a affiliation between a user and a node, where the Type defines the type of affiliation. Affiliations are retrieved from the getAffiliations() method, which gets affiliations for the calling user, based on the identity that is associated with the XMPPConnection.
org.jivesoftware.smackx.pubsub.Affiliation.Affiliation	(	BareJid	Type	): Construct a affiliation modification request.
org.jivesoftware.smackx.pubsub.Affiliation.Affiliation	(	String	Type	): Constructs an affiliation.
org.jivesoftware.smackx.pubsub.Affiliation.getNodeId	(	): Get the node.
org.jivesoftware.smackx.pubsub.Affiliation.getType	(	): Get the type.
org.jivesoftware.smackx.pubsub.Affiliation.isAffiliationModification	(	): Check if this is an affiliation element to modify affiliations on a node.
org.jivesoftware.smackx.pubsub.AffiliationsExtension: Represents the affiliations element of the reply to a request for affiliations. It is defined in the specification in section 5.7 Retrieve Affiliations and 8.9 Manage Affiliations.
org.jivesoftware.smackx.pubsub.ConfigurationEvent: Represents the configuration element of a pubsub message event which associates a configuration form to the node which was configured. The form contains the current node configuration.
org.jivesoftware.smackx.pubsub.ConfigureForm: A decorator for a Form to easily enable reading and updating of node configuration. All operations read or update the underlying DataForm. Unlike the Form.setAnswer(XXX)} methods, which throw an exception if the field does not exist, all ConfigureForm.setXXX methods will create the field in the wrapped form if it does not already exist. 
org.jivesoftware.smackx.pubsub.ConfigureForm.ConfigureForm	(	DataForm	): Create a decorator from an existing DataForm that has been retrieved from parsing a node configuration request.
org.jivesoftware.smackx.pubsub.ConfigureForm.ConfigureForm	(	DataForm.Type	): Create a new form for configuring a node. This would typically only be used when creating and configuring a node at the same time via createNode(), since configuration of an existing node is typically accomplished by calling getNodeConfiguration() and using the resulting form to create a answer form. See ConfigureForm().
org.jivesoftware.smackx.pubsub.ConfigureForm.ConfigureForm	(	Form	): Create a decorator from an existing Form for node configuration. Typically, this can be used to create a decorator for an answer form by using the result of createAnswerForm() as the input parameter.
org.jivesoftware.smackx.pubsub.ConfigureForm.getAccessModel	(	): Get the currently configured AccessModel, null if it is not set.
org.jivesoftware.smackx.pubsub.ConfigureForm.getBodyXSLT	(	): Returns the URL of an XSL transformation which can be applied to payloads in order to generate an appropriate message body element.
org.jivesoftware.smackx.pubsub.ConfigureForm.getChildren	(	): The id's of the child nodes associated with a collection node (both leaf and collection).
org.jivesoftware.smackx.pubsub.ConfigureForm.getChildrenAssociationPolicy	(	): Returns the policy that determines who may associate children with the node.
org.jivesoftware.smackx.pubsub.ConfigureForm.getChildrenAssociationWhitelist	(	): List of JID's that are on the whitelist that determines who can associate child nodes with the collection node. This is only relevant if getChildrenAssociationPolicy() is set to whitelist.
org.jivesoftware.smackx.pubsub.ConfigureForm.getChildrenMax	(	): Gets the maximum number of child nodes that can be associated with the collection node.
org.jivesoftware.smackx.pubsub.ConfigureForm.getCollection	(	): Gets the collection node which the node is affiliated with.
org.jivesoftware.smackx.pubsub.ConfigureForm.getDataType	(	): The type of node data, usually specified by the namespace of the payload (if any).
org.jivesoftware.smackx.pubsub.ConfigureForm.getDataformXSLT	(	): Gets the URL of an XSL transformation which can be applied to the payload format in order to generate a valid Data Forms result that the client could display using a generic Data Forms rendering engine.
org.jivesoftware.smackx.pubsub.ConfigureForm.getItemReply	(	): Determines who should get replies to items.
org.jivesoftware.smackx.pubsub.ConfigureForm.getMaxItems	(	): Gets the maximum number of items to persisted to this node if isPersistItems() is true.
org.jivesoftware.smackx.pubsub.ConfigureForm.getMaxPayloadSize	(	): Gets the maximum payload size in bytes.
org.jivesoftware.smackx.pubsub.ConfigureForm.getNodeType	(	): Gets the node type.
org.jivesoftware.smackx.pubsub.ConfigureForm.getPublishModel	(	): Gets the publishing model for the node, which determines who may publish to it.
org.jivesoftware.smackx.pubsub.ConfigureForm.getReplyRoom	(	): List of the multi user chat rooms that are specified as reply rooms.
org.jivesoftware.smackx.pubsub.ConfigureForm.getReplyTo	(	): Gets the specific JID's for reply to.
org.jivesoftware.smackx.pubsub.ConfigureForm.getRosterGroupsAllowed	(	): Gets the roster groups that are allowed to subscribe and retrieve items.
org.jivesoftware.smackx.pubsub.ConfigureForm.getTitle	(	): Gets the human readable node title.
org.jivesoftware.smackx.pubsub.ConfigureForm.isDeliverPayloads	(	): Does the node deliver payloads with event notifications.
org.jivesoftware.smackx.pubsub.ConfigureForm.isNotifyConfig	(	): Determines if subscribers should be notified when the configuration changes.
org.jivesoftware.smackx.pubsub.ConfigureForm.isNotifyDelete	(	): Determines whether subscribers should be notified when the node is deleted.
org.jivesoftware.smackx.pubsub.ConfigureForm.isNotifyRetract	(	): Determines whether subscribers should be notified when items are deleted from the node.
org.jivesoftware.smackx.pubsub.ConfigureForm.isPersistItems	(	): Determines whether items should be persisted in the node.
org.jivesoftware.smackx.pubsub.ConfigureForm.isPresenceBasedDelivery	(	): Determines whether to deliver notifications to available users only.
org.jivesoftware.smackx.pubsub.ConfigureForm.isSubscibe	(	): Determines if subscriptions are allowed.
org.jivesoftware.smackx.pubsub.ConfigureForm.isSubscribe	(	): Determines if subscriptions are allowed.
org.jivesoftware.smackx.pubsub.ConfigureForm.setAccessModel	(	AccessModel	): Sets the value of access model.
org.jivesoftware.smackx.pubsub.ConfigureForm.setBodyXSLT	(	String	): Set the URL of an XSL transformation which can be applied to payloads in order to generate an appropriate message body element.
org.jivesoftware.smackx.pubsub.ConfigureForm.setChildren	(	List	): Set the list of child node ids that are associated with a collection node.
org.jivesoftware.smackx.pubsub.ConfigureForm.setChildrenAssociationPolicy	(	ChildrenAssociationPolicy	): Sets the policy that determines who may associate children with the node.
org.jivesoftware.smackx.pubsub.ConfigureForm.setChildrenAssociationWhitelist	(	List	): Set the JID's in the whitelist of users that can associate child nodes with the collection node. This is only relevant if getChildrenAssociationPolicy() is set to whitelist.
org.jivesoftware.smackx.pubsub.ConfigureForm.setChildrenMax	(	int	): Set the maximum number of child nodes that can be associated with a collection node.
org.jivesoftware.smackx.pubsub.ConfigureForm.setCollection	(	String	): Sets the collection node which the node is affiliated with.
org.jivesoftware.smackx.pubsub.ConfigureForm.setDataType	(	String	): Sets the type of node data, usually specified by the namespace of the payload (if any).
org.jivesoftware.smackx.pubsub.ConfigureForm.setDataformXSLT	(	String	): Sets the URL of an XSL transformation which can be applied to the payload format in order to generate a valid Data Forms result that the client could display using a generic Data Forms rendering engine.
org.jivesoftware.smackx.pubsub.ConfigureForm.setDeliverPayloads	(	boolean	): Sets whether the node will deliver payloads with event notifications.
org.jivesoftware.smackx.pubsub.ConfigureForm.setItemReply	(	ItemReply	): Sets who should get the replies to items.
org.jivesoftware.smackx.pubsub.ConfigureForm.setMaxItems	(	int	): Set the maximum number of items to persisted to this node if isPersistItems() is true.
org.jivesoftware.smackx.pubsub.ConfigureForm.setMaxPayloadSize	(	int	): Sets the maximum payload size in bytes.
org.jivesoftware.smackx.pubsub.ConfigureForm.setNodeType	(	NodeType	): Sets the node type.
org.jivesoftware.smackx.pubsub.ConfigureForm.setNotifyConfig	(	boolean	): Sets whether subscribers should be notified when the configuration changes.
org.jivesoftware.smackx.pubsub.ConfigureForm.setNotifyDelete	(	boolean	): Sets whether subscribers should be notified when the node is deleted.
org.jivesoftware.smackx.pubsub.ConfigureForm.setNotifyRetract	(	boolean	): Sets whether subscribers should be notified when items are deleted from the node.
org.jivesoftware.smackx.pubsub.ConfigureForm.setPersistentItems	(	boolean	): Sets whether items should be persisted in the node.
org.jivesoftware.smackx.pubsub.ConfigureForm.setPresenceBasedDelivery	(	boolean	): Sets whether to deliver notifications to available users only.
org.jivesoftware.smackx.pubsub.ConfigureForm.setPublishModel	(	PublishModel	): Sets the publishing model for the node, which determines who may publish to it.
org.jivesoftware.smackx.pubsub.ConfigureForm.setReplyRoom	(	List	): Sets the multi user chat rooms that are specified as reply rooms.
org.jivesoftware.smackx.pubsub.ConfigureForm.setReplyTo	(	List	): Sets the specific JID's for reply to.
org.jivesoftware.smackx.pubsub.ConfigureForm.setRosterGroupsAllowed	(	List	): Sets the roster groups that are allowed to subscribe and retrieve items.
org.jivesoftware.smackx.pubsub.ConfigureForm.setSubscribe	(	boolean	): Sets whether subscriptions are allowed.
org.jivesoftware.smackx.pubsub.ConfigureForm.setTitle	(	String	): Sets a human readable title for the node.
org.jivesoftware.smackx.pubsub.ConfigureFormTest: Configure form test.
org.jivesoftware.smackx.pubsub.EmbeddedPacketExtension: This interface defines ExtensionElement implementations that contain other extensions. This effectively extends the idea of an extension within one of the top level Stanza types to consider any embedded element to be an extension of its parent. This more easily enables the usage of some of Smacks parsing utilities such as parseExtensionElement() to be used to parse any element of the XML being parsed. Top level extensions have only one element, but they can have multiple children, or their children can have multiple children. This interface is a way of allowing extensions to be embedded within one another as a partial or complete one to one mapping of extension to element.
org.jivesoftware.smackx.pubsub.EmbeddedPacketExtension.getExtensions	(	): Get the list of embedded ExtensionElement objects.
org.jivesoftware.smackx.pubsub.EventElement: Represents the top level element of a pubsub event extension. All types of pubsub events are represented by this class. The specific type can be found by getEventType(). The embedded event information, which is specific to the event type, can be retrieved by the getEvent() method.
org.jivesoftware.smackx.pubsub.FormNode: Generic stanza(/packet) extension which represents any pubsub form that is parsed from the incoming stream or being sent out to the server. Form types are defined in FormNodeType.
org.jivesoftware.smackx.pubsub.FormNode.FormNode	(	FormNodeType	Form	): Create a FormNode which contains the specified form.
org.jivesoftware.smackx.pubsub.FormNode.FormNode	(	FormNodeType	String	Form	): Create a FormNode which contains the specified form, which is associated with the specified node.
org.jivesoftware.smackx.pubsub.FormNode.getForm	(	): Get the Form that is to be sent, or was retrieved from the server.
org.jivesoftware.smackx.pubsub.GetItemsRequest: Represents a request to subscribe to a node.
org.jivesoftware.smackx.pubsub.Item: This class represents an item that has been, or will be published to a pubsub node. An Item has several properties that are dependent on the configuration of the node to which it has been or will be published. An Item received from a node (via getItems() or addItemEventListener()  Will always have an id (either user or server generated) unless node configuration has both isPersistItems() and isDeliverPayloads()set to false. Will have a payload if the node configuration has isDeliverPayloads() set to true, otherwise it will be null.  An Item created to send to a node (via send() or publish()  The id is optional, since the server will generate one if necessary, but should be used if it is meaningful in the context of the node. This value must be unique within the node that it is sent to, since resending an item with the same id will overwrite the one that already exists if the items are persisted. Will require payload if the node configuration has isDeliverPayloads() set to true.   To customise the payload object being returned from the getPayload() method, you can add a custom parser as explained in ItemProvider. 
org.jivesoftware.smackx.pubsub.Item.Item	(	): Create an empty Item with no id. This is a valid item for nodes which are configured so that isDeliverPayloads() is false. In most cases an id will be generated by the server. For nodes configured with isDeliverPayloads() and isPersistItems() set to false, no Item is sent to the node, you have to use send() or publish() methods in this case.
org.jivesoftware.smackx.pubsub.Item.Item	(	String	): Create an Item with an id but no payload. This is a valid item for nodes which are configured so that isDeliverPayloads() is false.
org.jivesoftware.smackx.pubsub.Item.Item	(	String	String	): Create an Item with an id and a node id.  Note: This is not valid for publishing an item to a node, only receiving from one as part of Message. If used to create an Item to publish (via publish(), the server may return an error for an invalid packet.
org.jivesoftware.smackx.pubsub.Item.getId	(	): Get the item id. Unique to the node it is associated with.
org.jivesoftware.smackx.pubsub.ItemDeleteEvent: Represents an event in which items have been deleted from the node.
org.jivesoftware.smackx.pubsub.ItemDeleteEvent.ItemDeleteEvent	(	String	List	List	): Constructs an ItemDeleteEvent that indicates the the supplied items (by id) have been deleted, and that the event matches the listed subscriptions. The subscriptions would have been created by calling subscribe().
org.jivesoftware.smackx.pubsub.ItemDeleteEvent.getItemIds	(	): Get the item id's of the items that have been deleted.
org.jivesoftware.smackx.pubsub.ItemPublishEvent: Represents an event generated by an item(s) being published to a node.
org.jivesoftware.smackx.pubsub.ItemPublishEvent.ItemPublishEvent	(	String	List	): Constructs an ItemPublishEvent with the provided list of Item that were published.
org.jivesoftware.smackx.pubsub.ItemPublishEvent.ItemPublishEvent	(	String	List	List	): Constructs an ItemPublishEvent with the provided list of Item that were published. The list of subscription ids represents the subscriptions that matched the event, in the case of the user having multiple subscriptions.
org.jivesoftware.smackx.pubsub.ItemPublishEvent.ItemPublishEvent	(	String	List	List	Date	): Constructs an ItemPublishEvent with the provided list of Item that were published in the past. The published date signifies that this is delayed event. The list of subscription ids represents the subscriptions that matched the event, in the case of the user having multiple subscriptions. 
org.jivesoftware.smackx.pubsub.ItemPublishEvent.getItems	(	): Get the list of Item that were published.
org.jivesoftware.smackx.pubsub.ItemPublishEvent.getPublishedDate	(	): Gets the original date the items were published. This is only valid if isDelayed() is true.
org.jivesoftware.smackx.pubsub.ItemPublishEvent.isDelayed	(	): Indicates whether this event was delayed. That is, the items were published to the node at some time in the past. This will typically happen if there is an item already published to the node before a user subscribes to it. In this case, when the user subscribes, the server may send the last item published to the node with a delay date showing its time of original publication.
org.jivesoftware.smackx.pubsub.ItemValidationTest: Item validation test.
org.jivesoftware.smackx.pubsub.ItemsExtension: This class is used for multiple purposes.  It can represent an event containing a list of items that have been published It can represent an event containing a list of retracted (deleted) items. It can represent a request to delete a list of items. It can represent a request to get existing items.  Please note, this class is used for internal purposes, and is not required for usage of pubsub functionality.
org.jivesoftware.smackx.pubsub.ItemsExtension.ItemsExtension	(	ItemsElementType	String	List	): Construct an instance with a list representing items that have been published or deleted. Valid scenarios are:  Request items from node - itemsType = items, items = list of Item and an optional value for the max_items attribute. Request to delete items - itemsType = retract, items = list of Item containing only id's and an optional value for the notify attribute. Items published event - itemsType = items, items = list of Item and attributeValue = null Items deleted event - itemsType = items, items = list of RetractItem and attributeValue = null 
org.jivesoftware.smackx.pubsub.ItemsExtension.ItemsExtension	(	String	List	boolean	): Construct an instance with a list representing items that have been published or deleted. Valid scenarios are:  Request items from node - itemsType = items, items = list of Item and an optional value for the max_items attribute. Request to delete items - itemsType = retract, items = list of Item containing only id's and an optional value for the notify attribute. Items published event - itemsType = items, items = list of Item and attributeValue = null Items deleted event - itemsType = items, items = list of RetractItem and attributeValue = null 
org.jivesoftware.smackx.pubsub.ItemsExtension.getItems	(	): Gets the items related to the type of request or event. return List of Item, RetractItem, or null
org.jivesoftware.smackx.pubsub.ItemsExtension.getItemsElementType	(	): Get the type of element.
org.jivesoftware.smackx.pubsub.ItemsExtension.getNotify	(	): Gets the value of the optional attribute related to the ItemsElementType.
org.jivesoftware.smackx.pubsub.LeafNode: The main class for the majority of pubsub functionality. In general almost all pubsub capabilities are related to the concept of a node. All items are published to a node, and typically subscribed to by other users. These users then retrieve events based on this subscription.
org.jivesoftware.smackx.pubsub.LeafNode.deleteAllItems	(	): Purges the node of all items. Note: Some implementations may keep the last item sent.
org.jivesoftware.smackx.pubsub.LeafNode.deleteItem	(	Collection	): Delete the items with the specified id's from the node.
org.jivesoftware.smackx.pubsub.LeafNode.deleteItem	(	String	): Delete the item with the specified id from the node.
org.jivesoftware.smackx.pubsub.LeafNode.discoverItems	(	): Get information on the items in the node in standard DiscoverItems format.
org.jivesoftware.smackx.pubsub.LeafNode.getItems	(	): Get the current items stored in the node.
org.jivesoftware.smackx.pubsub.LeafNode.getItems	(	Collection	): Get the items specified from the node. This would typically be used when the server does not return the payload due to size constraints. The user would be required to retrieve the payload after the items have been retrieved via getItems() or an event, that did not include the payload.
org.jivesoftware.smackx.pubsub.LeafNode.getItems	(	List	List	): Get items persisted on the node.  additionalExtensions can be used e.g. to add a "Result Set Management" extension. returnedExtensions will be filled with the stanza(/packet) extensions found in the answer. 
org.jivesoftware.smackx.pubsub.LeafNode.getItems	(	String	): Get the current items stored in the node based on the subscription associated with the provided subscription id.
org.jivesoftware.smackx.pubsub.LeafNode.getItems	(	int	): Get items persisted on the node, limited to the specified number.
org.jivesoftware.smackx.pubsub.LeafNode.getItems	(	int	String	): Get items persisted on the node, limited to the specified number based on the subscription associated with the provided subscriptionId.
org.jivesoftware.smackx.pubsub.LeafNode.publish	(	): Publishes an event to the node. This is an empty event with no item. This is only acceptable for nodes with isPersistItems()=false and isDeliverPayloads()=false.
org.jivesoftware.smackx.pubsub.LeafNode.publish	(	Collection	): Publishes multiple events to the node. Same rules apply as in send(). In addition, if isPersistItems()=false, only the last item in the input list will get stored on the node, assuming it stores the last sent item.
org.jivesoftware.smackx.pubsub.LeafNode.publish	(	T	): Publishes an event to the node. This can be either a simple item with no payload, or one with it. This is determined by the Node configuration. If the node has deliver_payload=false, the Item must not have a payload. If the id is null, an empty item (one without an id) will be sent. Please note that this is not the same as send(), which publishes an event with NO item.
org.jivesoftware.smackx.pubsub.LeafNode.send	(	): Publishes an event to the node. This is an empty event with no item. This is only acceptable for nodes with isPersistItems()=false and isDeliverPayloads()=false.
org.jivesoftware.smackx.pubsub.LeafNode.send	(	Collection	): Publishes multiple events to the node. Same rules apply as in publish(). In addition, if isPersistItems()=false, only the last item in the input list will get stored on the node, assuming it stores the last sent item.
org.jivesoftware.smackx.pubsub.LeafNode.send	(	T	): Publishes an event to the node. This is a simple item with no payload. If the id is null, an empty item (one without an id) will be sent. Please note that this is not the same as send(), which publishes an event with NO item.
org.jivesoftware.smackx.pubsub.Node.EventContentFilter: Filter for StanzaListener to filter out events not specific to the event type expected for this node.
org.jivesoftware.smackx.pubsub.Node.ItemDeleteTranslator: This class translates low level item deletion events into api level objects for user consumption.
org.jivesoftware.smackx.pubsub.Node.ItemEventTranslator: This class translates low level item publication events into api level objects for user consumption.
org.jivesoftware.smackx.pubsub.Node.Node	(	PubSubManager	String	): Construct a node associated to the supplied connection with the specified node id.
org.jivesoftware.smackx.pubsub.Node.NodeConfigTranslator: This class translates low level node configuration events into api level objects for user consumption.
org.jivesoftware.smackx.pubsub.Node.addConfigurationListener	(	NodeConfigListener	): Register a listener for configuration events. This listener will get called whenever the node's configuration changes.
org.jivesoftware.smackx.pubsub.Node.addItemDeleteListener	(	ItemDeleteListener	): Register an listener for item delete events. This listener gets called whenever an item is deleted from the node.
org.jivesoftware.smackx.pubsub.Node.addItemEventListener	(	ItemEventListener	): Register a listener for item publication events. This listener will get called whenever an item is published to this node.
org.jivesoftware.smackx.pubsub.Node.discoverInfo	(	): Discover node information in standard DiscoverInfo format.
org.jivesoftware.smackx.pubsub.Node.getAffiliations	(	): Get the affiliations of this node.
org.jivesoftware.smackx.pubsub.Node.getAffiliations	(	List	Collection	): Get the affiliations of this node.  additionalExtensions can be used e.g. to add a "Result Set Management" extension. returnedExtensions will be filled with the stanza(/packet) extensions found in the answer. 
org.jivesoftware.smackx.pubsub.Node.getAffiliationsAsOwner	(	): Retrieve the affiliation list for this node as owner.
org.jivesoftware.smackx.pubsub.Node.getAffiliationsAsOwner	(	List	Collection	): Retrieve the affiliation list for this node as owner.  Note that this is an optional PubSub feature ('pubusb#modify-affiliations'). 
org.jivesoftware.smackx.pubsub.Node.getId	(	): Get the NodeId.
org.jivesoftware.smackx.pubsub.Node.getNodeConfiguration	(	): Returns a configuration form, from which you can create an answer form to be submitted via the sendConfigurationForm().
org.jivesoftware.smackx.pubsub.Node.getSubscriptionOptions	(	String	): Returns a SubscribeForm for subscriptions, from which you can create an answer form to be submitted via the sendConfigurationForm().
org.jivesoftware.smackx.pubsub.Node.getSubscriptionOptions	(	String	String	): Get the options for configuring the specified subscription.
org.jivesoftware.smackx.pubsub.Node.getSubscriptions	(	): Get the subscriptions currently associated with this node.
org.jivesoftware.smackx.pubsub.Node.getSubscriptions	(	List	Collection	): Get the subscriptions currently associated with this node.  additionalExtensions can be used e.g. to add a "Result Set Management" extension. returnedExtensions will be filled with the stanza(/packet) extensions found in the answer. 
org.jivesoftware.smackx.pubsub.Node.getSubscriptionsAsOwner	(	): Get the subscriptions currently associated with this node as owner.
org.jivesoftware.smackx.pubsub.Node.getSubscriptionsAsOwner	(	List	Collection	): Get the subscriptions currently associated with this node as owner.  Unlike getSubscriptions(), which only retrieves the subscriptions of the current entity ("user"), this method returns a list of all subscriptions. This requires the entity to have the sufficient privileges to manage subscriptions.   additionalExtensions can be used e.g. to add a "Result Set Management" extension. returnedExtensions will be filled with the stanza(/packet) extensions found in the answer. 
org.jivesoftware.smackx.pubsub.Node.modifyAffiliationAsOwner	(	List	): Modify the affiliations for this PubSub node as owner. The Affiliations given must be created with the Affiliation() constructor.  Note that this is an optional PubSub feature ('pubusb#modify-affiliations'). 
org.jivesoftware.smackx.pubsub.Node.removeConfigurationListener	(	NodeConfigListener	): Unregister a listener for configuration events.
org.jivesoftware.smackx.pubsub.Node.removeItemDeleteListener	(	ItemDeleteListener	): Unregister a listener for item delete events.
org.jivesoftware.smackx.pubsub.Node.removeItemEventListener	(	ItemEventListener	): Unregister a listener for publication events.
org.jivesoftware.smackx.pubsub.Node.sendConfigurationForm	(	Form	): Update the configuration with the contents of the new Form.
org.jivesoftware.smackx.pubsub.Node.subscribe	(	String	): The user subscribes to the node using the supplied jid. The bare jid portion of this one must match the jid for the connection. Please note that the Subscription.State should be checked on return since more actions may be required by the caller. pending - The owner must approve the subscription request before messages will be received. unconfigured - If the isConfigRequired() is true, the caller must configure the subscription before messages will be received. If it is false the caller can configure it but is not required to do so.
org.jivesoftware.smackx.pubsub.Node.subscribe	(	String	SubscribeForm	): The user subscribes to the node using the supplied jid and subscription options. The bare jid portion of this one must match the jid for the connection. Please note that the Subscription.State should be checked on return since more actions may be required by the caller. pending - The owner must approve the subscription request before messages will be received. unconfigured - If the isConfigRequired() is true, the caller must configure the subscription before messages will be received. If it is false the caller can configure it but is not required to do so.
org.jivesoftware.smackx.pubsub.Node.unsubscribe	(	String	): Remove the subscription related to the specified JID. This will only work if there is only 1 subscription. If there are multiple subscriptions, use unsubscribe().
org.jivesoftware.smackx.pubsub.Node.unsubscribe	(	String	String	): Remove the specific subscription related to the specified JID.
org.jivesoftware.smackx.pubsub.NodeExtension: A class which represents a common element within the pubsub defined schemas. One which has a node as an attribute. This class is used on its own as well as a base class for many others, since the node is a central concept to most pubsub functionality.
org.jivesoftware.smackx.pubsub.NodeExtension.NodeExtension	(	PubSubElementType	): Constructs a NodeExtension with an element name specified by PubSubElementType.
org.jivesoftware.smackx.pubsub.NodeExtension.NodeExtension	(	PubSubElementType	String	): Constructs a NodeExtension with an element name specified by PubSubElementType and the specified node id.
org.jivesoftware.smackx.pubsub.NodeExtension.getNode	(	): Gets the node id.
org.jivesoftware.smackx.pubsub.OptionsExtension: A stanza(/packet) extension representing the options element. 
org.jivesoftware.smackx.pubsub.PayloadItem: This class represents an item that has been, or will be published to a pubsub node. An Item has several properties that are dependent on the configuration of the node to which it has been or will be published. An Item received from a node (via getItems() or addItemEventListener()  Will always have an id (either user or server generated) unless node configuration has both isPersistItems() and isDeliverPayloads()set to false. Will have a payload if the node configuration has isDeliverPayloads() set to true, otherwise it will be null.  An Item created to send to a node (via send() or publish()  The id is optional, since the server will generate one if necessary, but should be used if it is meaningful in the context of the node. This value must be unique within the node that it is sent to, since resending an item with the same id will overwrite the one that already exists if the items are persisted. Will require payload if the node configuration has isDeliverPayloads() set to true.  To customise the payload object being returned from the getPayload() method, you can add a custom parser as explained in ItemProvider.
org.jivesoftware.smackx.pubsub.PayloadItem.PayloadItem	(	E	): Create an Item with no id and a payload The id will be set by the server. 
org.jivesoftware.smackx.pubsub.PayloadItem.PayloadItem	(	String	E	): Create an Item with an id and payload. 
org.jivesoftware.smackx.pubsub.PayloadItem.PayloadItem	(	String	String	E	): Create an Item with an id, node id and payload.  Note: This is not valid for publishing an item to a node, only receiving from one as part of Message. If used to create an Item to publish (via publish(), the server may return an error for an invalid packet. 
org.jivesoftware.smackx.pubsub.PayloadItem.getPayload	(	): Get the payload associated with this Item. Customising the payload parsing from the server can be accomplished as described in ItemProvider.
org.jivesoftware.smackx.pubsub.PubSubManager: This is the starting point for access to the pubsub service. It will provide access to general information about the service, as well as create or retrieve pubsub LeafNode instances. These instances provide the bulk of the functionality as defined in the pubsub specification XEP-0060.
org.jivesoftware.smackx.pubsub.PubSubManager.PubSubManager	(	XMPPConnection	BareJid	): Create a pubsub manager associated to the specified connection where the pubsub requests require a specific to address for packets.
org.jivesoftware.smackx.pubsub.PubSubManager.canCreateNodesAndPublishItems	(	): Check if it is possible to create PubSub nodes on this service. It could be possible that the PubSub service allows only certain XMPP entities (clients) to create nodes and publish items to them.  Note that since XEP-60 does not provide an API to determine if an XMPP entity is allowed to create nodes, therefore this method creates an instant node calling createNode() to determine if it is possible to create nodes. 
org.jivesoftware.smackx.pubsub.PubSubManager.createNode	(	): Creates an instant node, if supported.
org.jivesoftware.smackx.pubsub.PubSubManager.createNode	(	String	): Creates a node with default configuration.
org.jivesoftware.smackx.pubsub.PubSubManager.createNode	(	String	Form	): Creates a node with specified configuration. Note: This is the only way to create a collection node.
org.jivesoftware.smackx.pubsub.PubSubManager.deleteNode	(	String	): Delete the specified node.
org.jivesoftware.smackx.pubsub.PubSubManager.discoverNodes	(	String	): Get all the nodes that currently exist as a child of the specified collection node. If the service does not support collection nodes then all nodes will be returned. To retrieve contents of the root collection node (if it exists), or there is no root collection node, pass null as the nodeId.
org.jivesoftware.smackx.pubsub.PubSubManager.getAffiliations	(	): Gets the affiliations on the root node.
org.jivesoftware.smackx.pubsub.PubSubManager.getDefaultConfiguration	(	): Returns the default settings for Node configuration.
org.jivesoftware.smackx.pubsub.PubSubManager.getInstance	(	XMPPConnection	): Get a PubSub manager for the default PubSub service of the connection.
org.jivesoftware.smackx.pubsub.PubSubManager.getInstance	(	XMPPConnection	BareJid	): Get the PubSub manager for the given connection and PubSub service.
org.jivesoftware.smackx.pubsub.PubSubManager.getLeafNode	(	String	): Try to get a leaf node with the given node ID.
org.jivesoftware.smackx.pubsub.PubSubManager.getNode	(	String	): Retrieves the requested node, if it exists. It will throw an exception if it does not.
org.jivesoftware.smackx.pubsub.PubSubManager.getOrCreateLeafNode	(	String	): Try to get a leaf node and create one if it does not already exist.
org.jivesoftware.smackx.pubsub.PubSubManager.getPubSubService	(	XMPPConnection	): Get the "default" PubSub service for a given XMPP connection. The default PubSub service is simply an arbitrary XMPP service with the PubSub feature and an identity of category "pubsub" and type "service".
org.jivesoftware.smackx.pubsub.PubSubManager.getServiceJid	(	): Get the JID of the PubSub service managed by this manager.
org.jivesoftware.smackx.pubsub.PubSubManager.getSubscriptions	(	): Gets the subscriptions on the root node.
org.jivesoftware.smackx.pubsub.PubSubManager.getSupportedFeatures	(	): Gets the supported features of the servers pubsub implementation as a standard DiscoverInfo instance.
org.jivesoftware.smackx.pubsub.PubSubManager.supportsAutomaticNodeCreation	(	): Check if the PubSub service supports automatic node creation.
org.jivesoftware.smackx.pubsub.PubSubManager.tryToPublishAndPossibleAutoCreate	(	String	I	): Try to publish an item and, if the node with the given ID does not exists, auto-create the node.  Not every PubSub service supports automatic node creation. You can discover if this service supports it by using supportsAutomaticNodeCreation(). 
org.jivesoftware.smackx.pubsub.PublishItem: Represents a request to publish an item(s) to a specific node.
org.jivesoftware.smackx.pubsub.PublishItem.PublishItem	(	String	Collection	): Construct a request to publish multiple items to a node.
org.jivesoftware.smackx.pubsub.PublishItem.PublishItem	(	String	T	): Construct a request to publish an item to a node.
org.jivesoftware.smackx.pubsub.RetractItem: Represents and item that has been deleted from a node.
org.jivesoftware.smackx.pubsub.RetractItem.RetractItem	(	String	): Construct a RetractItem with the specified id.
org.jivesoftware.smackx.pubsub.SimplePayload: The default payload representation for getPayload(). It simply stores the XML payload as a string.
org.jivesoftware.smackx.pubsub.SimplePayload.SimplePayload	(	String	String	CharSequence	): Construct a SimplePayload object with the specified element name, namespace and content. The content must be well formed XML.
org.jivesoftware.smackx.pubsub.SubscribeExtension: Represents a request to subscribe to a node.
org.jivesoftware.smackx.pubsub.SubscribeForm: A decorator for a Form to easily enable reading and updating of subscription options. All operations read or update the underlying DataForm. Unlike the Form.setAnswer(XXX)} methods, which throw an exception if the field does not exist, all SubscribeForm.setXXX methods will create the field in the wrapped form if it does not already exist.
org.jivesoftware.smackx.pubsub.SubscribeForm.getDigestFrequency	(	): Gets the minimum number of milliseconds between sending notification digests.
org.jivesoftware.smackx.pubsub.SubscribeForm.getExpiry	(	): Get the time at which the leased subscription will expire, or has expired.
org.jivesoftware.smackx.pubsub.SubscribeForm.getShowValues	(	): Gets the PresenceState for which an entity wants to receive notifications.
org.jivesoftware.smackx.pubsub.SubscribeForm.isDeliverOn	(	): Determines if an entity wants to receive notifications.
org.jivesoftware.smackx.pubsub.SubscribeForm.isDigestOn	(	): Determines if notifications should be delivered as aggregations or not.
org.jivesoftware.smackx.pubsub.SubscribeForm.isIncludeBody	(	): Determines whether the entity wants to receive an XMPP message body in addition to the payload format.
org.jivesoftware.smackx.pubsub.SubscribeForm.setDeliverOn	(	boolean	): Sets whether an entity wants to receive notifications.
org.jivesoftware.smackx.pubsub.SubscribeForm.setDigestFrequency	(	int	): Sets the minimum number of milliseconds between sending notification digests.
org.jivesoftware.smackx.pubsub.SubscribeForm.setDigestOn	(	boolean	): Sets whether notifications should be delivered as aggregations or not.
org.jivesoftware.smackx.pubsub.SubscribeForm.setExpiry	(	Date	): Sets the time at which the leased subscription will expire, or has expired.
org.jivesoftware.smackx.pubsub.SubscribeForm.setIncludeBody	(	boolean	): Sets whether the entity wants to receive an XMPP message body in addition to the payload format.
org.jivesoftware.smackx.pubsub.SubscribeForm.setShowValues	(	Collection	): Sets the list of PresenceState for which an entity wants to receive notifications.
org.jivesoftware.smackx.pubsub.Subscription: Represents a subscription to node for both requests and replies.
org.jivesoftware.smackx.pubsub.Subscription.Subscription	(	String	): Used to constructs a subscription request to the root node with the specified JID.
org.jivesoftware.smackx.pubsub.Subscription.Subscription	(	String	String	): Used to constructs a subscription request to the specified node with the specified JID.
org.jivesoftware.smackx.pubsub.Subscription.Subscription	(	String	String	String	State	): Constructs a representation of a subscription reply to the specified node and JID. The server will have supplied the subscription id and current state.
org.jivesoftware.smackx.pubsub.Subscription.Subscription	(	String	String	String	State	boolean	): Constructs a representation of a subscription reply to the specified node and JID. The server will have supplied the subscription id and current state and whether the subscription need to be configured.
org.jivesoftware.smackx.pubsub.Subscription.getId	(	): Gets the subscription id.
org.jivesoftware.smackx.pubsub.Subscription.getJid	(	): Gets the JID the subscription is created for.
org.jivesoftware.smackx.pubsub.Subscription.getState	(	): Gets the current subscription state.
org.jivesoftware.smackx.pubsub.Subscription.isConfigRequired	(	): This value is only relevant when the getState() is unconfigured.
org.jivesoftware.smackx.pubsub.SubscriptionEvent: Base class to represents events that are associated to subscriptions.
org.jivesoftware.smackx.pubsub.SubscriptionEvent.SubscriptionEvent	(	String	): Construct an event with no subscription id's. This can occur when there is only one subscription to a node. The event may or may not report the subscription id along with the event.
org.jivesoftware.smackx.pubsub.SubscriptionEvent.SubscriptionEvent	(	String	List	): Construct an event with multiple subscriptions.
org.jivesoftware.smackx.pubsub.SubscriptionEvent.getSubscriptions	(	): Get the subscriptions this event is associated with.
org.jivesoftware.smackx.pubsub.SubscriptionEvent.setSubscriptions	(	List	): Set the list of subscription id's for this event.
org.jivesoftware.smackx.pubsub.SubscriptionsExtension: Represents the element holding the list of subscription elements.
org.jivesoftware.smackx.pubsub.SubscriptionsExtension.SubscriptionsExtension	(	List	): Subscriptions to the root node.
org.jivesoftware.smackx.pubsub.SubscriptionsExtension.SubscriptionsExtension	(	String	List	): Subscriptions to the specified node.
org.jivesoftware.smackx.pubsub.SubscriptionsExtension.getSubscriptions	(	): Gets the list of subscriptions.
org.jivesoftware.smackx.pubsub.UnsubscribeExtension: Represents an unsubscribe element.
org.jivesoftware.smackx.pubsub.filter.EventExtensionFilter: Filter for stanzas with the PubSub 'event' extension.
org.jivesoftware.smackx.pubsub.listener.ItemDeleteListener: Defines the listener for item deletion events from a node.
org.jivesoftware.smackx.pubsub.listener.ItemDeleteListener.handleDeletedItems	(	ItemDeleteEvent	): Called when items are deleted from a node the listener is registered with.
org.jivesoftware.smackx.pubsub.listener.ItemDeleteListener.handlePurge	(	): Called when all items are deleted from a node the listener is registered with. 
org.jivesoftware.smackx.pubsub.listener.ItemEventListener: Defines the listener for items being published to a node.
org.jivesoftware.smackx.pubsub.listener.ItemEventListener.handlePublishedItems	(	ItemPublishEvent	): Called whenever an item is published to the node the listener is registered with.
org.jivesoftware.smackx.pubsub.listener.NodeConfigListener: Defines the listener for a node being configured.
org.jivesoftware.smackx.pubsub.listener.NodeConfigListener.handleNodeConfiguration	(	ConfigurationEvent	): Called whenever the node the listener is registered with is configured.
org.jivesoftware.smackx.pubsub.packet.PubSub: The standard PubSub extension of an IQ packet. This is the topmost element of all pubsub requests and replies as defined in the Publish-Subscribe specification.
org.jivesoftware.smackx.pubsub.packet.PubSub.getIQChildElementBuilder	(	IQChildElementXmlStringBuilder	): Returns the XML representation of a pubsub element according the specification. The XML representation will be inside of an iq stanza(/packet) like in the following example:  <iq type='set' id="MlIpV-4" to="pubsub.gato.home" from="gato3@gato.home/Smack"> <pubsub xmlns="http://jabber.org/protocol/pubsub"> : Specific request extension : </pubsub> </iq> 
org.jivesoftware.smackx.pubsub.provider.AffiliationProvider: Parses the affiliation element out of the reply stanza from the server as specified in the affiliation schema.
org.jivesoftware.smackx.pubsub.provider.AffiliationsProvider: Parses the affiliations element out of the reply stanza from the server as specified in the affiliation schema.
org.jivesoftware.smackx.pubsub.provider.ConfigEventProvider: Parses the node configuration element out of the message event stanza from the server as specified in the configuration schema.
org.jivesoftware.smackx.pubsub.provider.EventProvider: Parses the event element out of the message stanza from the server as specified in the event schema.
org.jivesoftware.smackx.pubsub.provider.FormNodeProvider: Parses one of several elements used in pubsub that contain a form of some kind as a child element. The elements and namespaces supported is defined in FormNodeType.
org.jivesoftware.smackx.pubsub.provider.ItemProvider: Parses an item element as is defined in both the BASIC and EVENT namespaces. To parse the item contents, it will use whatever ExtensionElementProvider is registered in smack.providers for its element name and namespace. If no provider is registered, it will return a SimplePayload.
org.jivesoftware.smackx.pubsub.provider.ItemsProvider: Parses the items element out of the message event stanza from the server as specified in the items schema.
org.jivesoftware.smackx.pubsub.provider.PubSubProvider: Parses the root pubsub stanza(/packet) extensions of the IQ stanza(/packet) and returns a PubSub instance.
org.jivesoftware.smackx.pubsub.provider.RetractEventProvider: Parses the retract element out of the message event stanza from the server as specified in the retract schema. This element is a child of the items element.
org.jivesoftware.smackx.pubsub.provider.SimpleNodeProvider: Parses simple elements that only contain a node attribute. This is common amongst many of the elements defined in the pubsub specification. For this common case a NodeExtension is returned. 
org.jivesoftware.smackx.pubsub.provider.SubscriptionProvider: Parses the subscription element out of the pubsub IQ message from the server as specified in the subscription schema.
org.jivesoftware.smackx.pubsub.provider.SubscriptionsProvider: Parses the subscriptions element out of the pubsub IQ message from the server as specified in the subscriptions schema.
org.jivesoftware.smackx.pubsub.util.NodeUtils: Utility for extracting information from packets.
org.jivesoftware.smackx.pubsub.util.NodeUtils.getFormFromPacket	(	Stanza	PubSubElementType	): Get a ConfigureForm from a packet.
org.jivesoftware.smackx.push_notifications.PushNotificationsManager: Push Notifications manager class.
org.jivesoftware.smackx.push_notifications.PushNotificationsManager.disable	(	Jid	String	): Disable push notifications of an specific node.
org.jivesoftware.smackx.push_notifications.PushNotificationsManager.disableAll	(	Jid	): Disable all push notifications.
org.jivesoftware.smackx.push_notifications.PushNotificationsManager.enable	(	Jid	String	): Enable push notifications.
org.jivesoftware.smackx.push_notifications.PushNotificationsManager.enable	(	Jid	String	HashMap	): Enable push notifications.
org.jivesoftware.smackx.push_notifications.PushNotificationsManager.getInstanceFor	(	XMPPConnection	): Get the singleton instance of PushNotificationsManager.
org.jivesoftware.smackx.push_notifications.PushNotificationsManager.isSupportedByServer	(	): Returns true if Push Notifications is supported by the server.
org.jivesoftware.smackx.push_notifications.element.DisablePushNotificationsIQ: Disable Push Notifications IQ.
org.jivesoftware.smackx.push_notifications.element.DisablePushNotificationsIQ.getJid	(	): Get the JID.
org.jivesoftware.smackx.push_notifications.element.DisablePushNotificationsIQ.getNode	(	): Get the node.
org.jivesoftware.smackx.push_notifications.element.EnablePushNotificationsIQ: Enable Push Notifications IQ.
org.jivesoftware.smackx.push_notifications.element.EnablePushNotificationsIQ.getJid	(	): Get the JID.
org.jivesoftware.smackx.push_notifications.element.EnablePushNotificationsIQ.getNode	(	): Get the node.
org.jivesoftware.smackx.push_notifications.element.EnablePushNotificationsIQ.getPublishOptions	(	): Get the publish options.
org.jivesoftware.smackx.push_notifications.element.PushNotificationsElements: Push Notifications elements.
org.jivesoftware.smackx.push_notifications.element.PushNotificationsElements.RemoteDisablingExtension.getNode	(	): Get the node.
org.jivesoftware.smackx.push_notifications.element.PushNotificationsElements.RemoteDisablingExtension.getUserJid	(	): Get the user JID.
org.jivesoftware.smackx.push_notifications.provider.RemoteDisablingProvider: Push Notifications Remote Disabling Provider class.
org.jivesoftware.smackx.receipts.DeliveryReceipt: Represents a message delivery receipt entry as specified by Message Delivery Receipts.
org.jivesoftware.smackx.receipts.DeliveryReceipt.Provider: This Provider parses and returns DeliveryReceipt packets.
org.jivesoftware.smackx.receipts.DeliveryReceipt.from	(	Message	): Get the DeliveryReceipt extension of the message, if any.
org.jivesoftware.smackx.receipts.DeliveryReceipt.getFrom	(	Message	): Get the DeliveryReceipt extension of the packet, if any.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager: Manager for XEP-0184: Message Delivery Receipts. This class implements the manager for DeliveryReceipt support, enabling and disabling of automatic DeliveryReceipt transmission.  You can send delivery receipt requests and listen for incoming delivery receipts as shown in this example:   deliveryReceiptManager.addReceiptReceivedListener(new ReceiptReceivedListener() { void onReceiptReceived(String fromJid, String toJid, String receiptId, Stanza(/Packet) receipt) { // If the receiving entity does not support delivery receipts, // then the receipt received listener may not get invoked. } }); Message message = … DeliveryReceiptRequest.addTo(message); connection.sendStanza(message);  DeliveryReceiptManager can be configured to automatically add delivery receipt requests to every message with autoAddDeliveryReceiptRequests().
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.addDeliveryReceiptRequest	(	Message	): Add a delivery receipt request to an outgoing packet. Only message packets may contain receipt requests as of XEP-0184, therefore only allow Message as the parameter type.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.addReceiptReceivedListener	(	ReceiptReceivedListener	): Get informed about incoming delivery receipts with a ReceiptReceivedListener.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.autoAddDeliveryReceiptRequests	(	): Enables automatic requests of delivery receipts for outgoing messages of normal, chat or headline, and with a Message.Body extension.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.dontAutoAddDeliveryReceiptRequests	(	): Disables automatically requests of delivery receipts for outgoing messages.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.getAutoReceiptMode	(	): Get the currently active auto receipt mode.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.getInstanceFor	(	XMPPConnection	): Obtain the DeliveryReceiptManager responsible for a connection.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.hasDeliveryReceiptRequest	(	Message	): Test if a message requires a delivery receipt.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.isSupported	(	Jid	): Returns true if Delivery Receipts are supported by a given JID.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.receiptMessageFor	(	Message	): Create and return a new message including a delivery receipt extension for the given message.  If messageWithReceiptRequest does not have a Stanza ID set, then null will be returned. 
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.removeReceiptReceivedListener	(	ReceiptReceivedListener	): Stop getting informed about incoming delivery receipts.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.setAutoReceiptMode	(	AutoReceiptMode	): Configure whether the DeliveryReceiptManager should automatically reply to incoming DeliveryReceipts.
org.jivesoftware.smackx.receipts.DeliveryReceiptManager.setDefaultAutoReceiptMode	(	AutoReceiptMode	): Set the default automatic receipt mode for new connections.
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest: Represents a message delivery receipt request entry as specified by Message Delivery Receipts.
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest.Provider: This Provider parses and returns DeliveryReceiptRequest packets.
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest.addTo	(	Message	): Add a delivery receipt request to an outgoing packet. Only message packets may contain receipt requests as of XEP-0184, therefore only allow Message as the parameter type.
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest.from	(	Stanza	): Get the DeliveryReceiptRequest extension of the packet, if any.
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest.getFrom	(	Stanza	): Get the DeliveryReceiptRequest extension of the packet, if any.
org.jivesoftware.smackx.receipts.ReceiptReceivedListener: Interface for received receipt notifications. Implement this and add a listener to get notified. 
org.jivesoftware.smackx.receipts.ReceiptReceivedListener.onReceiptReceived	(	Jid	Jid	String	Stanza	): Callback invoked when a new receipt got received.  receiptId correspondents to the message ID, which can be obtained with getStanzaId(). 
org.jivesoftware.smackx.search.ReportedData: Represents a set of data results returned as part of a search. The report is structured in columns and rows.
org.jivesoftware.smackx.search.ReportedData.Column: Represents the columns definition of the reported data.
org.jivesoftware.smackx.search.ReportedData.Column.Column	(	String	String	FormField.Type	): Creates a new column with the specified definition.
org.jivesoftware.smackx.search.ReportedData.Column.getLabel	(	): Returns the column's label.
org.jivesoftware.smackx.search.ReportedData.Column.getType	(	): Returns the column's data format.
org.jivesoftware.smackx.search.ReportedData.Column.getVariable	(	): Returns the variable name that the column is showing.
org.jivesoftware.smackx.search.ReportedData.Field.getValues	(	): Returns a List of the values reported as part of the search.
org.jivesoftware.smackx.search.ReportedData.Field.getVariable	(	): Returns the variable name that the field represents.
org.jivesoftware.smackx.search.ReportedData.ReportedData	(	DataForm	): Creates a new ReportedData based on the returned dataForm from a search (namespace "jabber:iq:search").
org.jivesoftware.smackx.search.ReportedData.Row.getFields	(	): Returns the fields that define the data that goes with the item.
org.jivesoftware.smackx.search.ReportedData.Row.getValues	(	String	): Returns the values of the field whose variable matches the requested variable.
org.jivesoftware.smackx.search.ReportedData.addColumn	(	Column	): Adds a new Column.
org.jivesoftware.smackx.search.ReportedData.addRow	(	Row	): Adds a new Row.
org.jivesoftware.smackx.search.ReportedData.getColumns	(	): Returns a List of the columns returned from a search.
org.jivesoftware.smackx.search.ReportedData.getReportedDataFrom	(	Stanza	): Returns a new ReportedData if the stanza(/packet) is used for reporting data and includes an extension that matches the elementName and namespace "x","jabber:x:data".
org.jivesoftware.smackx.search.ReportedData.getRows	(	): Returns a List of the rows returned from a search.
org.jivesoftware.smackx.search.ReportedData.getTitle	(	): Returns the report's title. It is similar to the title on a web page or an X window.
org.jivesoftware.smackx.search.SimpleUserSearch: SimpleUserSearch is used to support the non-dataform type of XEP 55. This provides the mechanism for allowing always type ReportedData to be returned by any search result, regardless of the form of the data returned from the server.
org.jivesoftware.smackx.search.UserSearch: Implements the protocol currently used to search information repositories on the Jabber network. To date, the jabber:iq:search protocol has been used mainly to search for people who have registered with user directories (e.g., the "Jabber User Directory" hosted at users.jabber.org). However, the jabber:iq:search protocol is not limited to user directories, and could be used to search other Jabber information repositories (such as chatroom directories) or even to provide a Jabber interface to conventional search engines.  The basic functionality is to query an information repository regarding the possible search fields, to send a search query, and to receive search results.
org.jivesoftware.smackx.search.UserSearch.Provider: Internal Search service Provider.
org.jivesoftware.smackx.search.UserSearch.UserSearch	(	): Creates a new instance of UserSearch.
org.jivesoftware.smackx.search.UserSearch.getSearchForm	(	XMPPConnection	DomainBareJid	): Returns the form for all search fields supported by the search service.
org.jivesoftware.smackx.search.UserSearch.sendSearchForm	(	XMPPConnection	Form	DomainBareJid	): Sends the filled out answer form to be sent and queried by the search service.
org.jivesoftware.smackx.search.UserSearch.sendSimpleSearchForm	(	XMPPConnection	Form	DomainBareJid	): Sends the filled out answer form to be sent and queried by the search service.
org.jivesoftware.smackx.search.UserSearchManager: The UserSearchManager is a facade built upon Jabber Search Services (XEP-055) to allow for searching repositories on a Jabber Server. This implementation allows for transparency of implementation of searching (DataForms or No DataForms), but allows the user to simply use the DataForm model for both types of support.  XMPPConnection con = new XMPPTCPConnection("jabber.org"); con.login("john", "doe"); UserSearchManager search = new UserSearchManager(con, "users.jabber.org"); Form searchForm = search.getSearchForm(); Form answerForm = searchForm.createAnswerForm(); answerForm.setAnswer("last", "DeMoro"); ReportedData data = search.getSearchResults(answerForm); // Use Returned Data 
org.jivesoftware.smackx.search.UserSearchManager.UserSearchManager	(	XMPPConnection	): Creates a new UserSearchManager.
org.jivesoftware.smackx.search.UserSearchManager.getSearchForm	(	DomainBareJid	): Returns the form to fill out to perform a search.
org.jivesoftware.smackx.search.UserSearchManager.getSearchResults	(	Form	DomainBareJid	): Submits a search form to the server and returns the resulting information in the form of ReportedData.
org.jivesoftware.smackx.search.UserSearchManager.getSearchServices	(	): Returns a collection of search services found on the server.
org.jivesoftware.smackx.sharedgroups.SharedGroupManager: A SharedGroupManager provides services for discovering the shared groups where a user belongs. Important note: This functionality is not part of the XMPP spec and it will only work with Wildfire.
org.jivesoftware.smackx.sharedgroups.SharedGroupManager.getSharedGroups	(	XMPPConnection	): Returns the collection that will contain the name of the shared groups where the user logged in with the specified session belongs.
org.jivesoftware.smackx.sharedgroups.packet.SharedGroupsInfo: IQ stanza(/packet) used for discovering the user's shared groups and for getting the answer back from the server. Important note: This functionality is not part of the XMPP spec and it will only work with Wildfire.
org.jivesoftware.smackx.sharedgroups.packet.SharedGroupsInfo.Provider: Internal Search service Provider.
org.jivesoftware.smackx.sharedgroups.packet.SharedGroupsInfo.getGroups	(	): Returns a collection with the shared group names returned from the server.
org.jivesoftware.smackx.shim.packet.Header: Represents a Header entry as specified by the Stanza Headers and Internet Metadata (SHIM).
org.jivesoftware.smackx.shim.packet.HeadersExtension: Extension representing a list of headers as specified in Stanza Headers and Internet Metadata (SHIM).
org.jivesoftware.smackx.shim.packet.HeadersExtension.from	(	Stanza	): Return the SHIM headers extension of this stanza or null if there is none.
org.jivesoftware.smackx.shim.provider.HeaderProvider: Parses the header element as defined in Stanza Headers and Internet Metadata (SHIM).
org.jivesoftware.smackx.shim.provider.HeadersProvider: Parses the headers element as defined in Stanza Headers and Internet Metadata (SHIM).
org.jivesoftware.smackx.si.packet.StreamInitiation: The process by which two entities initiate a stream.
org.jivesoftware.smackx.si.packet.StreamInitiation.Feature: The feature negotiation portion of the StreamInitiation packet.
org.jivesoftware.smackx.si.packet.StreamInitiation.Feature.Feature	(	DataForm	): The dataform can be provided as part of the constructor.
org.jivesoftware.smackx.si.packet.StreamInitiation.Feature.getData	(	): Returns the dataform associated with the feature negotiation.
org.jivesoftware.smackx.si.packet.StreamInitiation.File:  size: The size, in bytes, of the data to be sent. name: The name of the file that the Sender wishes to send. date: The last modification time of the file. This is specified using the DateTime profile as described in Jabber Date and Time Profiles. hash: The MD5 sum of the file contents.    <desc> is used to provide a sender-generated description of the file so the receiver can better understand what is being sent. It MUST NOT be sent in the result.   When <range> is sent in the offer, it should have no attributes. This signifies that the sender can do ranged transfers. When a Stream Initiation result is sent with the  element, it uses these attributes:   offset: Specifies the position, in bytes, to start transferring the file data from. This defaults to zero (0) if not specified. length - Specifies the number of bytes to retrieve starting at offset. This defaults to the length of the file from offset to the end.    Both attributes are OPTIONAL on the <range> element. Sending no attributes is synonymous with not sending the <range> element. When no <range> element is sent in the Stream Initiation result, the Sender MUST send the complete file starting at offset 0. More generally, data is sent over the stream byte for byte starting at the offset position for the length specified.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.File	(	String	long	): Constructor providing the name of the file and its size.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.getDate	(	): Returns the date that the file was last modified.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.getDesc	(	): Returns the description of the file.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.getHash	(	): Returns the MD5 sum of the file's contents.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.getName	(	): Returns the file's name.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.getSize	(	): Returns the file's size.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.isRanged	(	): Returns whether or not the initiator can support a range for the file tranfer.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.setDate	(	Date	): Sets the date that the file was last modified.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.setDesc	(	String	): Sets the description of the file.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.setHash	(	String	): Sets the MD5 sum of the file's contents.
org.jivesoftware.smackx.si.packet.StreamInitiation.File.setRanged	(	boolean	): True if a range can be provided and false if it cannot.
org.jivesoftware.smackx.si.packet.StreamInitiation.getFeatureNegotiationForm	(	): Returns the data form which contains the valid methods of stream neotiation and transfer.
org.jivesoftware.smackx.si.packet.StreamInitiation.getFile	(	): Returns the file containing the information about the request.
org.jivesoftware.smackx.si.packet.StreamInitiation.getMimeType	(	): Identifies the type of file that is desired to be transfered.
org.jivesoftware.smackx.si.packet.StreamInitiation.getSessionID	(	): Uniquely identifies a stream initiation to the recipient.
org.jivesoftware.smackx.si.packet.StreamInitiation.setFeatureNegotiationForm	(	DataForm	): Sets the data form which contains the valid methods of stream neotiation and transfer.
org.jivesoftware.smackx.si.packet.StreamInitiation.setFile	(	File	): Sets the file which contains the information pertaining to the file to be transfered.
org.jivesoftware.smackx.si.packet.StreamInitiation.setMimeType	(	String	): The "mime-type" attribute identifies the MIME-type for the data across the stream. This attribute MUST be a valid MIME-type as registered with the Internet Assigned Numbers Authority (IANA) [3] (specifically, as listed at ). During negotiation, this attribute SHOULD be present, and is otherwise not required. If not included during negotiation, its value is assumed to be "binary/octect-stream".
org.jivesoftware.smackx.si.packet.StreamInitiation.setSessionID	(	String	): The "id" attribute is an opaque identifier. This attribute MUST be present on type='set', and MUST be a valid string. This SHOULD NOT be sent back on type='result', since the  "id" attribute provides the only context needed. This value is generated by the Sender, and the same value MUST be used throughout a session when talking to the Receiver.
org.jivesoftware.smackx.si.provider.StreamInitiationProvider: The StreamInitiationProvider parses StreamInitiation packets.
org.jivesoftware.smackx.time.packet.Time: A Time IQ packet, which is used by XMPP clients to exchange their respective local times. Clients that wish to fully support the entity time protocol should register a PacketListener for incoming time requests that then respond with the local time.
org.jivesoftware.smackx.time.packet.Time.Time	(	Calendar	): Creates a new Time instance using the specified calendar instance as the time value to send.
org.jivesoftware.smackx.time.packet.Time.getTime	(	): Returns the local time or null if the time hasn't been set.
org.jivesoftware.smackx.time.packet.Time.getTzo	(	): Returns the time zone.
org.jivesoftware.smackx.time.packet.Time.getUtc	(	): Returns the time as a UTC formatted String using the format CCYY-MM-DDThh:mm:ssZ.
org.jivesoftware.smackx.time.packet.Time.setTime	(	Date	): Sets the time using the local time.
org.jivesoftware.smackx.time.packet.Time.setTzo	(	String	): Sets the time zone offset.
org.jivesoftware.smackx.time.packet.Time.setUtc	(	String	): Sets the time using UTC formatted String in the format CCYY-MM-DDThh:mm:ssZ.
org.jivesoftware.smackx.vcardtemp.VCardManager.getInstanceFor	(	XMPPConnection	): Retrieves a VCardManager for the specified XMPPConnection, creating one if it doesn't already exist.
org.jivesoftware.smackx.vcardtemp.VCardManager.isSupported	(	Jid	): Returns true if the given entity understands the vCard-XML format and allows the exchange of such.
org.jivesoftware.smackx.vcardtemp.VCardManager.isSupported	(	Jid	XMPPConnection	): Returns true if the given entity understands the vCard-XML format and allows the exchange of such.
org.jivesoftware.smackx.vcardtemp.VCardManager.loadVCard	(	): Load the VCard of the current user.
org.jivesoftware.smackx.vcardtemp.VCardManager.loadVCard	(	EntityBareJid	): Load VCard information for a given user.
org.jivesoftware.smackx.vcardtemp.VCardManager.saveVCard	(	VCard	): Save this vCard for the user connected by 'connection'. XMPPConnection should be authenticated and not anonymous.
org.jivesoftware.smackx.vcardtemp.packet.VCard: A VCard class for use with the SMACK jabber library.  You should refer to the XEP-54 documentation.  Please note that this class is incomplete but it does provide the most commonly found information in vCards. Also remember that VCard transfer is not a standard, and the protocol may change or be replaced.  Usage:   // To save VCard:  VCard vCard = new VCard(); vCard.setFirstName("kir"); vCard.setLastName("max"); vCard.setEmailHome("foo@fee.bar"); vCard.setJabberId("jabber@id.org"); vCard.setOrganization("Jetbrains, s.r.o"); vCard.setNickName("KIR");  vCard.setField("TITLE", "Mr"); vCard.setAddressFieldHome("STREET", "Some street"); vCard.setAddressFieldWork("CTRY", "US"); vCard.setPhoneWork("FAX", "3443233");  vCard.save(connection);  // To load VCard:  VCard vCard = new VCard(); vCard.load(conn); // load own VCard vCard.load(conn, "joe@foo.bar"); // load someone's VCard 
org.jivesoftware.smackx.vcardtemp.packet.VCard.getAddressFieldHome	(	String	): Get home address field.
org.jivesoftware.smackx.vcardtemp.packet.VCard.getAddressFieldWork	(	String	): Get work address field.
org.jivesoftware.smackx.vcardtemp.packet.VCard.getAvatar	(	): Return the byte representation of the avatar(if one exists), otherwise returns null if no avatar could be found. Example 1  // Load Avatar from VCard byte[] avatarBytes = vCard.getAvatar();  // To create an ImageIcon for Swing applications ImageIcon icon = new ImageIcon(avatar);  // To create just an image object from the bytes ByteArrayInputStream bais = new ByteArrayInputStream(avatar); try { Image image = ImageIO.read(bais); } catch (IOException e) { e.printStackTrace(); } 
org.jivesoftware.smackx.vcardtemp.packet.VCard.getAvatarHash	(	): Returns the SHA-1 Hash of the Avatar image.
org.jivesoftware.smackx.vcardtemp.packet.VCard.getAvatarMimeType	(	): Returns the MIME Type of the avatar or null if none is set.
org.jivesoftware.smackx.vcardtemp.packet.VCard.getBytes	(	URL	): Common code for getting the bytes of a url.
org.jivesoftware.smackx.vcardtemp.packet.VCard.getField	(	String	): Set generic VCard field.
org.jivesoftware.smackx.vcardtemp.packet.VCard.getPhoneHome	(	String	): Get home phone number.
org.jivesoftware.smackx.vcardtemp.packet.VCard.getPhoneWork	(	String	): Get work phone number.
org.jivesoftware.smackx.vcardtemp.packet.VCard.load	(	XMPPConnection	): Load VCard information for a connected user. XMPPConnection should be authenticated and not anonymous.
org.jivesoftware.smackx.vcardtemp.packet.VCard.load	(	XMPPConnection	EntityBareJid	): Load VCard information for a given user. XMPPConnection should be authenticated and not anonymous.
org.jivesoftware.smackx.vcardtemp.packet.VCard.removeAvatar	(	): Removes the avatar from the vCard. This is done by setting the PHOTO value to the empty string as defined in XEP-0153
org.jivesoftware.smackx.vcardtemp.packet.VCard.save	(	XMPPConnection	): Save this vCard for the user connected by 'connection'. XMPPConnection should be authenticated and not anonymous.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setAddressFieldHome	(	String	String	): Set home address field.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setAddressFieldWork	(	String	String	): Set work address field.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setAvatar	(	String	String	): Specify the Avatar used for this vCard.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setAvatar	(	URL	): Set the avatar for the VCard by specifying the url to the image.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setAvatar	(	byte[]	): Specify the bytes of the JPEG for the avatar to use. If bytes is null, then the avatar will be removed. 'image/jpeg' will be used as MIME type.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setAvatar	(	byte[]	String	): Specify the bytes for the avatar to use as well as the mime type.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setEncodedImage	(	String	): Set the encoded avatar string. This is used by the provider.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setField	(	String	String	): Set generic VCard field.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setField	(	String	String	boolean	): Set generic, unescapable VCard field. If unescabale is set to true, XML maybe a part of the value.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setPhoneHome	(	String	String	): Set home phone number.
org.jivesoftware.smackx.vcardtemp.packet.VCard.setPhoneWork	(	String	String	): Set work phone number.
org.jivesoftware.smackx.vcardtemp.provider.VCardProvider: vCard provider.
org.jivesoftware.smackx.workgroup.MetaData: MetaData stanza(/packet) extension.
org.jivesoftware.smackx.workgroup.MetaData.getMetaData	(	): Get meta data.
org.jivesoftware.smackx.workgroup.QueueUser: An immutable class which wraps up customer-in-queue data return from the server; depending on the type of information dispatched from the server, not all information will be available in any given instance.
org.jivesoftware.smackx.workgroup.QueueUser.QueueUser	(	String	int	int	Date	): Queue user.
org.jivesoftware.smackx.workgroup.QueueUser.getEstimatedRemainingTime	(	): Get the estimated remaining time. 
org.jivesoftware.smackx.workgroup.QueueUser.getQueueJoinTimestamp	(	): Get queue join timestamp.
org.jivesoftware.smackx.workgroup.QueueUser.getQueuePosition	(	): Get queue position.
org.jivesoftware.smackx.workgroup.QueueUser.getUserID	(	): Get user id.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation: An immutable class wrapping up the basic information which comprises a group chat invitation.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.WorkgroupInvitation	(	Jid	Jid	Jid	String	String	Jid	): This calls the 5-argument constructor with a null MetaData argument value.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.WorkgroupInvitation	(	Jid	Jid	Jid	String	String	Jid	Map	): WorkgroupInvitation.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.getGroupChatName	(	): Get the group chat name.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.getInvitationSender	(	): Get invitation sender.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.getMessageBody	(	): Get the message body.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.getMetaData	(	): Get meta data.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.getSessionID	(	): Get the session id.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.getUniqueID	(	): Get the unique id.
org.jivesoftware.smackx.workgroup.WorkgroupInvitation.getWorkgroupName	(	): Get workgroup name.
org.jivesoftware.smackx.workgroup.WorkgroupInvitationListener: An interface which all classes interested in hearing about group chat invitations should implement.
org.jivesoftware.smackx.workgroup.WorkgroupInvitationListener.invitationReceived	(	WorkgroupInvitation	): The implementing class instance will be notified via this method when an invitation to join a group chat has been received from the server.
org.jivesoftware.smackx.workgroup.agent.Agent: The Agent class is used to represent one agent in a Workgroup Queue.
org.jivesoftware.smackx.workgroup.agent.Agent.Agent	(	XMPPConnection	Jid	): Constructs an Agent.
org.jivesoftware.smackx.workgroup.agent.Agent.getName	(	): Return the agents name.
org.jivesoftware.smackx.workgroup.agent.Agent.getUser	(	): Return the agents JID.
org.jivesoftware.smackx.workgroup.agent.Agent.setName	(	String	): Changes the name of the agent in the server. The server may have this functionality disabled for all the agents or for this agent in particular. If the agent is not allowed to change his name then an exception will be thrown with a service_unavailable error code.
org.jivesoftware.smackx.workgroup.agent.AgentRoster: Manges information about the agents in a workgroup and their presence.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.AgentRoster	(	XMPPConnection	Jid	): Constructs a new AgentRoster.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.AgentStatusListener: Listens for all roster packets and processes them.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.PresencePacketListener: Listens for all presence packets and processes them.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.addListener	(	AgentRosterListener	): Adds a listener to this roster. The listener will be fired anytime one or more changes to the roster are pushed from the server.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.contains	(	Jid	): Returns true if the specified XMPP address is an agent in the workgroup.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.fireEvent	(	int	Object	): Fires event to listeners.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.getAgentCount	(	): Returns a count of all agents in the workgroup.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.getAgents	(	): Returns all agents (String JID values) in the workgroup.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.getPresence	(	Jid	): Returns the presence info for a particular agent, or null if the agent is unavailable (offline) or if no presence information is available.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.getPresenceMapKey	(	Jid	): Returns the key to use in the presenceMap for a fully qualified xmpp ID. The roster can contain any valid address format such us "domain/resource", "user@domain" or "user@domain/resource". If the roster contains an entry associated with the fully qualified xmpp ID then use the fully qualified xmpp ID as the key in presenceMap, otherwise use the bare address. Note: When the key in presenceMap is a fully qualified xmpp ID, the userPresences is useless since it will always contain one entry for the user.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.reload	(	): Reloads the entire roster from the server. This is an asynchronous operation, which means the method will return immediately, and the roster will be reloaded at a later point when the server responds to the reload request.
org.jivesoftware.smackx.workgroup.agent.AgentRoster.removeListener	(	AgentRosterListener	): Removes a listener from this roster. The listener will be fired anytime one or more changes to the roster are pushed from the server.
org.jivesoftware.smackx.workgroup.agent.AgentRosterListener: Agent roster listener.
org.jivesoftware.smackx.workgroup.agent.AgentSession: This class embodies the agent's active presence within a given workgroup. The application should have N instances of this class, where N is the number of workgroups to which the owning agent of the application belongs. This class provides all functionality that a session within a given workgroup is expected to have from an agent's perspective -- setting the status, tracking the status of queues to which the agent belongs within the workgroup, and dequeuing customers.
org.jivesoftware.smackx.workgroup.agent.AgentSession.AgentSession	(	Jid	XMPPConnection	): Constructs a new agent session instance. Note, the setOnline() method must be called with an argument of true to mark the agent as available to accept chat requests.
org.jivesoftware.smackx.workgroup.agent.AgentSession.addInvitationListener	(	WorkgroupInvitationListener	): Adds an invitation listener.
org.jivesoftware.smackx.workgroup.agent.AgentSession.addOfferListener	(	OfferListener	): Adds an offer listener.
org.jivesoftware.smackx.workgroup.agent.AgentSession.close	(	): Close the agent session. The underlying connection will remain opened but the stanza(/packet) listeners that were added by this agent session will be removed.
org.jivesoftware.smackx.workgroup.agent.AgentSession.dequeueUser	(	String	): Removes a user from the workgroup queue. This is an administrative action that the  The agent is not guaranteed of having privileges to perform this action; an exception denying the request may be thrown.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getAgent	(	): Returns the Agent associated to this session.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getAgentHistory	(	String	int	Date	): Retrieves the AgentChatHistory associated with a particular agent jid.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getAgentRoster	(	): Returns the agent roster for the workgroup, which contains.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getChatMetadata	(	String	): Query for metadata associated with a session id.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getGenericSettings	(	XMPPConnection	String	): Returns the generic metadata of the workgroup the agent belongs to.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getMacros	(	boolean	): Asks the workgroup for it's Global Macros.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getMaxChats	(	): Returns the maximum number of chats the agent can participate in.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getMetaData	(	String	): Allows the retrieval of meta data for a specified key.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getNote	(	String	): Retrieves the ChatNote associated with a given chat session.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getOccupantsInfo	(	String	): Asks the workgroup for information about the occupants of the specified room. The returned information will include the real JID of the occupants, the nickname of the user in the room as well as the date when the user joined the room.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getPresenceMode	(	): Returns the agent's current presence mode.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getQueue	(	Resourcepart	): Get queue.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getQueue	(	String	): Get queue.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getSearchSettings	(	): Asks the workgroup for it's Search Settings.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getTranscript	(	String	): Returns the full conversation transcript of a given session.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getTranscriptSearchForm	(	): Returns the Form to use for searching transcripts. It is unlikely that the server will change the form (without a restart) so it is safe to keep the returned form for future submissions.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getTranscripts	(	Jid	): Returns the transcripts of a given user. The answer will contain the complete history of conversations that a user had.
org.jivesoftware.smackx.workgroup.agent.AgentSession.getWorkgroupJID	(	): Get workgroup JID.
org.jivesoftware.smackx.workgroup.agent.AgentSession.isOnline	(	): Returns true if the agent is online with the workgroup.
org.jivesoftware.smackx.workgroup.agent.AgentSession.removeInvitationListener	(	WorkgroupInvitationListener	): Removes an invitation listener.
org.jivesoftware.smackx.workgroup.agent.AgentSession.removeMetaData	(	String	): Allows the removal of data from the agent's meta data, if the key represents existing data, the revised meta data will be rebroadcast in an agent's presence broadcast.
org.jivesoftware.smackx.workgroup.agent.AgentSession.removeOfferListener	(	OfferListener	): Removes an offer listener.
org.jivesoftware.smackx.workgroup.agent.AgentSession.saveMacros	(	MacroGroup	): Persists the Personal Macro for an agent.
org.jivesoftware.smackx.workgroup.agent.AgentSession.searchTranscripts	(	Form	): Submits the completed form and returns the result of the transcript search. The result will include all the data returned from the server so be careful with the amount of data that the search may return.
org.jivesoftware.smackx.workgroup.agent.AgentSession.sendRoomInvitation	(	RoomInvitation.Type	String	String	String	): Invites a user or agent to an existing session support. The provided invitee's JID can be of a user, an agent, a queue or a workgroup. In the case of a queue or a workgroup the workgroup service will decide the best agent to receive the invitation. This method will return either when the service returned an ACK of the request or if an error occured while requesting the invitation. After sending the ACK the service will send the invitation to the target entity. When dealing with agents the common sequence of offer-response will be followed. However, when sending an invitation to a user a standard MUC invitation will be sent. The agent or user that accepted the offer MUST join the room. Failing to do so will make the invitation to fail. The inviter will eventually receive a message error indicating that the invitee accepted the offer but failed to join the room. Different situations may lead to a failed invitation. Possible cases are: 1) all agents rejected the offer and ther are no agents available, 2) the agent that accepted the offer failed to join the room or 2) the user that received the MUC invitation never replied or joined the room. In any of these cases (or other failing cases) the inviter will get an error message with the failed notification.
org.jivesoftware.smackx.workgroup.agent.AgentSession.sendRoomTransfer	(	RoomTransfer.Type	String	String	String	): Transfer an existing session support to another user or agent. The provided invitee's JID can be of a user, an agent, a queue or a workgroup. In the case of a queue or a workgroup the workgroup service will decide the best agent to receive the invitation. This method will return either when the service returned an ACK of the request or if an error occured while requesting the transfer. After sending the ACK the service will send the invitation to the target entity. When dealing with agents the common sequence of offer-response will be followed. However, when sending an invitation to a user a standard MUC invitation will be sent. Once the invitee joins the support room the workgroup service will kick the inviter from the room. Different situations may lead to a failed transfers. Possible cases are: 1) all agents rejected the offer and there are no agents available, 2) the agent that accepted the offer failed to join the room or 2) the user that received the MUC invitation never replied or joined the room. In any of these cases (or other failing cases) the inviter will get an error message with the failed notification.
org.jivesoftware.smackx.workgroup.agent.AgentSession.setMetaData	(	String	String	): Allows the addition of a new key-value pair to the agent's meta data, if the value is new data, the revised meta data will be rebroadcast in an agent's presence broadcast.
org.jivesoftware.smackx.workgroup.agent.AgentSession.setNote	(	String	String	): Creates a ChatNote that will be mapped to the given chat session.
org.jivesoftware.smackx.workgroup.agent.AgentSession.setOnline	(	boolean	): Sets whether the agent is online with the workgroup. If the user tries to go online with the workgroup but is not allowed to be an agent, an XMPPError with error code 401 will be thrown.
org.jivesoftware.smackx.workgroup.agent.AgentSession.setStatus	(	Presence.Mode	String	): Sets the agent's current status with the workgroup. The presence mode affects how offers are routed to the agent. The possible presence modes with their meanings are as follows:  Presence.Mode.AVAILABLE -- (Default) the agent is available for more chats (equivalent to Presence.Mode.CHAT). Presence.Mode.DO_NOT_DISTURB -- the agent is busy and should not be disturbed. However, special case, or extreme urgency chats may still be offered to the agent. Presence.Mode.AWAY -- the agent is not available and should not have a chat routed to them (equivalent to Presence.Mode.EXTENDED_AWAY).
org.jivesoftware.smackx.workgroup.agent.AgentSession.setStatus	(	Presence.Mode	int	): Sets the agent's current status with the workgroup. The presence mode affects how offers are routed to the agent. The possible presence modes with their meanings are as follows:  Presence.Mode.AVAILABLE -- (Default) the agent is available for more chats (equivalent to Presence.Mode.CHAT). Presence.Mode.DO_NOT_DISTURB -- the agent is busy and should not be disturbed. However, special case, or extreme urgency chats may still be offered to the agent. Presence.Mode.AWAY -- the agent is not available and should not have a chat routed to them (equivalent to Presence.Mode.EXTENDED_AWAY).  The max chats value is the maximum number of chats the agent is willing to have routed to them at once. Some servers may be configured to only accept max chat values in a certain range; for example, between two and five. In that case, the maxChats value the agent sends may be adjusted by the server to a value within that range.
org.jivesoftware.smackx.workgroup.agent.AgentSession.setStatus	(	Presence.Mode	int	String	): Sets the agent's current status with the workgroup. The presence mode affects how offers are routed to the agent. The possible presence modes with their meanings are as follows:  Presence.Mode.AVAILABLE -- (Default) the agent is available for more chats (equivalent to Presence.Mode.CHAT). Presence.Mode.DO_NOT_DISTURB -- the agent is busy and should not be disturbed. However, special case, or extreme urgency chats may still be offered to the agent. Presence.Mode.AWAY -- the agent is not available and should not have a chat routed to them (equivalent to Presence.Mode.EXTENDED_AWAY).  The max chats value is the maximum number of chats the agent is willing to have routed to them at once. Some servers may be configured to only accept max chat values in a certain range; for example, between two and five. In that case, the maxChats value the agent sends may be adjusted by the server to a value within that range.
org.jivesoftware.smackx.workgroup.agent.InvitationRequest: Request sent by an agent to invite another agent or user.
org.jivesoftware.smackx.workgroup.agent.Offer: A class embodying the semantic agent chat offer; specific instances allow the acceptance or rejecting of the offer.
org.jivesoftware.smackx.workgroup.agent.Offer.AcceptPacket: Stanza(/Packet) for accepting an offer.
org.jivesoftware.smackx.workgroup.agent.Offer.Offer	(	XMPPConnection	AgentSession	Jid	Jid	Jid	Date	String	Map	OfferContent	): Creates a new offer.
org.jivesoftware.smackx.workgroup.agent.Offer.RejectPacket: Stanza(/Packet) for rejecting offers.
org.jivesoftware.smackx.workgroup.agent.Offer.accept	(	): Accepts the offer.
org.jivesoftware.smackx.workgroup.agent.Offer.getContent	(	): Returns the content of the offer. The content explains the reason for the offer (e.g. user request, transfer)
org.jivesoftware.smackx.workgroup.agent.Offer.getExpiresDate	(	): The date when the offer will expire. The agent must accept() the offer before the expiration date or the offer will lapse and be routed to another agent. Alternatively, the agent can reject() the offer at any time if they don't wish to accept it..
org.jivesoftware.smackx.workgroup.agent.Offer.getMetaData	(	): The meta-data associated with the offer.
org.jivesoftware.smackx.workgroup.agent.Offer.getSessionID	(	): The session ID associated with the offer.
org.jivesoftware.smackx.workgroup.agent.Offer.getUserID	(	): Returns the userID that the offer originates from. In most cases, the userID will simply be the JID of the requesting user. However, users can also manually specify a userID for their request. In that case, that value will be returned.
org.jivesoftware.smackx.workgroup.agent.Offer.getUserJID	(	): Returns the JID of the user that made the offer request.
org.jivesoftware.smackx.workgroup.agent.Offer.getWorkgroupName	(	): The fully qualified name of the workgroup (eg support@example.com).
org.jivesoftware.smackx.workgroup.agent.Offer.isAccepted	(	): Returns true if the agent accepted this offer.
org.jivesoftware.smackx.workgroup.agent.Offer.isRejected	(	): Return true if the agent rejected this offer.
org.jivesoftware.smackx.workgroup.agent.Offer.reject	(	): Rejects the offer.
org.jivesoftware.smackx.workgroup.agent.OfferConfirmation.NotifyServicePacket: Stanza(/Packet) for notifying server of RoomName
org.jivesoftware.smackx.workgroup.agent.OfferConfirmationListener.offerConfirmed	(	OfferConfirmation	): The implementing class instance will be notified via this when the AgentSession has confirmed the acceptance of the Offer. The instance will then have the ability to create the room and send the service the room name created for tracking.
org.jivesoftware.smackx.workgroup.agent.OfferContent: Type of content being included in the offer. The content actually explains the reason the agent is getting an offer.
org.jivesoftware.smackx.workgroup.agent.OfferContent.isInvitation	(	): Returns true if the content of the offer is related to a room invitation made by another agent. This type of offer include the room to join, metadata sent by the user while joining the queue and the reason why the agent is being invited.
org.jivesoftware.smackx.workgroup.agent.OfferContent.isTransfer	(	): Returns true if the content of the offer is related to a service transfer made by another agent. This type of offers include the room to join, metadata sent by the user while joining the queue and the reason why the agent is receiving the transfer offer.
org.jivesoftware.smackx.workgroup.agent.OfferContent.isUserRequest	(	): Returns true if the content of the offer is related to a user request. This is the most common type of offers an agent should receive.
org.jivesoftware.smackx.workgroup.agent.OfferListener: An interface which all classes interested in hearing about chat offers associated to a particular AgentSession instance should implement.
org.jivesoftware.smackx.workgroup.agent.OfferListener.offerReceived	(	Offer	): The implementing class instance will be notified via this when the AgentSession has received an offer for a chat. The instance will then have the ability to accept, reject, or ignore the request (resulting in a revocation-by-timeout).
org.jivesoftware.smackx.workgroup.agent.OfferListener.offerRevoked	(	RevokedOffer	): The implementing class instance will be notified via this when the AgentSessino has received a revocation of a previously extended offer.
org.jivesoftware.smackx.workgroup.agent.QueueUsersListener.averageWaitTimeUpdated	(	WorkgroupQueue	int	): The average wait time of the queue was updated.
org.jivesoftware.smackx.workgroup.agent.QueueUsersListener.oldestEntryUpdated	(	WorkgroupQueue	Date	): The date of oldest entry waiting in the queue was updated.
org.jivesoftware.smackx.workgroup.agent.QueueUsersListener.statusUpdated	(	WorkgroupQueue	WorkgroupQueue.Status	): The status of the queue was updated.
org.jivesoftware.smackx.workgroup.agent.QueueUsersListener.usersUpdated	(	WorkgroupQueue	Set	): The list of users waiting in the queue was updated.
org.jivesoftware.smackx.workgroup.agent.RevokedOffer: An immutable simple class to embody the information concerning a revoked offer, this is namely the reason, the workgroup, the userJID, and the timestamp which the message was received.
org.jivesoftware.smackx.workgroup.agent.RevokedOffer.RevokedOffer	(	Jid	Jid	Jid	String	String	Date	): 
org.jivesoftware.smackx.workgroup.agent.RevokedOffer.getReason	(	): Get reason.
org.jivesoftware.smackx.workgroup.agent.RevokedOffer.getSessionID	(	): Get the sesion id.
org.jivesoftware.smackx.workgroup.agent.RevokedOffer.getTimestamp	(	): Get the timestamp.
org.jivesoftware.smackx.workgroup.agent.RevokedOffer.getUserID	(	): Get user id.
org.jivesoftware.smackx.workgroup.agent.RevokedOffer.getWorkgroupName	(	): Get workgroup name.
org.jivesoftware.smackx.workgroup.agent.TranscriptManager: A TranscriptManager helps to retrieve the full conversation transcript of a given session getTranscript() or to retrieve a list with the summary of all the conversations that a user had getTranscripts().
org.jivesoftware.smackx.workgroup.agent.TranscriptManager.getTranscript	(	Jid	String	): Returns the full conversation transcript of a given session.
org.jivesoftware.smackx.workgroup.agent.TranscriptManager.getTranscripts	(	Jid	Jid	): Returns the transcripts of a given user. The answer will contain the complete history of conversations that a user had.
org.jivesoftware.smackx.workgroup.agent.TranscriptSearchManager: A TranscriptSearchManager helps to retrieve the form to use for searching transcripts getSearchForm() or to submit a search form and return the results of the search submitSearch().
org.jivesoftware.smackx.workgroup.agent.TranscriptSearchManager.getSearchForm	(	DomainBareJid	): Returns the Form to use for searching transcripts. It is unlikely that the server will change the form (without a restart) so it is safe to keep the returned form for future submissions.
org.jivesoftware.smackx.workgroup.agent.TranscriptSearchManager.submitSearch	(	DomainBareJid	Form	): Submits the completed form and returns the result of the transcript search. The result will include all the data returned from the server so be careful with the amount of data that the search may return.
org.jivesoftware.smackx.workgroup.agent.TransferRequest: Request sent by an agent to transfer a support session to another agent or user.
org.jivesoftware.smackx.workgroup.agent.UserRequest: Requests made by users to get support by some agent.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue: A queue in a workgroup, which is a pool of agents that are routed a specific type of chat request.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.Status: A class to represent the status of the workgroup. The possible values are:  WorkgroupQueue.Status.OPEN -- the queue is active and accepting new chat requests. WorkgroupQueue.Status.ACTIVE -- the queue is active but NOT accepting new chat requests. WorkgroupQueue.Status.CLOSED -- the queue is NOT active and NOT accepting new chat requests. 
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.Status.fromString	(	String	): Converts a String into the corresponding status. Valid String values that can be converted to a status are: "open", "active", and "closed".
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.WorkgroupQueue	(	Resourcepart	): Creates a new workgroup queue instance.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.getAverageWaitTime	(	): Returns the average amount of time users wait in the queue before being routed to an agent. If average wait time info isn't available, -1 will be returned.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.getCurrentChats	(	): Returns the current number of active chat sessions in the queue.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.getMaxChats	(	): Returns the maximum number of simultaneous chats the queue can handle.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.getName	(	): Returns the name of the queue.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.getOldestEntry	(	): Returns the date of the oldest request waiting in the queue. If there are no requests waiting to be routed, this method will return null.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.getStatus	(	): Returns the status of the queue.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.getUserCount	(	): Returns the number of users waiting in the queue waiting to be routed to an agent.
org.jivesoftware.smackx.workgroup.agent.WorkgroupQueue.getUsers	(	): Returns an Iterator for the users in the queue waiting to be routed to an agent (QueueUser instances).
org.jivesoftware.smackx.workgroup.ext.forms.WorkgroupForm.InternalProvider: An IQProvider for WebForm packets.
org.jivesoftware.smackx.workgroup.ext.history.AgentChatHistory: IQ provider used to retrieve individual agent information. Each chat session can be mapped to one or more jids and therefore retrievable.
org.jivesoftware.smackx.workgroup.ext.history.AgentChatHistory.InternalProvider: Stanza(/Packet) extension provider for AgentHistory packets.
org.jivesoftware.smackx.workgroup.ext.history.AgentChatSession: Represents one chat session for an agent.
org.jivesoftware.smackx.workgroup.ext.history.ChatMetadata.Provider: An IQProvider for Metadata packets.
org.jivesoftware.smackx.workgroup.ext.macros.Macro: Macro datamodel.
org.jivesoftware.smackx.workgroup.ext.macros.MacroGroup: MacroGroup datamodel.
org.jivesoftware.smackx.workgroup.ext.macros.Macros: Macros iq is responsible for handling global and personal macros in the a Live Assistant Workgroup.
org.jivesoftware.smackx.workgroup.ext.macros.Macros.InternalProvider: An IQProvider for Macro packets.
org.jivesoftware.smackx.workgroup.ext.notes.ChatNotes: IQ stanza(/packet) for retrieving and adding Chat Notes.
org.jivesoftware.smackx.workgroup.ext.notes.ChatNotes.Provider: An IQProvider for ChatNotes packets.
org.jivesoftware.smackx.workgroup.ext.notes.ChatNotes.replace	(	String	String	String	): Replaces all instances of oldString with newString in string.
org.jivesoftware.smackx.workgroup.packet.AgentInfo: IQ stanza(/packet) for retrieving and changing the Agent personal information.
org.jivesoftware.smackx.workgroup.packet.AgentInfo.Provider: An IQProvider for AgentInfo packets.
org.jivesoftware.smackx.workgroup.packet.AgentInfo.getJid	(	): Returns the Agent's jid.
org.jivesoftware.smackx.workgroup.packet.AgentInfo.getName	(	): Returns the Agent's name. The name of the agent may be different than the user's name. This property may be shown in the webchat client.
org.jivesoftware.smackx.workgroup.packet.AgentInfo.setJid	(	String	): Sets the Agent's jid.
org.jivesoftware.smackx.workgroup.packet.AgentInfo.setName	(	String	): Sets the Agent's name. The name of the agent may be different than the user's name. This property may be shown in the webchat client.
org.jivesoftware.smackx.workgroup.packet.AgentStatus: Agent status packet.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.ChatInfo: Represents information about a Chat where this Agent is participating.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.ChatInfo.getDate	(	): Returns the date when this agent joined the chat.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.ChatInfo.getEmail	(	): Returns the email address associated with the user.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.ChatInfo.getQuestion	(	): Returns the question the user asked.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.ChatInfo.getSessionID	(	): Returns the sessionID associated to this chat. Each chat will have a unique sessionID that could be used for retrieving the whole transcript of the conversation.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.ChatInfo.getUserID	(	): Returns the user unique identification of the user that made the initial request and for which this chat was generated. If the user joined using an anonymous connection then the userID will be the value of the ID attribute of the USER element. Otherwise, the userID will be the bare JID of the user that made the request.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.ChatInfo.getUsername	(	): Returns the username(nickname) associated with the user.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.Provider: Stanza(/Packet) extension provider for AgentStatus packets.
org.jivesoftware.smackx.workgroup.packet.AgentStatus.getCurrentChats	(	): Returns a collection of ChatInfo where each ChatInfo represents a Chat where this agent is participating.
org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest: Agent status request packet. This stanza(/packet) is used by agents to request the list of agents in a workgroup. The response stanza(/packet) contains a list of packets. Presence packets from individual agents follow.
org.jivesoftware.smackx.workgroup.packet.AgentStatusRequest.Provider: Stanza(/Packet) extension provider for AgentStatusRequest packets.
org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups: Represents a request for getting the jid of the workgroups where an agent can work or could represent the result of such request which will contain the list of workgroups JIDs where the agent can work.
org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups.AgentWorkgroups	(	Jid	): Creates an AgentWorkgroups request for the given agent. This IQ will be sent and an answer will be received with the jid of the workgroups where the agent can work.
org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups.AgentWorkgroups	(	Jid	List	): Creates an AgentWorkgroups which will contain the JIDs of the workgroups where an agent can work.
org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups.Provider: An IQProvider for AgentWorkgroups packets.
org.jivesoftware.smackx.workgroup.packet.AgentWorkgroups.getWorkgroups	(	): Returns a list of workgroup JIDs where the agent can work.
org.jivesoftware.smackx.workgroup.packet.DepartQueuePacket: A IQ stanza(/packet) used to depart a workgroup queue. There are two cases for issuing a depart queue request: The user wants to leave the queue. In this case, an instance of this class should be created without passing in a user address. An administrator or the server removes wants to remove a user from the queue. In that case, the address of the user to remove from the queue should be used to create an instance of this class.
org.jivesoftware.smackx.workgroup.packet.DepartQueuePacket.DepartQueuePacket	(	Jid	): Creates a depart queue request stanza(/packet) to the specified workgroup.
org.jivesoftware.smackx.workgroup.packet.DepartQueuePacket.DepartQueuePacket	(	Jid	Jid	): Creates a depart queue request to the specified workgroup and for the specified user.
org.jivesoftware.smackx.workgroup.packet.MetaDataProvider: This provider parses meta data if it's not contained already in a larger extension provider.
org.jivesoftware.smackx.workgroup.packet.MetaDataProvider.parse	(	XmlPullParser	int	): PacketExtensionProvider implementation.
org.jivesoftware.smackx.workgroup.packet.MonitorPacket.InternalProvider: Stanza(/Packet) extension provider for Monitor Packets.
org.jivesoftware.smackx.workgroup.packet.OccupantsInfo: Stanza(/Packet) used for requesting information about occupants of a room or for retrieving information such information.
org.jivesoftware.smackx.workgroup.packet.OccupantsInfo.Provider: Stanza(/Packet) extension provider for AgentStatusRequest packets.
org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider: An IQProvider for agent offer requests.
org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider.OfferRequestPacket.getMetaData	(	): Returns any meta-data associated with the offer.
org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider.OfferRequestPacket.getSessionID	(	): Returns the session ID associated with the request and ensuing chat. If the offer does not contain a session ID, null will be returned.
org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider.OfferRequestPacket.getTimeout	(	): Returns the number of seconds the agent has to accept the offer before it times out.
org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider.OfferRequestPacket.getUserID	(	): Returns the userID, which is either the same as the userJID or a special value that the user provided as part of their "join queue" request.
org.jivesoftware.smackx.workgroup.packet.OfferRequestProvider.OfferRequestPacket.getUserJID	(	): The JID of the user that made the "join queue" request.
org.jivesoftware.smackx.workgroup.packet.OfferRevokeProvider: An IQProvider class which has savvy about the offer-revoke tag.
org.jivesoftware.smackx.workgroup.packet.QueueDetails: Queue details stanza(/packet) extension, which contains details about the users currently in a queue.
org.jivesoftware.smackx.workgroup.packet.QueueDetails.Provider: Provider class for QueueDetails stanza(/packet) extensions.
org.jivesoftware.smackx.workgroup.packet.QueueDetails.addUser	(	QueueUser	): Adds a user to the packet.
org.jivesoftware.smackx.workgroup.packet.QueueDetails.getUserCount	(	): Returns the number of users currently in the queue that are waiting to be routed to an agent.
org.jivesoftware.smackx.workgroup.packet.QueueDetails.getUsers	(	): Returns the set of users in the queue that are waiting to be routed to an agent (as QueueUser objects).
org.jivesoftware.smackx.workgroup.packet.QueueUpdate: An IQ stanza(/packet) that encapsulates both types of workgroup queue status notifications -- position updates, and estimated time left in the queue updates.
org.jivesoftware.smackx.workgroup.packet.QueueUpdate.getPosition	(	): Returns the user's position in the workgroup queue, or -1 if the value isn't set on this packet.
org.jivesoftware.smackx.workgroup.packet.QueueUpdate.getRemaingTime	(	): Returns the user's estimated time left in the workgroup queue, or -1 if the value isn't set on this packet.
org.jivesoftware.smackx.workgroup.packet.RoomInvitation: Stanza(/Packet) extension for org.jivesoftware.smackx.workgroup.agent.InvitationRequest.
org.jivesoftware.smackx.workgroup.packet.RoomTransfer: Stanza(/Packet) extension for org.jivesoftware.smackx.workgroup.agent.TransferRequest.
org.jivesoftware.smackx.workgroup.packet.Transcript: Represents the conversation transcript that occured in a group chat room between an Agent and a user that requested assistance. The transcript contains all the Messages that were sent to the room as well as the sent presences. 
org.jivesoftware.smackx.workgroup.packet.Transcript.Transcript	(	String	): Creates a transcript request for the given sessionID.
org.jivesoftware.smackx.workgroup.packet.Transcript.Transcript	(	String	List	): Creates a new transcript for the given sessionID and list of packets. The list of packets may include Messages and/or Presences.
org.jivesoftware.smackx.workgroup.packet.Transcript.getPackets	(	): Returns the list of Messages and Presences that were sent to the room.
org.jivesoftware.smackx.workgroup.packet.Transcript.getSessionID	(	): Returns id of the session that generated this conversation transcript. The sessionID is a value generated by the server when a new request is received.
org.jivesoftware.smackx.workgroup.packet.TranscriptProvider: An IQProvider for transcripts.
org.jivesoftware.smackx.workgroup.packet.TranscriptSearch: IQ stanza(/packet) for retrieving the transcript search form, submiting the completed search form or retrieving the answer of a transcript search.
org.jivesoftware.smackx.workgroup.packet.TranscriptSearch.Provider: An IQProvider for TranscriptSearch packets.
org.jivesoftware.smackx.workgroup.packet.Transcripts: Represents a list of conversation transcripts that a user had in all his history. Each transcript summary includes the sessionID which may be used for getting more detailed information about the conversation. org.jivesoftware.smackx.workgroup.packet.Transcript
org.jivesoftware.smackx.workgroup.packet.Transcripts.AgentDetail: An AgentDetail contains information of an Agent that was involved in a conversation. 
org.jivesoftware.smackx.workgroup.packet.Transcripts.AgentDetail.getAgentJID	(	): Returns the bare JID of the Agent that was involved in the conversation.
org.jivesoftware.smackx.workgroup.packet.Transcripts.AgentDetail.getJoinTime	(	): Returns the Date when the Agent joined the conversation.
org.jivesoftware.smackx.workgroup.packet.Transcripts.AgentDetail.getLeftTime	(	): Returns the Date when the Agent left the conversation.
org.jivesoftware.smackx.workgroup.packet.Transcripts.TranscriptSummary: A TranscriptSummary contains some information about a conversation such as the ID of the session or the date when the conversation started and finished. You will need to use the sessionID to get the full conversation transcript.
org.jivesoftware.smackx.workgroup.packet.Transcripts.TranscriptSummary.getAgentDetails	(	): Returns a list of AgentDetails. For each Agent that was involved in the conversation the list will include an AgentDetail. An AgentDetail contains the JID of the agent as well as the time when the Agent joined and left the conversation.
org.jivesoftware.smackx.workgroup.packet.Transcripts.TranscriptSummary.getJoinTime	(	): Returns the Date when the conversation started.
org.jivesoftware.smackx.workgroup.packet.Transcripts.TranscriptSummary.getLeftTime	(	): Returns the Date when the conversation finished.
org.jivesoftware.smackx.workgroup.packet.Transcripts.TranscriptSummary.getSessionID	(	): Returns the ID of the session that is related to this conversation transcript. The sessionID could be used for getting the full conversation transcript.
org.jivesoftware.smackx.workgroup.packet.Transcripts.Transcripts	(	Jid	): Creates a transcripts request for the given userID.
org.jivesoftware.smackx.workgroup.packet.Transcripts.Transcripts	(	Jid	List	): Creates a Transcripts which will contain the transcript summaries of the given user.
org.jivesoftware.smackx.workgroup.packet.Transcripts.getSummaries	(	): Returns a list of TranscriptSummary. A TranscriptSummary does not contain the conversation transcript but some summary information like the sessionID and the time when the conversation started and finished. Once you have the sessionID it is possible to get the full conversation transcript.
org.jivesoftware.smackx.workgroup.packet.Transcripts.getUserID	(	): Returns the id of the user that was involved in the conversations. The userID could be a real JID if the connected user was not anonymous. Otherwise, the userID will be a String that was provided by the anonymous user as a way to idenitify the user across many user sessions.
org.jivesoftware.smackx.workgroup.packet.TranscriptsProvider: An IQProvider for transcripts summaries.
org.jivesoftware.smackx.workgroup.packet.WorkgroupInformation: A stanza(/packet) extension that contains information about the user and agent in a workgroup chat. The stanza(/packet) extension is attached to group chat invitations.
org.jivesoftware.smackx.workgroup.packet.WorkgroupInformation.Provider.parse	(	XmlPullParser	int	): PacketExtensionProvider implementation.
org.jivesoftware.smackx.workgroup.settings.ChatSettings.InternalProvider: Stanza(/Packet) extension provider for AgentStatusRequest packets.
org.jivesoftware.smackx.workgroup.settings.GenericSettings.InternalProvider: Stanza(/Packet) extension provider for SoundSetting Packets.
org.jivesoftware.smackx.workgroup.settings.OfflineSettings.InternalProvider: Stanza(/Packet) extension provider for AgentStatusRequest packets.
org.jivesoftware.smackx.workgroup.settings.SearchSettings.InternalProvider: Stanza(/Packet) extension provider for AgentStatusRequest packets.
org.jivesoftware.smackx.workgroup.settings.SoundSettings.InternalProvider: Stanza(/Packet) extension provider for SoundSetting Packets.
org.jivesoftware.smackx.workgroup.settings.WorkgroupProperties.InternalProvider: Stanza(/Packet) extension provider for SoundSetting Packets.
org.jivesoftware.smackx.workgroup.user.QueueListener: Listener interface for those that wish to be notified of workgroup queue events.
org.jivesoftware.smackx.workgroup.user.QueueListener.departedQueue	(	): The user departed the workgroup queue.
org.jivesoftware.smackx.workgroup.user.QueueListener.joinedQueue	(	): The user joined the workgroup queue.
org.jivesoftware.smackx.workgroup.user.QueueListener.queuePositionUpdated	(	int	): The user's queue position has been updated to a new value.
org.jivesoftware.smackx.workgroup.user.QueueListener.queueWaitTimeUpdated	(	int	): The user's estimated remaining wait time in the queue has been updated.
org.jivesoftware.smackx.workgroup.user.Workgroup: Provides workgroup services for users. Users can join the workgroup queue, depart the queue, find status information about their placement in the queue, and register to be notified when they are routed to an agent.  This class only provides a users perspective into a workgroup and is not intended for use by agents.
org.jivesoftware.smackx.workgroup.user.Workgroup.JoinQueuePacket: IQ stanza(/packet) to request joining the workgroup queue.
org.jivesoftware.smackx.workgroup.user.Workgroup.Workgroup	(	Jid	XMPPConnection	): Creates a new workgroup instance using the specified workgroup JID (eg support@workgroup.example.com) and XMPP connection. The connection must have undergone a successful login before being used to construct an instance of this class.
org.jivesoftware.smackx.workgroup.user.Workgroup.addInvitationListener	(	WorkgroupInvitationListener	): Adds an invitation listener that will be notified of groupchat invitations from the workgroup for the the user that created this Workgroup instance.
org.jivesoftware.smackx.workgroup.user.Workgroup.addQueueListener	(	QueueListener	): Adds a queue listener that will be notified of queue events for the user that created this Workgroup instance.
org.jivesoftware.smackx.workgroup.user.Workgroup.departQueue	(	): Departs the workgroup queue. If the user is not currently in the queue, this method will do nothing.  Normally, the user would not manually leave the queue. However, they may wish to under certain circumstances -- for example, if they no longer wish to be routed to an agent because they've been waiting too long.
org.jivesoftware.smackx.workgroup.user.Workgroup.getChatSetting	(	String	): Returns a single chat setting based on it's identified key.
org.jivesoftware.smackx.workgroup.user.Workgroup.getChatSettings	(	): Returns all ChatSettings.
org.jivesoftware.smackx.workgroup.user.Workgroup.getChatSettings	(	String	int	): Asks the workgroup for it's Chat Settings.
org.jivesoftware.smackx.workgroup.user.Workgroup.getChatSettings	(	int	): Returns ChatSettings based on type.
org.jivesoftware.smackx.workgroup.user.Workgroup.getOfflineSettings	(	): Asks the workgroup for it's Offline Settings.
org.jivesoftware.smackx.workgroup.user.Workgroup.getQueuePosition	(	): Returns the users current position in the workgroup queue. A value of 0 means the user is next in line to be routed; therefore, if the queue position is being displayed to the end user it is usually a good idea to add 1 to the value this method returns before display. If the user is not currently waiting in the workgroup, or no queue position information is available, -1 will be returned.
org.jivesoftware.smackx.workgroup.user.Workgroup.getQueueRemainingTime	(	): Returns the estimated time (in seconds) that the user has to left wait in the workgroup queue before being routed. If the user is not currently waiting int he workgroup, or no queue time information is available, -1 will be returned.
org.jivesoftware.smackx.workgroup.user.Workgroup.getSoundSettings	(	): Asks the workgroup for it's Sound Settings.
org.jivesoftware.smackx.workgroup.user.Workgroup.getWorkgroupForm	(	): Returns the Form to use for all clients of a workgroup. It is unlikely that the server will change the form (without a restart) so it is safe to keep the returned form for future submissions.
org.jivesoftware.smackx.workgroup.user.Workgroup.getWorkgroupJID	(	): Returns the name of this workgroup (eg support@example.com).
org.jivesoftware.smackx.workgroup.user.Workgroup.getWorkgroupProperties	(	): Asks the workgroup for it's Properties.
org.jivesoftware.smackx.workgroup.user.Workgroup.getWorkgroupProperties	(	String	): Asks the workgroup for it's Properties.
org.jivesoftware.smackx.workgroup.user.Workgroup.isAvailable	(	): Returns true if the workgroup is available for receiving new requests. The workgroup will be available only when agents are available for this workgroup.
org.jivesoftware.smackx.workgroup.user.Workgroup.isEmailAvailable	(	): The workgroup service may be configured to send email. This queries the Workgroup Service to see if the email service has been configured and is available.
org.jivesoftware.smackx.workgroup.user.Workgroup.isInQueue	(	): Returns true if the user is currently waiting in the workgroup queue.
org.jivesoftware.smackx.workgroup.user.Workgroup.joinQueue	(	): Joins the workgroup queue to wait to be routed to an agent. After joining the queue, queue status events will be sent to indicate the user's position and estimated time left in the queue. Once joining the queue, there are three ways the user can leave the queue:   The user is routed to an agent, which triggers a GroupChat invitation. The user asks to leave the queue by calling the departQueue method. A server error occurs, or an administrator explicitly removes the user from the queue.   A user cannot request to join the queue again if already in the queue. Therefore, this method will throw an IllegalStateException if the user is already in the queue.  Some servers may be configured to require certain meta-data in order to join the queue. In that case, the joinQueue() method should be used instead of this method so that meta-data may be passed in.  The server tracks the conversations that a user has with agents over time. By default, that tracking is done using the user's JID. However, this is not always possible. For example, when the user is logged in anonymously using a web client. In that case the user ID might be a randomly generated value put into a persistent cookie or a username obtained via the session. A userID can be explicitly passed in by using the joinQueue() method. When specified, that userID will be used instead of the user's JID to track conversations. The server will ignore a manually specified userID if the user's connection to the server is not anonymous.
org.jivesoftware.smackx.workgroup.user.Workgroup.joinQueue	(	Form	): Joins the workgroup queue to wait to be routed to an agent. After joining the queue, queue status events will be sent to indicate the user's position and estimated time left in the queue. Once joining the queue, there are three ways the user can leave the queue:   The user is routed to an agent, which triggers a GroupChat invitation. The user asks to leave the queue by calling the departQueue method. A server error occurs, or an administrator explicitly removes the user from the queue.   A user cannot request to join the queue again if already in the queue. Therefore, this method will throw an IllegalStateException if the user is already in the queue.  Some servers may be configured to require certain meta-data in order to join the queue.  The server tracks the conversations that a user has with agents over time. By default, that tracking is done using the user's JID. However, this is not always possible. For example, when the user is logged in anonymously using a web client. In that case the user ID might be a randomly generated value put into a persistent cookie or a username obtained via the session. A userID can be explicitly passed in by using the joinQueue() method. When specified, that userID will be used instead of the user's JID to track conversations. The server will ignore a manually specified userID if the user's connection to the server is not anonymous.
org.jivesoftware.smackx.workgroup.user.Workgroup.joinQueue	(	Form	Jid	): Joins the workgroup queue to wait to be routed to an agent. After joining the queue, queue status events will be sent to indicate the user's position and estimated time left in the queue. Once joining the queue, there are three ways the user can leave the queue:   The user is routed to an agent, which triggers a GroupChat invitation. The user asks to leave the queue by calling the departQueue method. A server error occurs, or an administrator explicitly removes the user from the queue.   A user cannot request to join the queue again if already in the queue. Therefore, this method will throw an IllegalStateException if the user is already in the queue.  Some servers may be configured to require certain meta-data in order to join the queue.  The server tracks the conversations that a user has with agents over time. By default, that tracking is done using the user's JID. However, this is not always possible. For example, when the user is logged in anonymously using a web client. In that case the user ID might be a randomly generated value put into a persistent cookie or a username obtained via the session. When specified, that userID will be used instead of the user's JID to track conversations. The server will ignore a manually specified userID if the user's connection to the server is not anonymous.
org.jivesoftware.smackx.workgroup.user.Workgroup.joinQueue	(	Map	Jid	): Joins the workgroup queue to wait to be routed to an agent. After joining the queue, queue status events will be sent to indicate the user's position and estimated time left in the queue. Once joining the queue, there are three ways the user can leave the queue:   The user is routed to an agent, which triggers a GroupChat invitation. The user asks to leave the queue by calling the departQueue method. A server error occurs, or an administrator explicitly removes the user from the queue.   A user cannot request to join the queue again if already in the queue. Therefore, this method will throw an IllegalStateException if the user is already in the queue.  Some servers may be configured to require certain meta-data in order to join the queue.  The server tracks the conversations that a user has with agents over time. By default, that tracking is done using the user's JID. However, this is not always possible. For example, when the user is logged in anonymously using a web client. In that case the user ID might be a randomly generated value put into a persistent cookie or a username obtained via the session. When specified, that userID will be used instead of the user's JID to track conversations. The server will ignore a manually specified userID if the user's connection to the server is not anonymous.
org.jivesoftware.smackx.workgroup.user.Workgroup.removeQueueListener	(	QueueListener	): Removes a queue listener.
org.jivesoftware.smackx.workgroup.user.Workgroup.removeQueueListener	(	WorkgroupInvitationListener	): Removes an invitation listener.
org.jivesoftware.smackx.workgroup.util.ListenerEventDispatcher: This class is a very flexible event dispatcher which implements Runnable so that it can dispatch easily from a newly created thread. The usage of this in code is more or less: create a new instance of this class, use addListenerTriplet to add as many listeners as desired to be messaged, create a new Thread using the instance of this class created as the argument to the constructor, start the new Thread instance. Also, this is intended to be used to message methods that either return void, or have a return which the developer using this class is uninterested in receiving.
org.jivesoftware.smackx.workgroup.util.ListenerEventDispatcher.addListenerTriplet	(	Object	Method	Object[]	): Add a listener triplet - the instance of the listener to be messaged, the Method on which the listener should be messaged, and the Object array of arguments to be supplied to the Method. No attempts are made to determine whether this triplet was already added. Messages are dispatched in the order in which they're added via this method; so if triplet X is added after triplet Z, then triplet Z will undergo messaging prior to triplet X. This method should not be called once the owning Thread instance has been started; if it is called, the triplet will not be added to the messaging queue.
org.jivesoftware.smackx.workgroup.util.ListenerEventDispatcher.hasFinished	(	): Has finished.
org.jivesoftware.smackx.workgroup.util.MetaDataUtils: Utility class for meta-data parsing and writing.
org.jivesoftware.smackx.workgroup.util.MetaDataUtils.parseMetaData	(	XmlPullParser	): Parses any available meta-data and returns it as a Map of String name/value pairs. The parser must be positioned at an opening meta-data tag, or the an empty map will be returned.
org.jivesoftware.smackx.workgroup.util.MetaDataUtils.serializeMetaData	(	Map	): Serializes a Map of String name/value pairs into the meta-data XML format.
org.jivesoftware.smackx.xdata.Form: Represents a Form for gathering data. The form could be of the following types:  form → Indicates a form to fill out. submit → The form is filled out, and this is the data that is being returned from the form. cancel → The form was cancelled. Tell the asker that piece of information. result → Data results being returned from a search, or some other query.  Depending of the form's type different operations are available. For example, it's only possible to set answers if the form is of type "submit".
org.jivesoftware.smackx.xdata.Form.Form	(	DataForm	): Creates a new Form that will wrap an existing DataForm. The wrapped DataForm must be used for gathering data. 
org.jivesoftware.smackx.xdata.Form.Form	(	DataForm.Type	): Creates a new Form of a given type from scratch.
org.jivesoftware.smackx.xdata.Form.addField	(	FormField	): Adds a new field to complete as part of the form.
org.jivesoftware.smackx.xdata.Form.createAnswerForm	(	): Returns a new Form to submit the completed values. The new Form will include all the fields of the original form except for the fields of type FIXED. Only the HIDDEN fields will include the same value of the original form. The other fields of the new form MUST be completed. If a field remains with no answer when sending the completed form, then it won't be included as part of the completed form. The reason why the fields with variables are included in the new form is to provide a model for binding with any UI. This means that the UIs will use the original form (of type "form") to learn how to render the form, but the UIs will bind the fields to the form of type submit.
org.jivesoftware.smackx.xdata.Form.getDataFormToSend	(	): Returns a DataForm that serves to send this Form to the server. If the form is of type submit, it may contain fields with no value. These fields will be removed since they only exist to assist the user while editing/completing the form in a UI. 
org.jivesoftware.smackx.xdata.Form.getField	(	String	): Returns the field of the form whose variable matches the specified variable. The fields of type FIXED will never be returned since they do not specify a variable. 
org.jivesoftware.smackx.xdata.Form.getFields	(	): Returns a List of the fields that are part of the form.
org.jivesoftware.smackx.xdata.Form.getFormFrom	(	Stanza	): Returns a new ReportedData if the stanza(/packet) is used for gathering data and includes an extension that matches the elementName and namespace "x","jabber:x:data". 
org.jivesoftware.smackx.xdata.Form.getInstructions	(	): Returns the instructions that explain how to fill out the form and what the form is about.
org.jivesoftware.smackx.xdata.Form.getTitle	(	): Returns the description of the data. It is similar to the title on a web page or an X window. You can put a title on either a form to fill out, or a set of data results.
org.jivesoftware.smackx.xdata.Form.getType	(	): Returns the meaning of the data within the context. The data could be part of a form to fill out, a form submission or data results.
org.jivesoftware.smackx.xdata.Form.hasField	(	String	): Check if a field with the given variable exists.
org.jivesoftware.smackx.xdata.Form.isFormType	(	): Returns true if the form is a form to fill out.
org.jivesoftware.smackx.xdata.Form.isSubmitType	(	): Returns true if the form is a form to submit.
org.jivesoftware.smackx.xdata.Form.setAnswer	(	FormField	Object	): Sets a new Object value to a given form's field. In fact, the object representation (i.e. #toString) will be the actual value of the field. If the value to set to the field is not a basic type (e.g. String, boolean, int, etc.) you will need to use setAnswer() where the String value is the String representation of the object. Before setting the new value to the field we will check if the form is of type submit. If the form isn't of type submit means that it's not possible to complete the form and an exception will be thrown.
org.jivesoftware.smackx.xdata.Form.setAnswer	(	String	List	): Sets a new values to a given form's field. The field whose variable matches the requested variable will be completed with the specified values. If no field could be found for the specified variable then an exception will be raised. The Objects contained in the List could be of any type. The String representation of them (i.e. #toString) will be actually used when sending the answer to the server.
org.jivesoftware.smackx.xdata.Form.setAnswer	(	String	String	): Sets a new String value to a given form's field. The field whose variable matches the requested variable will be completed with the specified value. If no field could be found for the specified variable then an exception will be raised. If the value to set to the field is not a basic type (e.g. String, boolean, int, etc.) you can use this message where the String value is the String representation of the object. 
org.jivesoftware.smackx.xdata.Form.setAnswer	(	String	boolean	): Sets a new boolean value to a given form's field. The field whose variable matches the requested variable will be completed with the specified value. If no field could be found for the specified variable then an exception will be raised.
org.jivesoftware.smackx.xdata.Form.setAnswer	(	String	double	): Sets a new double value to a given form's field. The field whose variable matches the requested variable will be completed with the specified value. If no field could be found for the specified variable then an exception will be raised.
org.jivesoftware.smackx.xdata.Form.setAnswer	(	String	float	): Sets a new float value to a given form's field. The field whose variable matches the requested variable will be completed with the specified value. If no field could be found for the specified variable then an exception will be raised.
org.jivesoftware.smackx.xdata.Form.setAnswer	(	String	int	): Sets a new int value to a given form's field. The field whose variable matches the requested variable will be completed with the specified value. If no field could be found for the specified variable then an exception will be raised.
org.jivesoftware.smackx.xdata.Form.setAnswer	(	String	long	): Sets a new long value to a given form's field. The field whose variable matches the requested variable will be completed with the specified value. If no field could be found for the specified variable then an exception will be raised.
org.jivesoftware.smackx.xdata.Form.setDefaultAnswer	(	String	): Sets the default value as the value of a given form's field. The field whose variable matches the requested variable will be completed with its default value. If no field could be found for the specified variable then an exception will be raised.
org.jivesoftware.smackx.xdata.Form.setInstructions	(	String	): Sets instructions that explain how to fill out the form and what the form is about.
org.jivesoftware.smackx.xdata.Form.setTitle	(	String	): Sets the description of the data. It is similar to the title on a web page or an X window. You can put a title on either a form to fill out, or a set of data results.
org.jivesoftware.smackx.xdata.FormField: Represents a field of a form. The field could be used to represent a question to complete, a completed question or a data returned from a search. The exact interpretation of the field depends on the context where the field is used.
org.jivesoftware.smackx.xdata.FormField.FormField	(	): Creates a new FormField of type FIXED. The fields of type FIXED do not define a variable name.
org.jivesoftware.smackx.xdata.FormField.FormField	(	String	): Creates a new FormField with the variable name that uniquely identifies the field in the context of the form.
org.jivesoftware.smackx.xdata.FormField.Option: Represents the available option of a given FormField.
org.jivesoftware.smackx.xdata.FormField.Option.getLabel	(	): Returns the label that represents the option.
org.jivesoftware.smackx.xdata.FormField.Option.getValue	(	): Returns the value of the option.
org.jivesoftware.smackx.xdata.FormField.addOption	(	Option	): Adss an available options to the question that the user has in order to answer the question.
org.jivesoftware.smackx.xdata.FormField.addValue	(	String	): Adds a default value to the question if the question is part of a form to fill out. Otherwise, adds an answered value to the question.
org.jivesoftware.smackx.xdata.FormField.addValues	(	List	): Adds a default values to the question if the question is part of a form to fill out. Otherwise, adds an answered values to the question.
org.jivesoftware.smackx.xdata.FormField.getDescription	(	): Returns a description that provides extra clarification about the question. This information could be presented to the user either in tool-tip, help button, or as a section of text before the question.  If the question is of type FIXED then the description should remain empty. 
org.jivesoftware.smackx.xdata.FormField.getLabel	(	): Returns the label of the question which should give enough information to the user to fill out the form.
org.jivesoftware.smackx.xdata.FormField.getOptions	(	): Returns a List of the available options that the user has in order to answer the question.
org.jivesoftware.smackx.xdata.FormField.getType	(	): Returns an indicative of the format for the data to answer.
org.jivesoftware.smackx.xdata.FormField.getValidateElement	(	): Get validate element.
org.jivesoftware.smackx.xdata.FormField.getValues	(	): Returns a List of the default values of the question if the question is part of a form to fill out. Otherwise, returns a List of the answered values of the question.
org.jivesoftware.smackx.xdata.FormField.getVariable	(	): Returns the variable name that the question is filling out.  According to XEP-4 § 3.2 the variable name (the 'var' attribute) "uniquely identifies the field in the context of the form" (if the field is not of type 'fixed', in which case the field "MAY possess a 'var' attribute") 
org.jivesoftware.smackx.xdata.FormField.isRequired	(	): Returns true if the question must be answered in order to complete the questionnaire.
org.jivesoftware.smackx.xdata.FormField.resetValues	(	): Removes all the values of the field.
org.jivesoftware.smackx.xdata.FormField.setDescription	(	String	): Sets a description that provides extra clarification about the question. This information could be presented to the user either in tool-tip, help button, or as a section of text before the question.  If the question is of type FIXED then the description should remain empty. 
org.jivesoftware.smackx.xdata.FormField.setLabel	(	String	): Sets the label of the question which should give enough information to the user to fill out the form.
org.jivesoftware.smackx.xdata.FormField.setRequired	(	boolean	): Sets if the question must be answered in order to complete the questionnaire.
org.jivesoftware.smackx.xdata.FormField.setType	(	Type	): Sets an indicative of the format for the data to answer.  This method will throw an IllegalArgumentException if type is 'fixed'. To create FormFields of type 'fixed' use FormField() instead. 
org.jivesoftware.smackx.xdata.FormField.setValidateElement	(	ValidateElement	): Set validate element.
org.jivesoftware.smackx.xdata.FormTest: Tests the DataForms extensions.
org.jivesoftware.smackx.xdata.FormTest.testFilloutForm	(	): 1. Create a form to fill out and send it to the other user 2. Retrieve the form to fill out, complete it and return it to the requestor 3. Retrieve the completed form and check that everything is OK
org.jivesoftware.smackx.xdata.XDataManager.getInstanceFor	(	XMPPConnection	): Get the XDataManager for the given XMPP connection.
org.jivesoftware.smackx.xdata.XDataManager.isSupported	(	Jid	): Check if the given entity supports data forms.
org.jivesoftware.smackx.xdata.packet.DataForm: Represents a form that could be use for gathering data as well as for reporting data returned from a search.
org.jivesoftware.smackx.xdata.packet.DataForm.Item: Represents items of reported data.
org.jivesoftware.smackx.xdata.packet.DataForm.Item.getFields	(	): Returns the fields that define the data that goes with the item.
org.jivesoftware.smackx.xdata.packet.DataForm.ReportedData: Represents the fields that will be returned from a search. This information is useful when you try to use the jabber:iq:search namespace to return dynamic form information.
org.jivesoftware.smackx.xdata.packet.DataForm.ReportedData.getFields	(	): Returns the fields returned from a search.
org.jivesoftware.smackx.xdata.packet.DataForm.addField	(	FormField	): Adds a new field as part of the form.
org.jivesoftware.smackx.xdata.packet.DataForm.addInstruction	(	String	): Adds a new instruction to the list of instructions that explain how to fill out the form and what the form is about. The dataform could include multiple instructions since each instruction could not contain newlines characters. 
org.jivesoftware.smackx.xdata.packet.DataForm.addItem	(	Item	): Adds a new item returned from a search.
org.jivesoftware.smackx.xdata.packet.DataForm.from	(	Stanza	): Get data form from stanza.
org.jivesoftware.smackx.xdata.packet.DataForm.getField	(	String	): Return the form field with the given variable name or null.
org.jivesoftware.smackx.xdata.packet.DataForm.getFields	(	): Returns a List of the fields that are part of the form.
org.jivesoftware.smackx.xdata.packet.DataForm.getHiddenFormTypeField	(	): Returns the hidden FORM_TYPE field or null if this data form has none.
org.jivesoftware.smackx.xdata.packet.DataForm.getInstructions	(	): Returns a List of the list of instructions that explain how to fill out the form and what the form is about. The dataform could include multiple instructions since each instruction could not contain newlines characters. Join the instructions together in order to show them to the user.
org.jivesoftware.smackx.xdata.packet.DataForm.getItems	(	): Returns a List of the items returned from a search.
org.jivesoftware.smackx.xdata.packet.DataForm.getReportedData	(	): Returns the fields that will be returned from a search.
org.jivesoftware.smackx.xdata.packet.DataForm.getTitle	(	): Returns the description of the data. It is similar to the title on a web page or an X window. You can put a  on either a form to fill out, or a set of data results.
org.jivesoftware.smackx.xdata.packet.DataForm.getType	(	): Returns the meaning of the data within the context. The data could be part of a form to fill out, a form submission or data results.
org.jivesoftware.smackx.xdata.packet.DataForm.hasField	(	String	): Check if a form field with the given variable name exists.
org.jivesoftware.smackx.xdata.packet.DataForm.hasHiddenFormTypeField	(	): Returns true if this DataForm has at least one FORM_TYPE field which is hidden. This method is used for sanity checks.
org.jivesoftware.smackx.xdata.packet.DataForm.setInstructions	(	List	): Sets the list of instructions that explain how to fill out the form and what the form is about. The dataform could include multiple instructions since each instruction could not contain newlines characters. 
org.jivesoftware.smackx.xdata.packet.DataForm.setReportedData	(	ReportedData	): Sets the fields that will be returned from a search.
org.jivesoftware.smackx.xdata.packet.DataForm.setTitle	(	String	): Sets the description of the data. It is similar to the title on a web page or an X window. You can put a  on either a form to fill out, or a set of data results.
org.jivesoftware.smackx.xdata.packet.DataFormTest: Unit tests for DataForm reading and parsing.
org.jivesoftware.smackx.xdata.provider.DataFormProvider: The DataFormProvider parses DataForm packets.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout: DataLayout Extension according to XEP-0141: Data Forms Layout. Defines a backwards-compatible extension to the XMPP Data Forms protocol that enables an application to specify form layouts, including the layout of form fields, sections within pages, and subsections within sections.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.DataLayout	(	String	): Data layout constructor.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.Fieldref.Fieldref	(	String	): Field ref constructor.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.Fieldref.getVar	(	): Gets the value of the var property.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.Section.Section	(	String	): Section constructor.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.Section.getLabel	(	): Gets the value of the label property.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.Section.getSectionLayout	(	): Gets the value of the sectionLayout property.  This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside the object. This is why there is not a set method for the sectionLayout property.  For example, to add a new item, do as follows:  getSectionLayout().add(newItem);   Objects of the following type(s) are allowed in the list: String , Section , Fieldref and Reportedref 
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.Text.Text	(	String	): Text constructor.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.Text.getText	(	): Gets the value of the var property.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.getLabel	(	): Gets the value of the label property.
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.getPageLayout	(	): Gets the value of the pageLayout property.  Objects of the following type(s) are allowed in the list: String , Section , Fieldref and Reportedref 
org.jivesoftware.smackx.xdatalayout.packet.DataLayout.walkList	(	XmlStringBuilder	List	): 
org.jivesoftware.smackx.xdatalayout.packet.DataLayoutTest: Unit tests for DataForm reading and parsing.
org.jivesoftware.smackx.xdatalayout.provider.DataLayoutProvider: Extension Provider for Page layout of forms.
org.jivesoftware.smackx.xdatavalidation.DataValidationHelperTest: Data validation helper test.
org.jivesoftware.smackx.xdatavalidation.ValidationConsistencyException: Exception thrown when ValidateElement is not consistent with the business rules in XEP=0122.
org.jivesoftware.smackx.xdatavalidation.ValidationConsistencyException.ValidationConsistencyException	(	String	): Validation consistency exception constructor.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement: DataValidation Extension according to XEP-0122: Data Forms Validation. This specification defines a backwards-compatible extension to the XMPP Data Forms protocol that enables applications to specify additional validation guidelines related to a FormField in a DataForm, such as validation of standard XML datatypes, application-specific datatypes, value ranges, and regular expressions.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.BasicValidateElement: Validation only against the datatype itself. Indicates that the value(s) should simply match the field type and datatype constraints.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.BasicValidateElement.BasicValidateElement	(	String	): Basic validate element constructor.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.ListRange: This element indicates for "list-multi", that a minimum and maximum number of options should be selected and/or entered.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.ListRange.ListRange	(	Long	Long	): The 'max' attribute specifies the maximum allowable number of selected/entered values. The 'min' attribute specifies the minimum allowable number of selected/entered values. Both attributes are optional, but at least one must bet set, and the value must be within the range of a unsigned 32-bit integer.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.ListRange.getMax	(	): The maximum allowable number of selected/entered values.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.ListRange.getMin	(	): The minimum allowable number of selected/entered values.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.OpenValidateElement: For "list-single" or "list-multi", indicates that the user may enter a custom value (matching the datatype constraints) or choose from the predefined values.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.OpenValidateElement.OpenValidateElement	(	String	): Open validate element constructor.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.RangeValidateElement: Indicate that the value should fall within a certain range.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.RangeValidateElement.RangeValidateElement	(	String	String	String	): Range validate element constructor.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.RangeValidateElement.getMax	(	): The 'max' attribute specifies the maximum allowable value.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.RangeValidateElement.getMin	(	): The 'min' attribute specifies the minimum allowable value.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.RegexValidateElement: Indicates that the value should be restricted to a regular expression. The regular expression must be that defined for  POSIX extended regular expressions  including support for Unicode.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.RegexValidateElement.RegexValidateElement	(	String	String	): Regex validate element.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.RegexValidateElement.getRegex	(	): the expression is that defined for POSIX extended regular expressions, including support for Unicode.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.ValidateElement	(	String	): The 'datatype' attribute specifies the datatype. This attribute is OPTIONAL, and when not specified, defaults to "xs:string".
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.appendXML	(	XmlStringBuilder	): 
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.checkConsistency	(	FormField	): Check if this element is consistent according to the business rules in XEP=0122.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.checkListRangeConsistency	(	FormField	): The  element SHOULD be included only when the  is of type "list-multi" and SHOULD be ignored otherwise.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.checkNonMultiConsistency	(	FormField	String	): 
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.getDatatype	(	): Specifies the data type of any value contained within the FormField element. It MUST meet one of the following conditions:  Start with "xs:", and be one of the "built-in" datatypes defined in XML Schema Part 2 [2] Start with a prefix registered with the XMPP Registrar [3] Start with "x:", and specify a user-defined datatype [4] 
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.getListRange	(	): Get list range.
org.jivesoftware.smackx.xdatavalidation.packet.ValidateElement.setListRange	(	ListRange	): Set list range.
org.jivesoftware.smackx.xdatavalidation.provider.DataValidationProvider: Extension Provider for Data validation of forms.
org.jivesoftware.smackx.xdatavalidation.provider.DataValidationTest: Data validation test.
org.jivesoftware.smackx.xdatavalidation.provider.DataValidationTest.getParser	(	String	): 
org.jivesoftware.smackx.xevent.DefaultMessageEventRequestListener: Default implementation of the MessageEventRequestListener interface. This class automatically sends a delivered notification to the sender of the message if the sender has requested to be notified when the message is delivered. 
org.jivesoftware.smackx.xevent.MessageEventManager: Manages message events requests and notifications. A MessageEventManager provides a high level access to request for notifications and send event notifications. It also provides an easy way to hook up custom logic when requests or notifications are received. 
org.jivesoftware.smackx.xevent.MessageEventManager.MessageEventManager	(	XMPPConnection	): Creates a new message event manager.
org.jivesoftware.smackx.xevent.MessageEventManager.addMessageEventNotificationListener	(	MessageEventNotificationListener	): Adds a message event notification listener. The listener will be fired anytime a notification event is received.
org.jivesoftware.smackx.xevent.MessageEventManager.addMessageEventRequestListener	(	MessageEventRequestListener	): Adds a message event request listener. The listener will be fired anytime a request for event notification is received.
org.jivesoftware.smackx.xevent.MessageEventManager.addNotificationsRequests	(	Message	boolean	boolean	boolean	boolean	): Adds event notification requests to a message. For each event type that the user wishes event notifications from the message recepient for, true should be passed in to this method.
org.jivesoftware.smackx.xevent.MessageEventManager.fireMessageEventNotificationListeners	(	Jid	String	String	): Fires message event notification listeners.
org.jivesoftware.smackx.xevent.MessageEventManager.fireMessageEventRequestListeners	(	Jid	String	String	): Fires message event request listeners.
org.jivesoftware.smackx.xevent.MessageEventManager.removeMessageEventNotificationListener	(	MessageEventNotificationListener	): Removes a message event notification listener. The listener will be fired anytime a notification event is received.
org.jivesoftware.smackx.xevent.MessageEventManager.removeMessageEventRequestListener	(	MessageEventRequestListener	): Removes a message event request listener. The listener will be fired anytime a request for event notification is received.
org.jivesoftware.smackx.xevent.MessageEventManager.sendCancelledNotification	(	Jid	String	): Sends the notification that the receiver of the message has cancelled composing a reply.
org.jivesoftware.smackx.xevent.MessageEventManager.sendComposingNotification	(	Jid	String	): Sends the notification that the receiver of the message is composing a reply.
org.jivesoftware.smackx.xevent.MessageEventManager.sendDeliveredNotification	(	Jid	String	): Sends the notification that the message was delivered to the sender of the original message.
org.jivesoftware.smackx.xevent.MessageEventManager.sendDisplayedNotification	(	Jid	String	): Sends the notification that the message was displayed to the sender of the original message.
org.jivesoftware.smackx.xevent.MessageEventNotificationListener: A listener that is fired anytime a message event notification is received. Message event notifications are received as a consequence of the request to receive notifications when sending a message.
org.jivesoftware.smackx.xevent.MessageEventNotificationListener.cancelledNotification	(	Jid	String	): Called when a notification that the receiver of the message cancelled the reply is received.
org.jivesoftware.smackx.xevent.MessageEventNotificationListener.composingNotification	(	Jid	String	): Called when a notification that the receiver of the message is composing a reply is received.
org.jivesoftware.smackx.xevent.MessageEventNotificationListener.deliveredNotification	(	Jid	String	): Called when a notification of message delivered is received.
org.jivesoftware.smackx.xevent.MessageEventNotificationListener.displayedNotification	(	Jid	String	): Called when a notification of message displayed is received.
org.jivesoftware.smackx.xevent.MessageEventNotificationListener.offlineNotification	(	Jid	String	): Called when a notification that the receiver of the message is offline is received.
org.jivesoftware.smackx.xevent.MessageEventRequestListener: A listener that is fired anytime a message event request is received. Message event requests are received when the received message includes an extension like this:  <x xmlns='jabber:x:event'> <offline/> <delivered/> <composing/> </x>  In this example you can see that the sender of the message requests to be notified when the user couldn't receive the message because he/she is offline, the message was delivered or when the receiver of the message is composing a reply. 
org.jivesoftware.smackx.xevent.MessageEventRequestListener.composingNotificationRequested	(	Jid	String	MessageEventManager	): Called when a request that the receiver of the message is composing a reply notification is received.
org.jivesoftware.smackx.xevent.MessageEventRequestListener.deliveredNotificationRequested	(	Jid	String	MessageEventManager	): Called when a request for message delivered notification is received.
org.jivesoftware.smackx.xevent.MessageEventRequestListener.displayedNotificationRequested	(	Jid	String	MessageEventManager	): Called when a request for message displayed notification is received.
org.jivesoftware.smackx.xevent.MessageEventRequestListener.offlineNotificationRequested	(	Jid	String	MessageEventManager	): Called when a request that the receiver of the message is offline is received.
org.jivesoftware.smackx.xevent.packet.MessageEvent: Represents message events relating to the delivery, display, composition and cancellation of messages. There are four message events currently defined in this namespace:  Offline Indicates that the message has been stored offline by the intended recipient's server. This event is triggered only if the intended recipient's server supports offline storage, has that support enabled, and the recipient is offline when the server receives the message for delivery. Delivered Indicates that the message has been delivered to the recipient. This signifies that the message has reached the recipient's XMPP client, but does not necessarily mean that the message has been displayed. This event is to be raised by the XMPP client. Displayed Once the message has been received by the recipient's XMPP client, it may be displayed to the user. This event indicates that the message has been displayed, and is to be raised by the XMPP client. Even if a message is displayed multiple times, this event should be raised only once. Composing In threaded chat conversations, this indicates that the recipient is composing a reply to a message. The event is to be raised by the recipient's XMPP client. A XMPP client is allowed to raise this event multiple times in response to the same request, providing the original event is cancelled first. 
org.jivesoftware.smackx.xevent.packet.MessageEvent.getElementName	(	): Returns the XML element name of the extension sub-packet root element. Always returns "x"
org.jivesoftware.smackx.xevent.packet.MessageEvent.getEventTypes	(	): Returns the types of events. The type of event could be: "offline", "composing","delivered","displayed", "offline"
org.jivesoftware.smackx.xevent.packet.MessageEvent.getNamespace	(	): Returns the XML namespace of the extension sub-packet root element. According the specification the namespace is always "jabber:x:event"
org.jivesoftware.smackx.xevent.packet.MessageEvent.getStanzaId	(	): Returns the unique ID of the message that requested to be notified of the event. The stanza(/packet) id is not used when the message is a request for notifications
org.jivesoftware.smackx.xevent.packet.MessageEvent.isCancelled	(	): When the message is a notification returns if the receiver of the message cancelled composing a reply.
org.jivesoftware.smackx.xevent.packet.MessageEvent.isComposing	(	): When the message is a request returns if the sender of the message requests to be notified when the receiver is composing a reply. When the message is a notification returns if the receiver of the message is composing a reply.
org.jivesoftware.smackx.xevent.packet.MessageEvent.isDelivered	(	): When the message is a request returns if the sender of the message requests to be notified when the message is delivered. When the message is a notification returns if the message was delivered or not.
org.jivesoftware.smackx.xevent.packet.MessageEvent.isDisplayed	(	): When the message is a request returns if the sender of the message requests to be notified when the message is displayed. When the message is a notification returns if the message was displayed or not.
org.jivesoftware.smackx.xevent.packet.MessageEvent.isMessageEventRequest	(	): Returns true if this MessageEvent is a request for notifications. Returns false if this MessageEvent is a notification of an event.
org.jivesoftware.smackx.xevent.packet.MessageEvent.isOffline	(	): When the message is a request returns if the sender of the message requests to be notified when the receiver of the message is offline. When the message is a notification returns if the receiver of the message was offline.
org.jivesoftware.smackx.xevent.packet.MessageEvent.setCancelled	(	boolean	): When the message is a notification sets if the receiver of the message cancelled composing a reply. The Cancelled event is never requested explicitly. It is requested implicitly when requesting to be notified of the Composing event.
org.jivesoftware.smackx.xevent.packet.MessageEvent.setComposing	(	boolean	): When the message is a request sets if the sender of the message requests to be notified when the receiver is composing a reply. When the message is a notification sets if the receiver of the message is composing a reply.
org.jivesoftware.smackx.xevent.packet.MessageEvent.setDelivered	(	boolean	): When the message is a request sets if the sender of the message requests to be notified when the message is delivered. When the message is a notification sets if the message was delivered or not.
org.jivesoftware.smackx.xevent.packet.MessageEvent.setDisplayed	(	boolean	): When the message is a request sets if the sender of the message requests to be notified when the message is displayed. When the message is a notification sets if the message was displayed or not.
org.jivesoftware.smackx.xevent.packet.MessageEvent.setOffline	(	boolean	): When the message is a request sets if the sender of the message requests to be notified when the receiver of the message is offline. When the message is a notification sets if the receiver of the message was offline.
org.jivesoftware.smackx.xevent.packet.MessageEvent.setStanzaId	(	String	): Sets the unique ID of the message that requested to be notified of the event. The stanza(/packet) id is not used when the message is a request for notifications
org.jivesoftware.smackx.xevent.packet.MessageEvent.toXML	(	): Returns the XML representation of a Message Event according the specification. Usually the XML representation will be inside of a Message XML representation like in the following examples: Request to be notified when displayed:  <message to='romeo@montague.net/orchard' from='juliet@capulet.com/balcony' id='message22'> <x xmlns='jabber:x:event'> <displayed/> </x> </message>  Notification of displayed:  <message from='romeo@montague.net/orchard' to='juliet@capulet.com/balcony'> <x xmlns='jabber:x:event'> <displayed/> <id>message22</id> </x> </message> 
org.jivesoftware.smackx.xevent.provider.MessageEventProvider: The MessageEventProvider parses Message Event packets.
org.jivesoftware.smackx.xevent.provider.MessageEventProvider.parse	(	XmlPullParser	int	): Parses a MessageEvent stanza(/packet) (extension sub-packet).
org.jivesoftware.smackx.xhtmlim.XHTMLManager: Manages XHTML formatted texts within messages. A XHTMLManager provides a high level access to get and set XHTML bodies to messages, enable and disable XHTML support and check if remote XMPP clients support XHTML. 
org.jivesoftware.smackx.xhtmlim.XHTMLManager.addBody	(	Message	XHTMLText	): Adds an XHTML body to the message.
org.jivesoftware.smackx.xhtmlim.XHTMLManager.getBodies	(	Message	): Returns an Iterator for the XHTML bodies in the message. Returns null if the message does not contain an XHTML extension.
org.jivesoftware.smackx.xhtmlim.XHTMLManager.isServiceEnabled	(	XMPPConnection	): Returns true if the XHTML support is enabled for the given connection.
org.jivesoftware.smackx.xhtmlim.XHTMLManager.isServiceEnabled	(	XMPPConnection	Jid	): Returns true if the specified user handles XHTML messages.
org.jivesoftware.smackx.xhtmlim.XHTMLManager.isXHTMLMessage	(	Message	): Returns true if the message contains an XHTML extension.
org.jivesoftware.smackx.xhtmlim.XHTMLManager.setServiceEnabled	(	XMPPConnection	boolean	): Enables or disables the XHTML support on a given connection. Before starting to send XHTML messages to a user, check that the user can handle XHTML messages. Enable the XHTML support to indicate that this client handles XHTML messages. 
org.jivesoftware.smackx.xhtmlim.XHTMLText: An XHTMLText represents formatted text. This class also helps to build valid XHTML tags.
org.jivesoftware.smackx.xhtmlim.XHTMLText.XHTMLText	(	String	String	): Creates a new XHTMLText with body tag params.
org.jivesoftware.smackx.xhtmlim.XHTMLText.append	(	String	): Appends a given text to the XHTMLText.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendBrTag	(	): Appends a tag that inserts a single carriage return.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseAnchorTag	(	): Appends a tag that indicates that an anchor section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseBlockQuoteTag	(	): Appends a tag that indicates that a blockquote section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseCodeTag	(	): Appends a tag that indicates end of text that is the code for a program.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseEmTag	(	): Appends a tag that indicates end of emphasis.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseHeaderTag	(	int	): Appends a tag that indicates that a header section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseInlinedQuoteTag	(	): Appends a tag that indicates that an inlined quote section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseLineItemTag	(	): Appends a tag that indicates that a line item section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseOrderedListTag	(	): Appends a tag that indicates that an ordered list section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseParagraphTag	(	): Appends a tag that indicates the end of a new paragraph. This is usually rendered with two carriage returns, producing a single blank line in between the two paragraphs.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseSpanTag	(	): Appends a tag that indicates that a span section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseStrongTag	(	): Appends a tag that indicates that a strong section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendCloseUnorderedListTag	(	): Appends a tag that indicates that an unordered list section ends.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendImageTag	(	String	String	String	String	String	): Appends a tag that indicates an image.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendLineItemTag	(	String	): Appends a tag that indicates the start of a new line item within a list.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenAnchorTag	(	String	String	): Appends a tag that indicates that an anchor section begins.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenBlockQuoteTag	(	String	): Appends a tag that indicates that a blockquote section begins.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenBodyTag	(	String	String	): Appends a tag that indicates that a body section begins.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenCiteTag	(	): Appends a tag that indicates a reference to work, such as a book, report or web site.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenCodeTag	(	): Appends a tag that indicates text that is the code for a program.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenEmTag	(	): Appends a tag that indicates emphasis.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenHeaderTag	(	int	String	): Appends a tag that indicates a header, a title of a section of the message.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenInlinedQuoteTag	(	String	): Appends a tag that indicates that an inlined quote section begins.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenOrderedListTag	(	String	): Appends a tag that creates an ordered list. "Ordered" means that the order of the items in the list is important. To show this, browsers automatically number the list. 
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenParagraphTag	(	String	): Appends a tag that indicates the start of a new paragraph. This is usually rendered with two carriage returns, producing a single blank line in between the two paragraphs.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenSpanTag	(	String	): Appends a tag that allows to set the fonts for a span of text.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenStrongTag	(	): Appends a tag that indicates text which should be more forceful than surrounding text.
org.jivesoftware.smackx.xhtmlim.XHTMLText.appendOpenUnorderedListTag	(	String	): Appends a tag that creates an unordered list. The unordered part means that the items in the list are not in any particular order.
org.jivesoftware.smackx.xhtmlim.XHTMLText.toString	(	): Returns the text of the XHTMLText.
org.jivesoftware.smackx.xhtmlim.packet.XHTMLExtension: An XHTML sub-packet, which is used by XMPP clients to exchange formatted text. The XHTML extension is only a subset of XHTML 1.0.  The following link summarizes the requirements of XHTML IM: XEP-0071: XHTML-IM. 
org.jivesoftware.smackx.xhtmlim.packet.XHTMLExtension.addBody	(	CharSequence	): Adds a body to the packet.
org.jivesoftware.smackx.xhtmlim.packet.XHTMLExtension.getBodies	(	): Returns a List of the bodies in the packet.
org.jivesoftware.smackx.xhtmlim.packet.XHTMLExtension.getBodiesCount	(	): Returns a count of the bodies in the XHTML packet.
org.jivesoftware.smackx.xhtmlim.packet.XHTMLExtension.getElementName	(	): Returns the XML element name of the extension sub-packet root element. Always returns "html"
org.jivesoftware.smackx.xhtmlim.packet.XHTMLExtension.getNamespace	(	): Returns the XML namespace of the extension sub-packet root element. According the specification the namespace is always "http://jabber.org/protocol/xhtml-im"
org.jivesoftware.smackx.xhtmlim.packet.XHTMLExtension.toXML	(	): Returns the XML representation of a XHTML extension according the specification. Usually the XML representation will be inside of a Message XML representation like in the following example:  <message id="MlIpV-4" to="gato1@gato.home" from="gato3@gato.home/Smack"> <subject>Any subject you want</subject> <body>This message contains something interesting.</body> <html xmlns="http://jabber.org/protocol/xhtml-im"> <body><p style='font-size:large'>This message contains something <em>interesting</em>.</p></body> </html> </message> 
org.jivesoftware.smackx.xhtmlim.provider.XHTMLExtensionProvider: The XHTMLExtensionProvider parses XHTML packets.
org.jivesoftware.smackx.xroster.RemoteRosterEntry: Represents a roster item, which consists of a JID and , their name and the groups the roster item belongs to. This roster item does not belong to the local roster. Therefore, it does not persist in the server. The idea of a RemoteRosterEntry is to be used as part of a roster exchange.
org.jivesoftware.smackx.xroster.RemoteRosterEntry.RemoteRosterEntry	(	Jid	String	String[]	): Creates a new remote roster entry.
org.jivesoftware.smackx.xroster.RemoteRosterEntry.getGroupArrayNames	(	): Returns a String array for the group names that the roster entry belongs to.
org.jivesoftware.smackx.xroster.RemoteRosterEntry.getGroupNames	(	): Returns an Iterator for the group names (as Strings) that the roster entry belongs to.
org.jivesoftware.smackx.xroster.RemoteRosterEntry.getName	(	): Returns the user's name.
org.jivesoftware.smackx.xroster.RemoteRosterEntry.getUser	(	): Returns the user.
org.jivesoftware.smackx.xroster.RosterExchangeListener: A listener that is fired anytime a roster exchange is received.
org.jivesoftware.smackx.xroster.RosterExchangeListener.entriesReceived	(	Jid	Iterator	): Called when roster entries are received as part of a roster exchange.
org.jivesoftware.smackx.xroster.RosterExchangeManager: Manages Roster exchanges. A RosterExchangeManager provides a high level access to send rosters, roster groups and roster entries to XMPP clients. It also provides an easy way to hook up custom logic when entries are received from another XMPP client through RosterExchangeListeners.
org.jivesoftware.smackx.xroster.RosterExchangeManager.RosterExchangeManager	(	XMPPConnection	): Creates a new roster exchange manager.
org.jivesoftware.smackx.xroster.RosterExchangeManager.addRosterListener	(	RosterExchangeListener	): Adds a listener to roster exchanges. The listener will be fired anytime roster entries are received from remote XMPP clients.
org.jivesoftware.smackx.xroster.RosterExchangeManager.fireRosterExchangeListeners	(	Jid	Iterator	): Fires roster exchange listeners.
org.jivesoftware.smackx.xroster.RosterExchangeManager.removeRosterListener	(	RosterExchangeListener	): Removes a listener from roster exchanges. The listener will be fired anytime roster entries are received from remote XMPP clients.
org.jivesoftware.smackx.xroster.RosterExchangeManager.send	(	Roster	Jid	): Sends a roster to userID. All the entries of the roster will be sent to the target user.
org.jivesoftware.smackx.xroster.RosterExchangeManager.send	(	RosterEntry	Jid	): Sends a roster entry to userID.
org.jivesoftware.smackx.xroster.RosterExchangeManager.send	(	RosterGroup	Jid	): Sends a roster group to userID. All the entries of the group will be sent to the target user.
org.jivesoftware.smackx.xroster.packet.RosterExchange: Represents XMPP Roster Item Exchange packets. The 'jabber:x:roster' namespace (which is not to be confused with the 'jabber:iq:roster' namespace) is used to send roster items from one client to another. A roster item is sent by adding to the <message/> element an <x/> child scoped by the 'jabber:x:roster' namespace. This <x/> element may contain one or more <item/> children (one for each roster item to be sent). Each <item/> element may possess the following attributes: <jid/> -- The id of the contact being sent. This attribute is required. <name/> -- A natural-language nickname for the contact. This attribute is optional. Each <item/> element may also contain one or more <group/> children specifying the natural-language name of a user-specified group, for the purpose of categorizing this contact into one or more roster groups.
org.jivesoftware.smackx.xroster.packet.RosterExchange.RosterExchange	(	): Creates a new empty roster exchange package.
org.jivesoftware.smackx.xroster.packet.RosterExchange.RosterExchange	(	Roster	): Creates a new roster exchange package with the entries specified in roster.
org.jivesoftware.smackx.xroster.packet.RosterExchange.addRosterEntry	(	RemoteRosterEntry	): Adds a remote roster entry to the packet.
org.jivesoftware.smackx.xroster.packet.RosterExchange.addRosterEntry	(	RosterEntry	): Adds a roster entry to the packet.
org.jivesoftware.smackx.xroster.packet.RosterExchange.getElementName	(	): Returns the XML element name of the extension sub-packet root element. Always returns "x"
org.jivesoftware.smackx.xroster.packet.RosterExchange.getEntryCount	(	): Returns a count of the entries in the roster exchange.
org.jivesoftware.smackx.xroster.packet.RosterExchange.getNamespace	(	): Returns the XML namespace of the extension sub-packet root element. According the specification the namespace is always "jabber:x:roster" (which is not to be confused with the 'jabber:iq:roster' namespace
org.jivesoftware.smackx.xroster.packet.RosterExchange.getRosterEntries	(	): Returns an Iterator for the roster entries in the packet.
org.jivesoftware.smackx.xroster.packet.RosterExchange.toXML	(	): Returns the XML representation of a Roster Item Exchange according the specification. Usually the XML representation will be inside of a Message XML representation like in the following example:  <message id="MlIpV-4" to="gato1@gato.home" from="gato3@gato.home/Smack"> <subject>Any subject you want</subject> <body>This message contains roster items.</body> <x xmlns="jabber:x:roster"> <item jid="gato1@gato.home"/> <item jid="gato2@gato.home"/> </x> </message> 
org.jivesoftware.smackx.xroster.provider.RosterExchangeProvider: The RosterExchangeProvider parses RosterExchange packets.
org.jivesoftware.smackx.xroster.provider.RosterExchangeProvider.parse	(	XmlPullParser	int	): Parses a RosterExchange stanza(/packet) (extension sub-packet).
org.jivesoftware.util.ConnectionUtils: A collection of utility methods to create mocked XMPP connections.
org.jivesoftware.util.ConnectionUtils.createMockedConnection	(	Protocol	EntityFullJid	DomainBareJid	): Creates a mocked XMPP connection that stores every stanza(/packet) that is send over this connection in the given protocol instance and returns the predefined answer packets form the protocol instance.  This mocked connection can used to collect packets that require a reply using a StanzaCollector.   StanzaCollector collector = connection.createStanzaCollector(new PacketFilter()); connection.sendStanza(packet); Stanza(/Packet) reply = collector.nextResult();  
org.jivesoftware.util.Protocol: This class can be used in conjunction with a mocked XMPP connection ( createMockedConnection()) to verify an XMPP protocol. This can be accomplished in the following was:  add responses to packets sent over the mocked XMPP connection by the method to test in the order the tested method awaits them call the method to test call verifyAll() to run assertions on the request/response pairs   Example:   public void methodToTest() { Stanza(/Packet) stanza(/packet) = new Packet(); // create an XMPP packet StanzaCollector collector = connection.createStanzaCollector(new StanzaIdFilter()); connection.sendStanza(packet); Stanza(/Packet) reply = collector.nextResult(); } public void testMethod() { // create protocol Protocol protocol = new Protocol(); // create mocked connection XMPPConnection connection = ConnectionUtils.createMockedConnection(protocol, "user@xmpp-server", "xmpp-server"); // add reply stanza(/packet) to protocol Stanza(/Packet) reply = new Packet(); protocol.add(reply); // call method to test methodToTest(); // verify protocol protocol.verifyAll(); }   Additionally to adding the response to the protocol instance you can pass verifications that will be executed when verifyAll() is invoked. (See Verification for more details.)  If the printProtocol flag is set to true verifyAll() will also print out the XML messages in the order they are sent to the console. This may be useful to inspect the whole protocol "by hand".
org.jivesoftware.util.Protocol.addResponse	(	Stanza	Verification	): Adds a responses and all verifications for the request/response pair to the protocol.
org.jivesoftware.util.Protocol.getRequests	(	): Returns a list of all collected requests.
org.jivesoftware.util.Protocol.getResponses	(	): Returns the responses queue.
org.jivesoftware.util.Protocol.verifyAll	(	): Verifies the request/response pairs by checking if their numbers match and executes the verification for each pair.
org.jivesoftware.util.Verification: Implement this interface to verify a request/response pair.  For convenience there are some useful predefined implementations.
org.jivesoftware.util.Verification.verify	(	T	S	): Implement this method to make assertions of the request/response pairs.
